/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/annotators/feedback/annotations": {
    /**
     * Bulk create category feedback 
     * @description Provide bulk feedback on Transaction Categories
     */
    post: {
      /** @description A list of objects containing a Transaction's heron id and the suggested Category. If you provide a `heron_id` for Category, you don't need to provide other fields. If `heron_id` is provided, we disregard `label`. */
      requestBody: {
        content: {
          "application/json": (components["schemas"]["BulkCategoryFeedback"])[];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              /**
               * @description The number of category annotations added 
               * @example 1
               */
              num_annotations?: number;
            };
          };
        };
      };
    };
  };
  "/api/categories": {
    /**
     * Get categories 
     * @description Get available categories
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              categories?: (components["schemas"]["Category"])[];
            };
          };
        };
        /** @description Unauthorized */
        401: never;
      };
    };
  };
  "/api/end_users": {
    /**
     * List EndUsers 
     * @description Get a list of EndUsers
     */
    get: {
      parameters: {
        query: {
          /** @description Filter by status of end user */
          status?: "new" | "ready" | "processed" | "reviewed" | "review_requested" | "failed" | null;
          /** @description Order to return end users by */
          order_by?: "last_updated_desc" | "last_updated_asc";
          /** @description Filter by name associated with end user */
          name?: string | null;
          /** @description Unique ID generated by Heron */
          heron_id?: string | null;
          /** @description Whether the end user is part of a lending portfolio */
          is_portfolio?: boolean | null;
          /** @description Filter by ID associated with end_user_id field in transactions */
          end_user_id?: string | null;
          /** @description Pagination page number */
          page?: number;
          /** @description Pagination limit per page */
          limit?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              _meta?: {
                /** @example 1000 */
                limit?: number;
                next_url?: string;
                /** @example 1 */
                page?: number;
                /** @example 3 */
                pages?: number;
                prev_url?: string;
                /** @example 3500 */
                total?: number;
              };
              end_users?: (components["schemas"]["EndUser"])[];
            };
          };
        };
      };
    };
    /**
     * Update EndUser 
     * @description Confirm an end user is ready for async procesing by sending a status of "ready". The `end_user_id` must have previously been sent with at least one Transaction.
     */
    put: {
      /** @description Dictionary representing an EndUser */
      requestBody: {
        content: {
          "application/json": {
            end_user?: components["schemas"]["EndUser"];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              end_user?: components["schemas"]["EndUser"];
            };
          };
        };
      };
    };
    /**
     * Create EndUser 
     * @description Create a new end user. If transactions have previously been sent for this `end_user_id`, use `PUT end_users` to update instead.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            end_user?: components["schemas"]["EndUser"];
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              end_user?: components["schemas"]["EndUser"];
            };
          };
        };
      };
    };
  };
  "/api/end_users/balance": {
    /**
     * Get EndUser balance 
     * @description Get balance for given EndUser on a daily and account granularity
     */
    get: {
      parameters: {
        query: {
          /** @description ISO 4217 currency code to convert to */
          to_currency?: "USD" | "EUR" | "GBP" | null;
          /** @description Filter for transactions with timestamp after the input value */
          timestamp_min?: string | null;
          /** @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required */
          end_user_heron_id?: string | null;
          /** @description Filter for transactions with timestamp earlier than the input value */
          timestamp_max?: string | null;
          /** @description end_user_id for statistics; either end_user_id or end_user_heron_id is required */
          end_user_id?: string | null;
          /** @description If true, forecasts the balances of each account */
          include_forecast?: boolean;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EndUserBalanceOutputSchema"];
          };
        };
      };
    };
  };
  "/api/end_users/forecast": {
    /**
     * Get EndUser forecasts 
     * @description Get forecast amounts for a given EndUser and category
     */
    get: {
      parameters: {
        query: {
          /** @description ISO 4217 currency code to convert to */
          to_currency?: "USD" | "EUR" | "GBP" | null;
          /** @description The earliest transaction timestamp date to use in forecasting */
          from_date?: string | null;
          /** @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required */
          end_user_heron_id?: string | null;
          /** @description The latest transaction timestamp date to use in forecasting */
          to_date?: string | null;
          /** @description Heron ID of category to be forecasted; either category_heron_id or category_label must be present */
          category_heron_id?: string;
          /** @description end_user_id for statistics; either end_user_id or end_user_heron_id is required */
          end_user_id?: string | null;
          /** @description Label of category to be forecasted; either category_heron_id or category_label must be present */
          category_label?: string;
          /** @description Aggregate results over time, i.e., aggregate by week or by month */
          date_granularity?: "week" | "month";
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": (components["schemas"]["EndUserForecastOutputSchema"])[];
          };
        };
      };
    };
  };
  "/api/end_users/statistics": {
    /**
     * Get EndUser statistics 
     * @description Get summarized statistics for a given EndUser
     */
    get: {
      parameters: {
        query: {
          /** @description ISO 4217 currency code to convert to */
          to_currency?: "USD" | "EUR" | "GBP" | null;
          /** @description Filter by specific merchants */
          merchant_heron_ids?: (string)[];
          /** @description Pivot results by merchant or by category */
          group_by?: "category" | "merchant";
          /** @description Filter for transactions with timestamp after the input value (as date) */
          from_date?: string | null;
          /** @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required */
          end_user_heron_id?: string | null;
          /** @description Filter for transactions with timestamp before the input value (as date) */
          to_date?: string | null;
          /** @description Filter by specific categories */
          category_heron_ids?: (string)[];
          /** @description end_user_id for statistics; either end_user_id or end_user_heron_id is required */
          end_user_id?: string | null;
          /** @description Aggregate results over time, e.g., by week or by quarter */
          date_granularity?: "day" | "week" | "month" | "quarter" | "year";
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              statistics?: (components["schemas"]["EndUserStatsOutputSchema"])[];
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}": {
    /**
     * Get EndUser by heron_id or end_user_id 
     * @description Get an end user using its end_user_id or heron_id
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            "application/json": {
              end_user?: components["schemas"]["EndUser"];
            };
          };
        };
      };
    };
    /**
     * Delete EndUser by heron_id or end_user_id 
     * @description Delete an end user. You must delete associated transactions before doing this.
     */
    delete: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: {
            "application/json": {
              heron_id?: string;
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/anomalies": {
    /**
     * Get EndUser anomalies 
     * @description Get anomalies for given EndUser given a category label or heron id
     */
    get: {
      parameters: {
        query: {
          /** @description Label or Heron ID of category to find anomalies for */
          category_label_or_heron_id: string;
        };
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": (components["schemas"]["AnomalySchema"])[];
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/inscribe": {
    /**
     * Upload Inscribe 
     * @description Upload Inscribe JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["InscribeSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/ocrolus": {
    /**
     * Upload Ocrolus 
     * @description Upload Ocrolus JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["OcrolusSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/pdfs": {
    /**
     * Get PDFs 
     * @description Get list of PDFs for a specified end user
     */
    get: {
      parameters: {
        query: {
          /** @description Include processed results where applicable per pdf */
          with_processed_results?: boolean;
        };
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              pdfs?: (components["schemas"]["PdfGetSchema"])[];
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/pdfs/v1": {
    /**
     * Upload PDF 
     * @description Upload encoded PDF of transactions for a specified end user to translate into Heron Data format
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PdfPostSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/plaid/assets": {
    /**
     * Upload Plaid assets 
     * @description Upload Plaid asset JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlaidAssetsSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/plaid/transactions": {
    /**
     * Upload Plaid transactions 
     * @description Upload Plaid transactions JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlaidTransactionsSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss": {
    /**
     * Get EndUser P&L 
     * @description Calculates the profit & loss table for an end user, based on the layout defined (if any)
     */
    get: {
      parameters: {
        query: {
          /** @description The earliest transaction timestamp date to use */
          from_date?: string | null;
          /** @description The latest transaction timestamp date to use */
          to_date?: string | null;
          /** @description ISO 4217 currency code for balance */
          currency?: string | null;
          /** @description If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first */
          dates_ascending?: boolean;
        };
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProfitAndLossSchema"];
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss_layout": {
    /**
     * Update EndUser P&L layout 
     * @description Update the profit and loss layout for the end user, which determines how the profit and loss table is calculated
     */
    put: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProfitAndLossLayoutUpdateSchema"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProfitAndLossLayoutSchema"];
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss_statements": {
    /**
     * Upload P&L in CSV format 
     * @description Upload P&L for a specified end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProfitAndLossStatementPostSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/scorecard": {
    /**
     * Get EndUser scorecard 
     * @description Get scorecard metrics and rule violations for a user
     */
    get: {
      parameters: {
        query: {
          /** @description Cut-off date to consider transactions to for calculating scorecard (inclusive) */
          date?: string | null;
        };
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              metrics?: (components["schemas"]["Metric"])[];
              rule_violations?: (components["schemas"]["RuleViolation"])[];
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/transactions": {
    /**
     * Get end user transactions 
     * @description Get all unique transactions for a single end user. Set end user status to "ready" to initiate transaction enrichment, otherwise may contain both enriched and unenriched transactions
     */
    get: {
      parameters: {
        query: {
          /** @description Results page */
          page?: number;
          /** @description Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat */
          last_updated_min?: string | null;
          /** @description Desired results per page */
          per_page?: number;
        };
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              _meta?: components["schemas"]["Pagination"];
              transactions_enriched?: (components["schemas"]["TransactionEnriched"])[];
            };
          };
        };
      };
    };
    /**
     * Create end user transactions 
     * @description Upload transactions for a specific end user. Does not include enriching transactions -- set end user status = 'ready' to initiate processing
     */
    post: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            transactions?: (components["schemas"]["Transaction"])[];
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              /** @description Unique UUID per request */
              request_id?: string;
              /** @description The number of transactions loaded */
              transactions_loaded?: number;
            };
          };
        };
      };
    };
  };
  "/api/end_users/{end_user_id_or_heron_id}/yodlee": {
    /**
     * Upload Yodlee 
     * @description Upload Yodlee JSON files for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["YodleeSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
            };
          };
        };
      };
    };
  };
  "/api/hello_world": {
    /** @description Test endpoint (no authentication) */
    get: {
      responses: {
        /** @description url works */
        200: {
          content: {
            "application/json": {
              hello?: string;
            };
          };
        };
      };
    };
  };
  "/api/hello_world/authenticated": {
    /** @description Test authentication */
    get: {
      responses: {
        /** @description Authentication works */
        200: {
          content: {
            "application/json": {
              hello?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: never;
      };
    };
  };
  "/api/integrations/": {
    /**
     * Create an integration 
     * @description Create an integration e.g. with Plaid
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            integration?: components["schemas"]["IntegrationSchema"];
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              integration?: components["schemas"]["IntegrationSchema"];
            };
          };
        };
      };
    };
  };
  "/api/integrations/{heron_id}/links": {
    /**
     * Create an integration Link 
     * @description Create a Link for an active Integration every time a customer connects their bank. In Plaid, this is a Plaid Link every time a customer connects their bank. For Plaid, call this after exchanging a public token for an Item access_token.
     */
    post: {
      parameters: {
        path: {
          heron_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["IntegrationLinkSchema"];
        };
      };
      responses: {
        /** @description Created */
        201: never;
      };
    };
  };
  "/api/merchants/extract": {
    /** @description Extract Merchant from a transaction description */
    post: {
      /** @description The bank transaction description as a string */
      requestBody?: {
        content: {
          "application/json": {
            /** @example PAYPAL* AMZN Mktp 198748320 */
            description: string;
          };
        };
      };
      responses: {
        /** @description The `merchant` key is not null when we find a positive match to our database. When we could not match a merchant, `merchant` is null and `description_clean` is set to a substring of the original description that our models identified as the relevant entity. */
        200: {
          content: {
            "application/json": {
              /** @example Amzn Mktp */
              description_clean?: string | null;
              merchant?: components["schemas"]["MerchantExtract"];
              payment_processor?: components["schemas"]["PaymentProcessor"];
            };
          };
        };
      };
    };
  };
  "/api/merchants/search": {
    /** @description Search Merchants by name */
    get: {
      parameters: {
        query: {
          /** @description Full or partial name, minimum 3 characters */
          name: string;
        };
      };
      responses: {
        /** @description A list of up to 5 merchants which match the search term, sorted by descending order of their URL rank and the frequency this merchant has been seen historically. */
        200: {
          content: {
            "application/json": {
              merchants?: (components["schemas"]["Merchant"])[];
            };
          };
        };
      };
    };
  };
  "/api/merchants/{heron_id}": {
    /** @description Get Merchant by heron_id */
    get: {
      parameters: {
        path: {
          /** @description The Merchant `heron_id` */
          heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              merchant?: components["schemas"]["Merchant"];
            };
          };
        };
      };
    };
  };
  "/api/rules/": {
    /**
     * Get rules 
     * @description Read all available rules
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              rules?: (components["schemas"]["Rule"])[];
            };
          };
        };
      };
    };
    /**
     * Create rule 
     * @description Create a new rule to send a 'end_user.review_required' webhook after processing if rule condition evaluates to true
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            rule?: components["schemas"]["Rule"];
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              rule?: components["schemas"]["Rule"];
            };
          };
        };
      };
    };
  };
  "/api/rules/{heron_id}": {
    /**
     * Delete rule by heron_id 
     * @description Delete a rule
     */
    delete: {
      parameters: {
        path: {
          heron_id: string;
        };
      };
      responses: {
        /** @description Deleted */
        204: {
          content: {
            "application/json": {
              heron_id?: string;
            };
          };
        };
      };
    };
  };
  "/api/transactions": {
    /** @description Get transactions */
    get: {
      parameters: {
        query: {
          /** @description Filter by the heron_id of the category that the transaction is annotated with */
          category_heron_id?: (string)[] | null;
          /** @description Filter by latest transaction timestamp */
          timestamp_date_max?: string;
          /** @description Filter by earliest transaction timestamp */
          timestamp_date_min?: string;
          /** @description Page of transaction to return */
          page?: number;
          /** @description Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates. */
          request_id?: string;
          /** @description Filter by earliest transaction upload date - when Heron received the transaction */
          created_date_min?: string;
          /** @description Filter by maximum confidence of annotation associated with transaction */
          confidence_max?: number;
          /** @description Deprecated; see created_date_ or timestamp_date_ */
          from_date?: string;
          /** @description Filter for transactions whose values were last updated in Heron systems after the specified input value */
          last_updated_min?: string;
          /** @description Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true. */
          include_duplicates?: boolean;
          /** @description Filter by minimum confidence of annotation associated with transaction */
          confidence_min?: number;
          /** @description Filter by keyword match on transaction description; case insensitive */
          description_keyword?: string;
          /** @description Filter by maximum amount of transaction */
          max_amount?: number;
          /** @description Filter by transaction code */
          transaction_code?: string;
          /** @description What to order transactions by */
          order_by?: "amount_asc" | "amount_desc" | "abs_amount_asc" | "abs_amount_desc" | "description_asc" | "description_desc" | "timestamp_asc" | "timestamp_desc" | "id_asc" | "id_desc";
          /** @description Filter by whether the transaction has a matching transaction */
          has_matching_transaction?: boolean;
          /** @description Filter by merchant group id */
          merchant_group_id?: string;
          /** @description Filter by latest transaction upload date - when Heron received the transaction */
          created_date_max?: string;
          /** @description Deprecated; see created_date_ or timestamp_date_ */
          to_date?: string;
          /** @description End user id of transaction */
          end_user_id?: string;
          /** @description Reference Id of transaction */
          reference_id?: string;
          /** @description Filter for transactions whose values were last updated in Heron systems before the specified input value */
          last_updated_max?: string;
          /** @description Filter by regex matching transaction description */
          description_regex?: string;
          /** @description Heron generated Id of transaction */
          heron_id?: string;
          /** @description Filter by whether the transaction is recurring */
          is_recurring?: boolean;
          /** @description Filter by minimum amount of transaction */
          min_amount?: number;
          /** @description Number of transactions to return per page */
          limit?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              _meta?: {
                next_url?: string;
                page?: number;
                pages?: number;
                per_page?: number;
                prev_url?: string;
              };
              _summary?: {
                returned_transactions?: number;
                transactions?: number;
              };
              transactions?: (components["schemas"]["TransactionGetOutput"])[];
            };
          };
        };
        /** @description Unauthorized */
        401: never;
      };
    };
    /**
     * Create and enrich transactions 
     * @description Enrich and categorize transactions. Please send a maximum of 249 transactions per request if you expect to consume the sync response. If you use us async and `GET` transactions after an end_user is processed, please send a maximum of 1,000 transactions.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TransactionsPostSchema"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string;
              };
              transactions?: (components["schemas"]["TransactionPostOutput"])[];
            };
          };
        };
        /** @description Payload Too Large */
        413: {
          content: {
            "application/json": {
              /** @example 413 */
              code?: number;
              /** @example Transaction batch size exceeds max of 10000 */
              description?: string;
              /** @example Payload Too Large */
              name?: string;
            };
          };
        };
      };
    };
    /** @description Delete transactions */
    delete: {
      parameters: {
        query: {
          /** @description (legacy) Heron ID of transaction to be deleted */
          heron_id?: string | null;
          /** @description account_id of transactions to be deleted */
          account_id?: string | null;
          /** @description Heron IDs of transactions to be deleted */
          heron_ids?: (string)[];
          /** @description Reference IDs of transactions to be deleted */
          reference_ids?: (string)[];
          /** @description end_user_id of transactions to be deleted */
          end_user_id?: string | null;
          /** @description Request ID of transactions to be deleted */
          request_id?: string | null;
          /** @description if true, deletes only transactions that are marked as duplicates */
          only_duplicates?: boolean | null;
        };
      };
      responses: {
        /** @description OK */
        202: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
  };
  "/api/transactions/{heron_id}/feedback": {
    /**
     * Create category, merchant feedback 
     * @description Provide feedback on a Transaction's Categories and Merchants
     */
    put: {
      parameters: {
        path: {
          /** @description Transaction `heron_id` */
          heron_id: string;
        };
      };
      /** @description A partial Transaction object with the suggested Category and/or Merchant. If you provide a `heron_id` for Category or Merchant, you don't need to provide other fields. If you don't know the Merchant `heron_id` nor name, you can just send the `is_correct` boolean. If `heron_id` is provided, we disregard `name` and `label`. If `is_correct` is set to true, we disregard all other Merchant fields. */
      requestBody: {
        content: {
          "application/json": {
            transaction?: components["schemas"]["TransactionFeedbackSchema"];
          };
        };
      };
      responses: {
        /** @description OK */
        200: never;
        /** @description Unauthorized */
        401: never;
      };
    };
  };
  "/api/transactions/{reference_id_or_heron_id}": {
    /** @description Get enriched transaction */
    get: {
      parameters: {
        path: {
          reference_id_or_heron_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              transaction_enriched?: components["schemas"]["TransactionEnriched"];
            };
          };
        };
        /** @description Unauthorized */
        401: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AccountBalance: {
      /** @example checking_account_202348 */
      account_id: string;
      /**
       * @description The closing balance for this account after the transactions in this batch 
       * @example 25000.45
       */
      batch_closing_balance: number;
    };
    Annotation: {
      annotator?: components["schemas"]["AnnotatorPublic"];
      category?: components["schemas"]["Category1"];
      confidence?: number;
      model_version?: string;
    };
    AnnotatorPublic: {
      /** @enum {string} */
      context: "sync" | "async_" | "manual" | "undetermined";
      /** @enum {string} */
      priority_type: "gold_standard" | "client_feedback" | "tagging_ui" | "reconcile" | "heuristic" | "classifier" | "undetermined";
    };
    AnomalyParams: {
      /**
       * @description Label or Heron ID of category to find anomalies for 
       * @example Revenue
       */
      category_label_or_heron_id: string;
    };
    AnomalySchema: {
      /**
       * @description Converted amount of transaction in currency 
       * @example 42.42
       */
      amount?: number;
      /**
       * @description Anomaly score 0-1, where 1 is very anomalous, and 0 is not anomalous 
       * @example 0.5
       */
      anomaly_score?: number;
      /**
       * @description Currency code for amount that transaction was converted to 
       * @example USD
       */
      currency?: string;
      /**
       * @description Heron ID of the Transaction 
       * @example txn_b2hLDdUXfSbZQTh7RwQkQk
       */
      heron_id?: string;
      /**
       * @description Customer-provided reference ID for the Transaction 
       * @example 1342db06-feb7-4c33-a157-4351d74a98e9
       */
      reference_id?: string;
    };
    BulkCategoryFeedback: {
      category?: components["schemas"]["CategoryFeedback"];
      /**
       * @description your identifier for where the feedback comes from e.g. bob_the_underwriter 
       * @default null
       */
      source?: string | null;
      /**
       * @description heron id of transaction 
       * @example txn_oK7StynmNWj9YGrU9Kn4Bp
       */
      transaction_heron_id: string;
    };
    Category: {
      /**
       * Format: date-time 
       * @description Timestamp for when the category was created 
       * @example 2023-04-11T16:56:17.770420
       */
      created?: string;
      description?: string | null;
      /**
       * @description Unique ID of the category generated by Heron Data 
       * @example ctg_BsrrbZWvuCvbWWznDBq8Vw
       */
      heron_id?: string;
      /**
       * @description The label of the category 
       * @example Rent
       */
      label: string;
    };
    Category1: {
      /**
       * @description Unique ID of the category generated by Heron Data 
       * @example ctg_BsrrbZWvuCvbWWznDBq8Vw
       */
      heron_id?: string;
      /**
       * @description The label of the category 
       * @example Rent
       */
      label: string;
    };
    CategoryFeedback: {
      /**
       * @description heron_id of the correct category 
       * @example ctg_6UqmmKsUEYWX5nQwepEYvC
       */
      heron_id?: string;
      /**
       * @description label of the correct category 
       * @example Insurance
       */
      label?: string;
    };
    DeleteTransactionParams: {
      /**
       * @description account_id of transactions to be deleted 
       * @default null
       */
      account_id?: string | null;
      /**
       * @description end_user_id of transactions to be deleted 
       * @default null
       */
      end_user_id?: string | null;
      /**
       * @description (legacy) Heron ID of transaction to be deleted 
       * @default null 
       * @example txn_2XgBHnmT3nm5KDyUc2fmzj
       */
      heron_id?: string | null;
      /**
       * @description Heron IDs of transactions to be deleted 
       * @default []
       */
      heron_ids?: (string)[];
      /**
       * @description if true, deletes only transactions that are marked as duplicates 
       * @default null
       */
      only_duplicates?: boolean | null;
      /**
       * @description Reference IDs of transactions to be deleted 
       * @default []
       */
      reference_ids?: (string)[];
      /**
       * @description Request ID of transactions to be deleted 
       * @default null
       */
      request_id?: string | null;
    };
    EndUser: {
      /**
       * @description Aggregated confidence for the end user across all transactions; between 0 and 1 
       * @example 0.42
       */
      confidence?: number;
      /**
       * Format: date-time 
       * @description When the end user was created in Heron system 
       * @example 2023-02-28T16:56:17.987946
       */
      created?: string;
      /** @description List of scorecard metrics */
      criteria?: readonly (components["schemas"]["Metric"])[];
      /**
       * @description id defined by user; links to the end_user_id for transactions 
       * @example 07effbba-6e82-4be3-a8f4-0fcd2152ca12
       */
      end_user_id: string;
      /**
       * @description Unique id for end user generated by Heron 
       * @example eus_2KDBSA9BcRF2knBEjNRMmT
       */
      heron_id?: string;
      /**
       * @description Whether the end user is part of a lending portfolio 
       * @example true
       */
      is_portfolio?: boolean;
      /**
       * Format: date-time 
       * @description When the end user was last updated in Heron system 
       * @example 2023-04-11T16:56:17.987990
       */
      last_updated?: string;
      /**
       * @description Name of end user; may help to improve categorisation accuracy 
       * @example Company Name Inc.
       */
      name?: string | null;
      profit_and_loss_layout?: Record<string, unknown> | null;
      /**
       * @description Status of end user; 'ready' triggers async processing, 'review_requested' triggers manual review request 
       * @example ready 
       * @enum {string}
       */
      status?: "new" | "ready" | "review_requested" | "reviewed";
    };
    EndUser1: {
      /**
       * @description Unique id for end user generated by Heron 
       * @example eus_2KDBSA9BcRF2knBEjNRMmT
       */
      heron_id?: string;
    };
    EndUserAccountBalance: {
      /** @description Account associated with balance */
      account_id?: string;
      /** @description Balance amount */
      balance?: number;
      /** @description Converted balance amount in target currency */
      balance_converted?: number;
      /**
       * @description ISO 4217 currency code for balance 
       * @example USD
       */
      currency?: string | null;
      /**
       * @description Conversion currency code. ISO 4217 currency code for balance 
       * @example USD
       */
      currency_converted?: string | null;
      /** @description Whether the balance has been imputed using forward fill */
      is_computed?: boolean;
      /** @description Whether the date is the latest non-imputed balance for the account */
      is_latest?: boolean;
      /**
       * Format: date-time 
       * @description Timestamp of the latest transaction
       */
      timestamp?: string;
    };
    EndUserAccountBalanceForecast: {
      account_id?: string;
      balances?: (components["schemas"]["EndUserBalanceForecast"])[];
      currency?: string;
    };
    EndUserBalanceForecast: {
      /**
       * @description Forecast date at specified date granularity 
       * @example 2023-04-11
       */
      date?: string;
      /**
       * @description Predicted converted balance 
       * @example 42.42
       */
      predicted?: number;
      /**
       * @description Predict amount lower bound 
       * @example 4.24
       */
      predicted_lower?: number;
      /**
       * @description Predicted amount upper bound 
       * @example 420.42
       */
      predicted_upper?: number;
    };
    EndUserBalanceInputParams: {
      /**
       * @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required 
       * @default null 
       * @example eus_BjUZZWELKnKyW6ZGfNfXZT
       */
      end_user_heron_id?: string | null;
      /**
       * @description end_user_id for statistics; either end_user_id or end_user_heron_id is required 
       * @default null 
       * @example your_end_user_id
       */
      end_user_id?: string | null;
      /**
       * @description If true, forecasts the balances of each account 
       * @default false
       */
      include_forecast?: boolean;
      /**
       * Format: date-time 
       * @description Filter for transactions with timestamp earlier than the input value 
       * @default null 
       * @example 2023-04-10T16:56:17.939517
       */
      timestamp_max?: string | null;
      /**
       * Format: date-time 
       * @description Filter for transactions with timestamp after the input value 
       * @default null 
       * @example 2023-04-11T16:56:17.939478
       */
      timestamp_min?: string | null;
      /**
       * @description ISO 4217 currency code to convert to 
       * @example USD 
       * @enum {string|null}
       */
      to_currency?: "USD" | "EUR" | "GBP" | null;
    };
    EndUserBalanceOutputSchema: {
      daily_balances?: (components["schemas"]["EndUserDailyBalance"])[];
      forecasted?: (components["schemas"]["EndUserAccountBalanceForecast"])[];
      summary?: components["schemas"]["EndUserDailyBalance"];
    };
    EndUserDailyBalance: {
      accounts?: (components["schemas"]["EndUserAccountBalance"])[];
      /** @description Balance amount */
      balance?: number;
      /**
       * @description ISO 4217 currency code for balance 
       * @example USD
       */
      currency?: string | null;
      /**
       * Format: date 
       * @description Date of balance
       */
      date?: string;
    };
    EndUserForecastInputParams: {
      /**
       * @description Heron ID of category to be forecasted; either category_heron_id or category_label must be present 
       * @example ctg_SRvMGxxxQa26m7HopbFnVf
       */
      category_heron_id?: string;
      /**
       * @description Label of category to be forecasted; either category_heron_id or category_label must be present 
       * @example Revenue
       */
      category_label?: string;
      /**
       * @description Aggregate results over time, i.e., aggregate by week or by month 
       * @default month 
       * @example month 
       * @enum {string}
       */
      date_granularity?: "week" | "month";
      /**
       * @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required 
       * @default null 
       * @example eus_BjUZZWELKnKyW6ZGfNfXZT
       */
      end_user_heron_id?: string | null;
      /**
       * @description end_user_id for statistics; either end_user_id or end_user_heron_id is required 
       * @default null 
       * @example your_end_user_id
       */
      end_user_id?: string | null;
      /**
       * Format: date 
       * @description The earliest transaction timestamp date to use in forecasting 
       * @default null 
       * @example 2022-01-01
       */
      from_date?: string | null;
      /**
       * @description ISO 4217 currency code to convert to 
       * @example USD 
       * @enum {string|null}
       */
      to_currency?: "USD" | "EUR" | "GBP" | null;
      /**
       * Format: date 
       * @description The latest transaction timestamp date to use in forecasting 
       * @default null 
       * @example 2022-01-31
       */
      to_date?: string | null;
    };
    EndUserForecastOutputSchema: {
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * @description Forecast date at specified date granularity 
       * @example 2023-04-11
       */
      date?: string;
      /**
       * @description Predicted amount 
       * @example 42.42
       */
      predicted?: number;
      /**
       * @description Predict amount lower bound 
       * @example 4.24
       */
      predicted_lower?: number;
      /**
       * @description Predicted amount upper bound 
       * @example 420.42
       */
      predicted_upper?: number;
    };
    EndUserReadEnrichedParams: {
      /**
       * Format: date-time 
       * @description Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat 
       * @default null 
       * @example 2023-04-11T16:56:17.992693
       */
      last_updated_min?: string | null;
      /**
       * @description Results page 
       * @default 1
       */
      page?: number;
      /**
       * @description Desired results per page 
       * @default 100
       */
      per_page?: number;
    };
    EndUserReadParams: {
      /**
       * @description Information about the end user that can be used as rules for underwriting 
       * @default null 
       * @example {
       *   "history_days": {
       *     "value": 40
       *   }
       * }
       */
      criteria?: Record<string, unknown> | null;
      /**
       * @description Filter by ID associated with end_user_id field in transactions 
       * @default null 
       * @example your_end_user_id
       */
      end_user_id?: string | null;
      /**
       * @description Unique ID generated by Heron 
       * @default null 
       * @example eus_JB3Tdhk9tCRTiApwJDd8qV
       */
      heron_id?: string | null;
      /**
       * @description Whether the end user is part of a lending portfolio 
       * @default null 
       * @example true
       */
      is_portfolio?: boolean | null;
      /**
       * @description Pagination limit per page 
       * @default 1000
       */
      limit?: number;
      /**
       * @description Filter by name associated with end user 
       * @default null 
       * @example your_end_user_name
       */
      name?: string | null;
      /**
       * @description Order to return end users by 
       * @default last_updated_desc 
       * @enum {string}
       */
      order_by?: "last_updated_desc" | "last_updated_asc";
      /**
       * @description Pagination page number 
       * @default 1
       */
      page?: number;
      /**
       * @description Filter by status of end user 
       * @default null 
       * @example reviewed 
       * @enum {string|null}
       */
      status?: "new" | "ready" | "processed" | "reviewed" | "review_requested" | "failed" | null;
    };
    EndUserStatsInputParams: {
      /**
       * @description Filter by specific categories 
       * @default [] 
       * @example [
       *   "ctg_Hh4gBAQr79pk5nPNfsMUpF",
       *   "ctg_ec2BHup5EyfgAD9hddqyyS"
       * ]
       */
      category_heron_ids?: (string)[];
      /**
       * @description Aggregate results over time, e.g., by week or by quarter 
       * @default month 
       * @example month 
       * @enum {string}
       */
      date_granularity?: "day" | "week" | "month" | "quarter" | "year";
      /**
       * @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required 
       * @default null 
       * @example eus_BjUZZWELKnKyW6ZGfNfXZT
       */
      end_user_heron_id?: string | null;
      /**
       * @description end_user_id for statistics; either end_user_id or end_user_heron_id is required 
       * @default null 
       * @example your_end_user_id
       */
      end_user_id?: string | null;
      /**
       * Format: date 
       * @description Filter for transactions with timestamp after the input value (as date) 
       * @default null 
       * @example 2023-04-11
       */
      from_date?: string | null;
      /**
       * @description Pivot results by merchant or by category 
       * @default category 
       * @example category 
       * @enum {string}
       */
      group_by?: "category" | "merchant";
      /**
       * @description Filter by specific merchants 
       * @default [] 
       * @example [
       *   "mrc_jjJMfwJ4k8WSHLz56Vjq9a",
       *   "mrc_F5khAiAB38imuNZJvDDfb7"
       * ]
       */
      merchant_heron_ids?: (string)[];
      /**
       * @description ISO 4217 currency code to convert to 
       * @example USD 
       * @enum {string|null}
       */
      to_currency?: "USD" | "EUR" | "GBP" | null;
      /**
       * Format: date 
       * @description Filter for transactions with timestamp before the input value (as date) 
       * @default null 
       * @example 2023-04-10
       */
      to_date?: string | null;
    };
    EndUserStatsOutputMetrics: {
      /** @description Metrics only counting inflows */
      inflow?: components["schemas"]["EndUserStatsOutputMetricsInstance"];
      /** @description Net metrics */
      net?: components["schemas"]["EndUserStatsOutputMetricsInstance"];
      /** @description Metrics only counting outflows */
      outflow?: components["schemas"]["EndUserStatsOutputMetricsInstance"];
    };
    EndUserStatsOutputMetricsInstance: {
      /**
       * @description Aggregate amount of transactions 
       * @example 42.42
       */
      amount?: number;
      /**
       * @description Average value of transactions 
       * @example 1.01
       */
      avg_amount?: number;
      /**
       * @description Number of transactions 
       * @example 42
       */
      n?: number;
    };
    EndUserStatsOutputSchema: {
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * @description Date, impacted by input date granularity 
       * @example 2023-04-11
       */
      dt?: string;
      /**
       * @description Heron ID of either merchant or category, depending on what was specified in group_by 
       * @example mrc_T8SJxmVAVGPCfTwdzuApad
       */
      heron_id?: string;
      /**
       * @description Label of either merchant or category, depending on what was specified in group_by 
       * @example Revenue
       */
      label?: string;
      metrics?: components["schemas"]["EndUserStatsOutputMetrics"];
    };
    GetTransactionParams: {
      /**
       * @description Filter by the heron_id of the category that the transaction is annotated with 
       * @default [] 
       * @example ctg_AMztyUhCs4Wjj4z3bRfzmQ
       */
      category_heron_id?: (string)[] | null;
      /** @description Filter by maximum confidence of annotation associated with transaction */
      confidence_max?: number;
      /** @description Filter by minimum confidence of annotation associated with transaction */
      confidence_min?: number;
      /**
       * Format: date 
       * @description Filter by latest transaction upload date - when Heron received the transaction 
       * @example 2020-04-27
       */
      created_date_max?: string;
      /**
       * Format: date 
       * @description Filter by earliest transaction upload date - when Heron received the transaction 
       * @example 2020-04-27
       */
      created_date_min?: string;
      /** @description Filter by keyword match on transaction description; case insensitive */
      description_keyword?: string;
      /** @description Filter by regex matching transaction description */
      description_regex?: string;
      /** @description End user id of transaction */
      end_user_id?: string;
      /**
       * Format: date 
       * @description Deprecated; see created_date_ or timestamp_date_
       */
      from_date?: string;
      /** @description Filter by whether the transaction has a matching transaction */
      has_matching_transaction?: boolean;
      /**
       * @description Heron generated Id of transaction 
       * @example txn_HGY23EkwJZ2gmgv48CPZUp
       */
      heron_id?: string;
      /** @description Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true. */
      include_duplicates?: boolean;
      /** @description Filter by whether the transaction is recurring */
      is_recurring?: boolean;
      /**
       * Format: date-time 
       * @description Filter for transactions whose values were last updated in Heron systems before the specified input value 
       * @example 2023-04-11T16:56:19.603757
       */
      last_updated_max?: string;
      /**
       * Format: date-time 
       * @description Filter for transactions whose values were last updated in Heron systems after the specified input value 
       * @example 2023-04-11T16:56:19.603733
       */
      last_updated_min?: string;
      /**
       * @description Number of transactions to return per page 
       * @default 1000
       */
      limit?: number;
      /** @description Filter by maximum amount of transaction */
      max_amount?: number;
      /** @description Filter by merchant group id */
      merchant_group_id?: string;
      /** @description Filter by minimum amount of transaction */
      min_amount?: number;
      /**
       * @description What to order transactions by 
       * @default id_asc 
       * @enum {string}
       */
      order_by?: "amount_asc" | "amount_desc" | "abs_amount_asc" | "abs_amount_desc" | "description_asc" | "description_desc" | "timestamp_asc" | "timestamp_desc" | "id_asc" | "id_desc";
      /**
       * @description Page of transaction to return 
       * @default 1
       */
      page?: number;
      /** @description Reference Id of transaction */
      reference_id?: string;
      /** @description Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates. */
      request_id?: string;
      /**
       * Format: date 
       * @description Filter by latest transaction timestamp 
       * @example 2020-04-27
       */
      timestamp_date_max?: string;
      /**
       * Format: date 
       * @description Filter by earliest transaction timestamp 
       * @example 2020-04-27
       */
      timestamp_date_min?: string;
      /**
       * Format: date 
       * @description Deprecated; see created_date_ or timestamp_date_
       */
      to_date?: string;
      /** @description Filter by transaction code */
      transaction_code?: string;
    };
    InscribeAccount: {
      beginning_balance?: components["schemas"]["InscribeNumberPrediction"] | null;
      ending_balance?: components["schemas"]["InscribeNumberPrediction"] | null;
      number?: components["schemas"]["InscribeStringPrediction"];
      transactions?: (components["schemas"]["InscribeTransaction"])[];
      transactions_match_balances?: boolean | null;
    };
    InscribeNumberPrediction: {
      confidence?: number;
      normalized?: number;
      raw?: string;
    };
    InscribeParsedDetails: {
      bank_accounts?: (components["schemas"]["InscribeAccount"])[];
      name?: components["schemas"]["InscribeParsedDetailsName"];
    };
    InscribeParsedDetailsName: {
      raw?: string;
    };
    InscribeSchema: {
      /** @default null */
      customer_name?: string | null;
      parsed_details?: components["schemas"]["InscribeParsedDetails"];
    };
    InscribeStringPrediction: {
      confidence?: number;
      normalized?: string;
      raw?: string;
    };
    InscribeTransaction: {
      amount?: number;
      /** Format: date */
      date?: string;
      description?: string;
      id?: string;
    };
    IntegrationLinkSchema: {
      /**
       * @description The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key) 
       * @example access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
       */
      access_token: string;
      /**
       * @description A unique identifier for your end user (customer) generated by you 
       * @example b25a941f-2028-4665-a242-19c27c4ff19d
       */
      end_user_id: string;
      /**
       * @description An human readable name for this end user, like the company legal name 
       * @example Acme Corp
       */
      end_user_name?: string;
      /**
       * @description Unique identifier for each bank connection made by your end users. In Plaid this is the 'item_id'. 
       * @example M5eVJqLnv3tbzdngLDp9FL5OlDNxlNhlE55op
       */
      item_id: string;
    };
    IntegrationSchema: {
      /**
       * Format: url 
       * @description Base URL of the API integration 
       * @example https://sandbox.plaid.com
       */
      base_url: string;
      /** @description Client ID for API access (this is encrypted in transit and at-rest with a custom key) */
      client_id: string;
      /** @description Client Secret for API access (this is encrypted in transit and at-rest with a custom key) */
      client_secret: string;
      heron_id?: string;
      /**
       * @description A name for your integration 
       * @example Plaid Prod
       */
      name: string;
      /**
       * @description For integrations with multiple available reousrces, the specific resource 
       * @default transaction 
       * @enum {string}
       */
      resource?: "transaction" | "assets_report";
      /**
       * @description The integration type, a specific provider 
       * @enum {string}
       */
      type: "plaid" | "ocrolus" | "truelayer";
      /**
       * Format: url 
       * @description URL provided by you to which we'll forward all webhooks (optional) 
       * @example https://your-server.yourdomain.com/hooks
       */
      webhook_url?: string | null;
    };
    Merchant: {
      categories?: readonly (components["schemas"]["MerchantCategory"])[];
      group_id?: string;
      /** @example mrc_jisxTVDJcLxNUfh5uGFHSo */
      heron_id?: string;
      /** Format: url */
      icon_url?: string | null;
      is_priority?: boolean;
      /** Format: url */
      logo_url?: string | null;
      name: string;
      /** Format: url */
      url: string;
    };
    MerchantCategory: {
      /** @example 7311 */
      code: string;
      /**
       * @default null 
       * @example Advertising services
       */
      description?: string | null;
      /**
       * @default null 
       * @example advertising_services
       */
      slug?: string | null;
    };
    MerchantExtract: {
      categories?: readonly (components["schemas"]["MerchantCategory"])[];
      /** @default null */
      confidence?: number | null;
      group_id?: string;
      /** @example mrc_jisxTVDJcLxNUfh5uGFHSo */
      heron_id?: string;
      /** Format: url */
      icon_url?: string;
      /** Format: url */
      logo_url?: string;
      /**
       * @default null 
       * @example Amazon
       */
      name?: string | null;
      /**
       * Format: url 
       * @default null 
       * @example https://www.amazon.com/
       */
      url?: string | null;
    };
    MerchantFeedback: {
      /**
       * @description heron_id of the correct merchant 
       * @example mrc_GUtqYSHyXBazhPnmkNRvzo
       */
      heron_id?: string;
      /**
       * @default false 
       * @example false
       */
      is_correct?: boolean;
      /**
       * @description name of the correct merchant 
       * @example Spotify
       */
      name?: string;
    };
    Metric: {
      /**
       * @description Context for how to interpret the metric, e.g., whether a higher value is 'better' than a lower value 
       * @example higher_is_better 
       * @enum {string}
       */
      context?: "higher_is_better" | "lower_is_better";
      /** @description The ISO currency code for metric, where applicable */
      currency?: string;
      /**
       * @description Metric date range 
       * @example last_180_days 
       * @enum {string}
       */
      date_range?: "latest" | "last_30_days" | "last_90_days" | "last_120_days" | "last_180_days" | "last_365_days" | "next_30_days" | "next_60_days" | "next_90_days" | "next_180_days" | "last_1_calendar_months" | "last_3_calendar_months" | "last_6_calendar_months" | "last_12_calendar_months";
      /**
       * @description Description of metric 
       * @example The number of unique transactions with a timestamp
       */
      description?: string;
      /**
       * @description The type of metric 
       * @example data_quality 
       * @enum {string}
       */
      group?: "data_quality" | "processing_quality" | "balance" | "profit_and_loss" | "debt" | "risk_flag" | "forecast" | "heron";
      /**
       * @description Metric label, slugified 
       * @example unique_transactions
       */
      label?: string;
      /**
       * @description either 'calculated' or 'not_available' depending on the requested date range vs. date range of the data 
       * @example not_available
       */
      status?: string;
      /**
       * @description The unit of measurement for metric 
       * @example n 
       * @enum {string}
       */
      unit?: "n" | "day" | "ratio" | "amount" | "weekday" | "array" | "probability";
      /**
       * @description The metric value 
       * @example 42.42
       */
      value?: Record<string, never>;
    };
    MoneyThumbStatementSummary: {
      account_number?: string;
      account_title?: string;
      bank_name?: string;
      company?: string;
      end_balance: number;
      fraud_reasons?: (string)[];
      fraud_score?: number;
      is_business_account?: boolean;
      num_credits: number;
      num_debits: number;
      num_transactions: number;
      reconciled: boolean;
      start_balance: number;
      /** Format: date-time */
      statement_end_date?: string;
      /** Format: date-time */
      statement_start_date?: string;
      total_credits: number;
      total_debits: number;
      unreconciled_end_balance?: number;
      web_report?: boolean;
    };
    OcrolusBankAccount: {
      account_number?: string;
      alternative_lender_transactions?: (components["schemas"]["OcrolusTransaction"])[];
      debt_consolidator_txns?: (components["schemas"]["OcrolusTransaction"])[];
      estimated_expense_txns_list?: (components["schemas"]["OcrolusTransaction"])[];
      estimated_revenue_txns_list?: (components["schemas"]["OcrolusTransaction"])[];
      factor_txns?: (components["schemas"]["OcrolusTransaction"])[];
      holder_country?: string;
      insurance_credits?: (components["schemas"]["OcrolusTransaction"])[];
      insurance_debits?: (components["schemas"]["OcrolusTransaction"])[];
      interbank_transactions?: (components["schemas"]["OcrolusTransaction"])[];
      merchant_cash_advance_lender_txns?: (components["schemas"]["OcrolusTransaction"])[];
      non_estimated_revenue_txns_list?: (components["schemas"]["OcrolusTransaction"])[];
      nsf_transactions?: (components["schemas"]["OcrolusTransaction"])[];
      nsf_transactions_paid_or_negative_balance?: (components["schemas"]["OcrolusTransaction"])[];
      nsf_transactions_returned_or_not_paid?: (components["schemas"]["OcrolusTransaction"])[];
      outside_source_deposits?: (components["schemas"]["OcrolusTransaction"])[];
      payroll?: (components["schemas"]["OcrolusTransaction"])[];
      period_balance_mismatches?: (components["schemas"]["OcrolusTransaction"])[];
      ppp_loan_txns?: (components["schemas"]["OcrolusTransaction"])[];
      probable_recurring_txns?: ((components["schemas"]["OcrolusTransaction"])[])[];
      returned_items?: (components["schemas"]["OcrolusTransaction"])[];
      round_number_txns?: (components["schemas"]["OcrolusTransaction"])[];
      withdrawals?: (components["schemas"]["OcrolusTransaction"])[];
    };
    OcrolusResponse: {
      bank_accounts: (components["schemas"]["OcrolusBankAccount"])[];
      name: string;
    };
    OcrolusSchema: {
      response: components["schemas"]["OcrolusResponse"];
    };
    OcrolusTransaction: {
      amount?: string;
      description?: string;
      pk?: number;
      /** Format: date-time */
      timestamp?: string;
      /** Format: date */
      txn_date?: string;
    };
    Pagination: {
      /**
       * Format: url 
       * @description the URL of the next page
       */
      next_url?: string | null;
      /** @description the number of results returned */
      num_results?: number;
      /** @description current page */
      page?: number;
      /** @description the max number of results per page */
      per_page?: number;
      /**
       * Format: url 
       * @description the URL of the last page
       */
      prev_url?: string | null;
    };
    PaymentProcessor: {
      /** @example mrc_nRYdGU7nYuevb7qem65cEb */
      heron_id?: string;
      /**
       * Format: url 
       * @default null 
       * @example https://storage.googleapis.com/heron-merchant-assets/icons/mrc_nRYdGU7nYuevb7qem65cEb.svg
       */
      icon_url?: string | null;
      /**
       * Format: url 
       * @default null 
       * @example https://storage.googleapis.com/heron-merchant-assets/logos/mrc_nRYdGU7nYuevb7qem65cEb.svg
       */
      logo_url?: string | null;
      /**
       * @default null 
       * @example Paypal
       */
      name?: string | null;
      /**
       * Format: url 
       * @default null 
       * @example https://www.paypal.com
       */
      url?: string | null;
    };
    PdfCorrection: {
      amount: number;
      /** @default null */
      balance?: number | null;
      /** Format: date */
      date: string;
      description: string;
      page?: number;
      /** @default null */
      reference_id?: string | null;
      row?: number;
      /** @default null */
      transaction_code?: string | null;
    };
    PdfGetSchema: {
      /**
       * @description Unique ID for account associated with PDF 
       * @example checking_account_202348
       */
      account_id?: string;
      /**
       * Format: date-time 
       * @description Timestamp when PDF was created in Heron system 
       * @example 2023-04-11T16:56:18.046971
       */
      created?: string;
      /**
       * @description ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs 
       * @example USD 
       * @enum {string}
       */
      currency?: "USD" | "GBP";
      end_user?: components["schemas"]["EndUser1"];
      /**
       * @description ID generated by Heron Data 
       * @example pdf_8Nfwnkc6QosiyfhqfDgGEh
       */
      heron_id?: string;
      /**
       * Format: date-time 
       * @description Timestamp when PDF was last updated in Heron system 
       * @example 2023-04-11T16:56:18.047017
       */
      last_updated?: string;
      /**
       * @description Notes for the PDF, e.g., failed reason 
       * @example failed to send to external OCR provider
       */
      notes?: string;
      /** @description Indicates which provider was used to parse this pdf */
      parsing_version?: string;
      /**
       * @description An optional field for your unique identifier for the PDF 
       * @example my-favourite-pdf
       */
      reference_id?: string;
      statements?: (components["schemas"]["PdfStatement"])[];
      /**
       * @description Status of PDF 
       * @example processed 
       * @enum {string}
       */
      status?: "new" | "submitted" | "parsing" | "parsed" | "processed" | "approved" | "rejected" | "failed" | "transactions_loaded";
    };
    PdfPostSchema: {
      /**
       * @description Unique ID for account associated with PDF 
       * @default null 
       * @example checking_account_202348
       */
      account_id?: string | null;
      /**
       * @description ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs 
       * @default null 
       * @example USD 
       * @enum {string|null}
       */
      currency?: "USD" | "GBP" | null;
      /** @description The base64 encoded string of the PDF file. If using Javascript, this is directly the output of the FileReader.readAsDataURL() output. See https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL for more info */
      pdf_base64: string;
      /**
       * @description True if date formats in the statement are US: month/date/year 
       * @default null
       */
      read_us_dates?: boolean | null;
      /**
       * @description An optional field for your unique identifier for the PDF 
       * @default null 
       * @example my-favourite-pdf
       */
      reference_id?: string | null;
    };
    PdfPutSchema: {
      corrections?: (components["schemas"]["PdfCorrection"])[];
      /** @description Notes associated with PDF, e.g., rejected reason, failed reason */
      notes?: string;
      /**
       * @description An optional field for your unique identifier for the PDF 
       * @default null 
       * @example my-favourite-pdf
       */
      reference_id?: string | null;
      /**
       * @description Status of PDF 
       * @example processed 
       * @enum {string}
       */
      status?: "new" | "submitted" | "parsing" | "parsed" | "processed" | "approved" | "rejected" | "failed" | "transactions_loaded";
    };
    PdfStatement: {
      summary?: components["schemas"]["MoneyThumbStatementSummary"];
      transactions?: (components["schemas"]["PdfTransaction"])[];
    };
    PdfTransaction: {
      amount: number;
      balance?: number;
      description: string;
      ocr_suspect?: boolean;
      reference_id?: string;
      /** Format: date-time */
      timestamp: string;
      transaction_code?: string;
    };
    PlaidAccount: {
      balances: components["schemas"]["PlaidAccountBalance"];
      historical_balances: (components["schemas"]["PlaidAccountBalance"])[];
      transactions: (components["schemas"]["PlaidTransaction"])[];
    };
    PlaidAccountBalance: {
      current?: number;
      /** Format: date */
      date?: string;
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      iso_currency_code?: string | null;
    };
    PlaidAccountSnapshot: {
      account_id?: string;
      /** @description Balance information for the account as an object. This is optional, but if not provided, balance calculations will not be performed for individual transactions. */
      balances?: components["schemas"]["PlaidAccountSnapshotBalance"] | null;
    };
    PlaidAccountSnapshotBalance: {
      available?: number | null;
      current?: number;
      iso_currency_code?: string;
    };
    PlaidAssetReport: {
      items: (components["schemas"]["PlaidAssetReportItem"])[];
    };
    PlaidAssetReportItem: {
      accounts: (components["schemas"]["PlaidAccount"])[];
    };
    PlaidAssetsSchema: {
      report: components["schemas"]["PlaidAssetReport"];
    };
    PlaidTransaction: {
      account_id?: string;
      amount?: number;
      balance?: number;
      category?: (string)[] | null;
      /** Format: date */
      date?: string;
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      iso_currency_code?: string | null;
      merchant_name?: string | null;
      name?: string;
      /** @default null */
      pending_transaction_id?: string | null;
      /** Format: date-time */
      timestamp?: string;
      transaction_code?: string | null;
      transaction_id?: string;
    };
    PlaidTransactionsSchema: {
      accounts?: (components["schemas"]["PlaidAccountSnapshot"])[];
      transactions: (components["schemas"]["PlaidTransaction"])[];
    };
    PnlMetric: {
      /** @description Amount weighted confidence for the metric, based on the confidene associated with category labels of related transactions */
      confidence?: number | null;
      /** @description Indentation level for formatting purposes */
      indent?: number;
      /** @description Whether the metric is a ratio or not */
      is_ratio?: boolean;
      /** @description Name of metric */
      name?: string;
      /** @description The list of values ordered according to date */
      values?: (number | null)[];
    };
    PnlMetricFractionTerm: {
      /** @description List of category labels associated with the fraction term */
      labels?: (string)[];
      /** @description List of section slugs associated with the fraction term */
      sections?: (string)[];
    };
    PnlMetricLayout: {
      /** @description If the metric is a ratio, the denominator of the metric; otherwise this is just 1 */
      denominator?: components["schemas"]["PnlMetricFractionTerm"] | null;
      /** @description Indentation level for formatting purposes */
      indent?: number;
      /** @description If true, calculates the % growth in the metric over time */
      is_growth?: boolean;
      /** @description Name of metric */
      name?: string;
      /** @description The numerator of the metric */
      numerator?: components["schemas"]["PnlMetricFractionTerm"];
    };
    PnlSection: {
      /** @description Ordered list of P&L metrics */
      metrics?: (components["schemas"]["PnlMetric"])[];
      /** @description Name of P&L section, e.g,. Operating Expenses */
      name?: string;
      /** @description Slugified version of the name */
      slug?: string;
    };
    PnlSectionLayout: {
      /** @description The category labels associated with the section */
      labels?: (string)[];
      /** @description An ordered list of metric layouts */
      metrics?: (components["schemas"]["PnlMetricLayout"])[];
      /** @description Name of P&L section, e.g,. Operating Expenses */
      name?: string;
      /** @description Slugified version of the name */
      slug?: string;
    };
    ProfitAndLossLayoutSchema: {
      /** @description Ordered list of P&L sections */
      sections?: (components["schemas"]["PnlSectionLayout"])[];
    };
    ProfitAndLossLayoutUpdateSchema: {
      /**
       * @description List of category labels to assign to a different section 
       * @example [
       *   "Postage"
       * ]
       */
      category_labels: (string)[];
      /**
       * @description Slug of section to assign labels to 
       * @example operational_expenses
       */
      section_slug: string;
    };
    ProfitAndLossParams: {
      /**
       * @description ISO 4217 currency code for balance 
       * @example USD
       */
      currency?: string | null;
      /**
       * @description If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first 
       * @default false
       */
      dates_ascending?: boolean;
      /**
       * Format: date 
       * @description The earliest transaction timestamp date to use 
       * @default null 
       * @example 2022-01-01
       */
      from_date?: string | null;
      /**
       * Format: date 
       * @description The latest transaction timestamp date to use 
       * @default null 
       * @example 2022-01-31
       */
      to_date?: string | null;
    };
    ProfitAndLossSchema: {
      /** @description Ordered list of dates representing the columns of the P&L table */
      dates?: (string)[];
      /** @description Ordered list of P&L sections */
      sections?: (components["schemas"]["PnlSection"])[];
    };
    ProfitAndLossStatementPostSchema: {
      /**
       * @description P&L of an end user in CSV format. String must be encoded. 
       * @example date%2Crevenue%0D%0AOct%202021%2C23580.87%0D%0ASept%202021%2C13464.07
       */
      csv: string;
      /**
       * @description ISO 4217 currency code for transactions in account. We currently only support GBP and USD P&Ls 
       * @example USD 
       * @enum {string}
       */
      currency: "USD" | "GBP";
    };
    Rule: {
      /**
       * @description Key for how to compare metric value to rule value 
       * @example equal 
       * @enum {string}
       */
      condition?: "equal" | "not_equal" | "greater_than" | "greater_than_or_equal" | "less_than" | "less_than_or_equal" | "contains";
      /**
       * Format: date-time 
       * @description When the rule was created in Heron system 
       * @example 2023-02-28T16:56:19.585261
       */
      created?: string;
      /**
       * @description Date range corresponding to metric 
       * @example last_180_days 
       * @enum {string}
       */
      date_range?: "latest" | "last_30_days" | "last_90_days" | "last_120_days" | "last_180_days" | "last_365_days" | "next_30_days" | "next_60_days" | "next_90_days" | "next_180_days" | "last_1_calendar_months" | "last_3_calendar_months" | "last_6_calendar_months" | "last_12_calendar_months";
      /**
       * @description Unique id for rule generated by Heron 
       * @example rul_ghWjEW8hYSDbtqFMk9yBrr
       */
      heron_id?: string;
      /**
       * Format: date-time 
       * @description When the rule was last updated in Heron system 
       * @example 2023-04-11T16:56:19.585308
       */
      last_updated?: string;
      /**
       * @description Label corresponding to metric 
       * @example unique_transactions 
       * @enum {string}
       */
      metric_label?: "data_volume" | "date_range" | "data_freshness" | "has_balance_ratio" | "data_coverage" | "accounts" | "category_coverage" | "inflows" | "outflows" | "merchant_coverage" | "confidence" | "revenue_anomalies" | "last_debt_investment" | "last_debt_investment_days" | "merchant_heron_ids" | "revenue_daily_average" | "cogs_daily_average" | "opex_daily_average" | "debt_repayment_daily_average" | "nsf_fees" | "nsf_days" | "unconnected_account_ratio" | "inflow_daily_average" | "outflow_daily_average" | "revenue_sources" | "debt_investment" | "debt_investment_count" | "debt_investors" | "debt_collection" | "atm_withdrawals" | "tax_payments" | "tax_payment_amount" | "revenue" | "annualized_revenue" | "cogs" | "opex" | "debt_repayment" | "latest_balance" | "balance_minimum" | "balance_average" | "change_in_balance" | "weekday_balance_average" | "weekday_with_highest_avg" | "weekday_with_lowest_avg" | "negative_balance_days" | "gross_operating_cashflow_daily_average" | "net_operating_cashflow_daily_average" | "gross_operating_cashflow" | "net_operating_cashflow" | "debt_service_coverage_ratio" | "predicted_nsf_fees" | "predicted_balance_daily_average";
      /**
       * @description Description of rule. Sent with webhook response, so can be used as a reference to the rule 
       * @example notify_if_debt_investment_count_gt_0_last_180d
       */
      name?: string | null;
      /**
       * @description key-value pairs of the desired selector that should select whichend users to apply this rule. They are evaluated as an AND condition(all must be true to run this rule for an end user). Leave empty toapply to all end users. 
       * @example {
       *   "is_portfolio": true
       * }
       */
      selector?: Record<string, never>;
      /**
       * @description Numeric value to compare to a metric; use this when the threshold is numeric 
       * @example 42.42
       */
      value?: number | null;
      /**
       * @description String value to compare to a metric; use this when the threshold is a string 
       * @example mrc_12345678ijwdd321d921
       */
      value_str?: string | null;
    };
    RuleViolation: {
      metric?: components["schemas"]["Metric"];
      rule?: components["schemas"]["Rule"];
    };
    SaltEdgeCsvSchema: {
      account_id?: number;
      amount?: number;
      category?: string;
      closing_balance?: number | null;
      currency_code?: string;
      description?: string;
      /** Format: date */
      made_on?: string;
      payee?: string | null;
      payer?: string | null;
      transaction_id?: number;
    };
    ScorecardQueryParams: {
      /**
       * Format: date 
       * @description Cut-off date to consider transactions to for calculating scorecard (inclusive) 
       * @default null 
       * @example 2023-01-19
       */
      date?: string | null;
    };
    Transaction: {
      /**
       * @description Your unique ID for account associated with transaction 
       * @example checking_account_202348
       */
      account_id?: string | null;
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions. 
       * @example -42.42
       */
      amount: number;
      /**
       * @description The running balance of the account after transaction ocurred 
       * @example 423
       */
      balance?: number | null;
      /**
       * @description Category of transaction that you may have received from other sources 
       * @example shopping
       */
      categories_default?: string | null;
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * Format: date 
       * @description The date of the transaction; 'timestamp' field takes priority over 'date' 
       * @example 2020-04-27
       */
      date?: string | null;
      /**
       * @description The text description for the transaction 
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string;
      /**
       * @description Your unique ID for end user associated with transaction 
       * @example my_best_customer_203948
       */
      end_user_id?: string | null;
      /**
       * @description Unique ID of transaction; generated by Heron Data 
       * @example txn_CMzoNieBBtHo8fJT2krgGM
       */
      heron_id?: string;
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null;
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number;
      /**
       * @description Your unique ID for transaction 
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null;
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id 
       * @example req_MjvyPfZdt9Yexf8egFmYe2
       */
      request_id?: string | null;
      /**
       * Format: date-time 
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date' 
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null;
      /**
       * @description Code associated with transaction to indicate the type of transaction 
       * @example card
       */
      transaction_code?: string | null;
    };
    Transaction1: {
      /**
       * @description Your unique ID for account associated with transaction 
       * @example checking_account_202348
       */
      account_id?: string | null;
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions. 
       * @example -42.42
       */
      amount: number;
      /**
       * @description The running balance of the account after transaction ocurred 
       * @example 423
       */
      balance?: number | null;
      /**
       * @description Category of transaction that you may have received from other sources 
       * @example shopping
       */
      categories_default?: string | null;
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * Format: date 
       * @description The date of the transaction; 'timestamp' field takes priority over 'date' 
       * @example 2020-04-27
       */
      date?: string | null;
      /**
       * @description The text description for the transaction 
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string;
      /**
       * @description Your unique ID for end user associated with transaction 
       * @example my_best_customer_203948
       */
      end_user_id?: string | null;
      /**
       * @description Unique ID of transaction; generated by Heron Data 
       * @example txn_CMzoNieBBtHo8fJT2krgGM
       */
      heron_id?: string;
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null;
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number;
      /**
       * @description Your unique ID for transaction 
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null;
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id 
       * @example req_MjvyPfZdt9Yexf8egFmYe2
       */
      request_id?: string | null;
      /**
       * Format: date-time 
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date' 
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null;
      /**
       * @description Code associated with transaction to indicate the type of transaction 
       * @example card
       */
      transaction_code?: string | null;
    };
    Transaction2: {
      /**
       * @description Unique ID of transaction; generated by Heron Data 
       * @example txn_CMzoNieBBtHo8fJT2krgGM
       */
      heron_id?: string;
      /**
       * @description Your unique ID for transaction 
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null;
    };
    TransactionAnnotation: {
      /**
       * @description Annotator type 
       * @example predicted
       */
      annotator?: string;
      /**
       * @description The confidence associated with the category annotation 
       * @example 0.5
       */
      confidence?: number;
      /**
       * @description Unique ID of category; generated by Heron Data 
       * @example ctg_2Lkm53oXxrbuYTfJz9TGjH
       */
      heron_id?: string;
      /**
       * @description Label of category 
       * @example Rent
       */
      label?: string;
      /**
       * @description The model version that produced the categorisation 
       * @example be85be25-e411-4cc3-86c6-ff490d1b1105
       */
      model_version?: string;
    };
    TransactionDeleteReference: {
      /** @description list of transactions (only ids) that have been deleted */
      transactions?: (components["schemas"]["Transaction2"])[];
    };
    TransactionDeleteWebhook: {
      /**
       * Format: date-time 
       * @description time webhook was sent 
       * @example 2023-04-11T16:56:19.609306
       */
      created?: string;
      /** @description payload of the webhook */
      data?: components["schemas"]["TransactionDeleteReference"];
      /** @description meta information about the webhook */
      meta?: Record<string, never>;
      /**
       * @description topic of webhook 
       * @example end_user.processed
       */
      topic?: string;
    };
    TransactionEnriched: {
      /**
       * @description Your unique ID for account associated with transaction 
       * @example checking_account_202348
       */
      account_id?: string | null;
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions. 
       * @example -42.42
       */
      amount: number;
      /** @description The category annotation associated with the transaction */
      annotation?: components["schemas"]["Annotation"];
      /**
       * @description The running balance of the account after transaction ocurred 
       * @example 423
       */
      balance?: number | null;
      /**
       * @description Category of transaction that you may have received from other sources 
       * @example shopping
       */
      categories_default?: string | null;
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * Format: date 
       * @description The date of the transaction; 'timestamp' field takes priority over 'date' 
       * @example 2020-04-27
       */
      date?: string | null;
      /**
       * @description The text description for the transaction 
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string;
      /**
       * @description Your unique ID for end user associated with transaction 
       * @example my_best_customer_203948
       */
      end_user_id?: string | null;
      /** @description Features calculated from transaction */
      features?: components["schemas"]["TransactionFeatures"];
      /**
       * @description Unique ID of transaction; generated by Heron Data 
       * @example txn_CMzoNieBBtHo8fJT2krgGM
       */
      heron_id?: string;
      /**
       * Format: date-time 
       * @description When the transaction was last updated, either by updating its enrichments or the values of the transaction itself 
       * @example 2023-04-11T16:56:19.600982
       */
      last_updated?: string;
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null;
      /** @description The merchant associated with the transaction */
      merchant?: components["schemas"]["Merchant"];
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number;
      /**
       * @description Your unique ID for transaction 
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null;
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id 
       * @example req_MjvyPfZdt9Yexf8egFmYe2
       */
      request_id?: string | null;
      /**
       * Format: date-time 
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date' 
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null;
      /**
       * @description Code associated with transaction to indicate the type of transaction 
       * @example card
       */
      transaction_code?: string | null;
    };
    TransactionFeatures: {
      /**
       * @description The cleaned description of the transaction 
       * @example GOOGLE ADS
       */
      description_clean?: string;
      /**
       * @description Indicates that the transaction is a duplicate and gives the heron_id of the original 
       * @example txn_MPpYCKwWqvCju2v4ucKLU6
       */
      duplicate_of_id?: Record<string, never>;
      /** @description Whether the transaction is a transfer; requires end_user_id and timestamp to be present */
      has_matching_transaction?: boolean;
      /** @description Indicates whether the transaction has another transaction similar to it */
      is_potential_duplicate?: boolean;
      /** @description Whether the transaction is recurring or not; requires end_user_id and timestamp to be present */
      is_recurring?: boolean;
    };
    TransactionFeedbackParams: {
      /**
       * @description If true, enables the triggering of transaction_updated webhook. Set to false to suppress trigger. Default true 
       * @default true
       */
      trigger_webhook?: boolean;
    };
    TransactionFeedbackSchema: {
      /**
       * @default {} 
       * @example {
       *   "heron_id": "ctg_AzpmV8aG6o7MKE8yLAF5LW",
       *   "label": "Insurance"
       * }
       */
      category?: components["schemas"]["CategoryFeedback"];
      /**
       * @default {} 
       * @example {
       *   "heron_id": "mrc_kMGpAtMmWA8LH4yUYHDeJL",
       *   "is_correct": false,
       *   "name": "Spotify"
       * }
       */
      merchant?: components["schemas"]["MerchantFeedback"];
      /**
       * @description your identifier for where the feedback comes from e.g. bob_the_underwriter 
       * @default null
       */
      source?: string | null;
    };
    TransactionGetOutput: {
      /**
       * @description Your unique ID for account associated with transaction 
       * @example checking_account_202348
       */
      account_id?: string | null;
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions. 
       * @example -42.42
       */
      amount: number;
      /**
       * @description The running balance of the account after transaction ocurred 
       * @example 423
       */
      balance?: number | null;
      /** @description The category associated with the transaction */
      categories?: (components["schemas"]["TransactionAnnotation"])[];
      /**
       * Format: date-time 
       * @description When transaction was created in Heron system 
       * @example 2023-04-11T16:56:19.602899
       */
      created?: string;
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * @description The text description for the transaction 
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string;
      /**
       * @description The cleaned description of the transaction 
       * @example GOOGLE ADS
       */
      description_clean?: string;
      /**
       * @description Indicates that the transaction is a duplicate and gives the heron_id of the original 
       * @example txn_MPpYCKwWqvCju2v4ucKLU6
       */
      duplicate_of_id?: Record<string, never>;
      /**
       * @description Your unique ID for end user associated with transaction 
       * @example my_best_customer_203948
       */
      end_user_id?: string | null;
      /** @description Whether the transaction is a transfer; requires end_user_id and timestamp to be present */
      has_matching_transaction?: boolean;
      /**
       * @description Unique ID of transaction; generated by Heron Data 
       * @example txn_CMzoNieBBtHo8fJT2krgGM
       */
      heron_id?: string;
      /** @description Indicates whether the transaction has another transaction similar to it */
      is_potential_duplicate?: boolean;
      /** @description Whether the transaction is recurring or not; requires end_user_id and timestamp to be present */
      is_recurring?: boolean;
      /**
       * Format: date-time 
       * @description When transaction was last updated in Heron system; could be from recategorisation or attribute updates 
       * @example 2023-04-11T16:56:19.602938
       */
      last_updated?: string;
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null;
      /** @description The merchant associated with the transaction */
      merchant?: components["schemas"]["Merchant"];
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number;
      /** @description The payment processor associated with the transaction */
      payment_processor?: components["schemas"]["PaymentProcessor"];
      /**
       * @description Your unique ID for transaction 
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null;
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id 
       * @example req_MjvyPfZdt9Yexf8egFmYe2
       */
      request_id?: string | null;
      /**
       * Format: date-time 
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date' 
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null;
      /**
       * @description Code associated with transaction to indicate the type of transaction 
       * @example card
       */
      transaction_code?: string | null;
    };
    TransactionPostOutput: {
      /**
       * @description Your unique ID for account associated with transaction 
       * @example checking_account_202348
       */
      account_id?: string | null;
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions. 
       * @example -42.42
       */
      amount: number;
      /**
       * @description The running balance of the account after transaction ocurred 
       * @example 423
       */
      balance?: number | null;
      /** @description The category associated with the transaction */
      categories?: (components["schemas"]["TransactionAnnotation"])[];
      /**
       * @description ISO 4217 currency code 
       * @example USD
       */
      currency?: string | null;
      /**
       * @description The text description for the transaction 
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string;
      /**
       * @description The cleaned description of the transaction 
       * @example GOOGLE ADS
       */
      description_clean?: string;
      /**
       * @description Indicates that the transaction is a duplicate and gives the heron_id of the original 
       * @example txn_MPpYCKwWqvCju2v4ucKLU6
       */
      duplicate_of_id?: Record<string, never>;
      /**
       * @description Your unique ID for end user associated with transaction 
       * @example my_best_customer_203948
       */
      end_user_id?: string | null;
      /** @description Whether the transaction is a transfer; requires end_user_id and timestamp to be present */
      has_matching_transaction?: boolean;
      /**
       * @description Unique ID of transaction; generated by Heron Data 
       * @example txn_CMzoNieBBtHo8fJT2krgGM
       */
      heron_id?: string;
      /** @description Indicates whether the transaction has another transaction similar to it */
      is_potential_duplicate?: boolean;
      /** @description Whether the transaction is recurring or not; requires end_user_id and timestamp to be present */
      is_recurring?: boolean;
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null;
      /** @description The merchant associated with the transaction */
      merchant?: components["schemas"]["Merchant"];
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number;
      /** @description The payment processor associated with the transaction */
      payment_processor?: components["schemas"]["PaymentProcessor"];
      /**
       * @description Your unique ID for transaction 
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null;
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id 
       * @example req_MjvyPfZdt9Yexf8egFmYe2
       */
      request_id?: string | null;
      /**
       * Format: date-time 
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date' 
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null;
      /**
       * @description Code associated with transaction to indicate the type of transaction 
       * @example card
       */
      transaction_code?: string | null;
    };
    TransactionsPostSchema: {
      /** @description Bank account balance information for a particular account_id. The balance here must be the *latest balance* after all the transactions in this batch have been applied. */
      balances?: (components["schemas"]["AccountBalance"])[];
      transactions: (components["schemas"]["Transaction1"])[];
    };
    YodleeAccount: {
      balance?: components["schemas"]["YodleeAmount"];
      id?: number;
    };
    YodleeAmount: {
      amount?: number;
      currency?: string;
    };
    YodleeSchema: {
      accounts?: (components["schemas"]["YodleeAccount"])[];
      transactions?: (components["schemas"]["YodleeTransaction"])[];
    };
    YodleeTransaction: {
      accountId?: number;
      amount?: components["schemas"]["YodleeAmount"];
      /** @enum {string} */
      baseType?: "CREDIT" | "DEBIT";
      category?: string;
      /** Format: date-time */
      createdDate?: string;
      description?: components["schemas"]["YodleeTransactionDescription"];
      id?: number;
    };
    YodleeTransactionDescription: {
      original?: string;
      simple?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
