/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/account-details": {
    /** @description Get details for a linked account. */
    get: operations["account_details_retrieve"];
  };
  "/account-token/{public_token}": {
    /** @description Returns the account token for the end user with the provided public token. */
    get: operations["account_token_retrieve"];
  };
  "/accounts": {
    /** @description Returns a list of `Account` objects. */
    get: operations["accounts_list"];
    /** @description Creates an `Account` object with the given values. */
    post: operations["accounts_create"];
  };
  "/accounts/{id}": {
    /** @description Returns an `Account` object with the given `id`. */
    get: operations["accounts_retrieve"];
  };
  "/accounts/meta/post": {
    /** @description Returns metadata for `Account` POSTs. */
    get: operations["accounts_meta_post_retrieve"];
  };
  "/addresses/{id}": {
    /** @description Returns an `Address` object with the given `id`. */
    get: operations["addresses_retrieve"];
  };
  "/attachments": {
    /** @description Returns a list of `AccountingAttachment` objects. */
    get: operations["attachments_list"];
    /** @description Creates an `AccountingAttachment` object with the given values. */
    post: operations["attachments_create"];
  };
  "/attachments/{id}": {
    /** @description Returns an `AccountingAttachment` object with the given `id`. */
    get: operations["attachments_retrieve"];
  };
  "/attachments/meta/post": {
    /** @description Returns metadata for `AccountingAttachment` POSTs. */
    get: operations["attachments_meta_post_retrieve"];
  };
  "/available-actions": {
    /** @description Returns a list of models and actions available for an account. */
    get: operations["available_actions_retrieve"];
  };
  "/balance-sheets": {
    /** @description Returns a list of `BalanceSheet` objects. */
    get: operations["balance_sheets_list"];
  };
  "/balance-sheets/{id}": {
    /** @description Returns a `BalanceSheet` object with the given `id`. */
    get: operations["balance_sheets_retrieve"];
  };
  "/cash-flow-statements": {
    /** @description Returns a list of `CashFlowStatement` objects. */
    get: operations["cash_flow_statements_list"];
  };
  "/cash-flow-statements/{id}": {
    /** @description Returns a `CashFlowStatement` object with the given `id`. */
    get: operations["cash_flow_statements_retrieve"];
  };
  "/common-model-scopes": {
    /** @description Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account. */
    get: operations["common_model_scopes_retrieve"];
    /** @description Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account. */
    post: operations["common_model_scopes_create"];
  };
  "/company-info": {
    /** @description Returns a list of `CompanyInfo` objects. */
    get: operations["company_info_list"];
  };
  "/company-info/{id}": {
    /** @description Returns a `CompanyInfo` object with the given `id`. */
    get: operations["company_info_retrieve"];
  };
  "/contacts": {
    /** @description Returns a list of `Contact` objects. */
    get: operations["contacts_list"];
    /** @description Creates a `Contact` object with the given values. */
    post: operations["contacts_create"];
  };
  "/contacts/{id}": {
    /** @description Returns a `Contact` object with the given `id`. */
    get: operations["contacts_retrieve"];
  };
  "/contacts/meta/post": {
    /** @description Returns metadata for `Contact` POSTs. */
    get: operations["contacts_meta_post_retrieve"];
  };
  "/credit-notes": {
    /** @description Returns a list of `CreditNote` objects. */
    get: operations["credit_notes_list"];
  };
  "/credit-notes/{id}": {
    /** @description Returns a `CreditNote` object with the given `id`. */
    get: operations["credit_notes_retrieve"];
  };
  "/delete-account": {
    /** @description Delete a linked account. */
    post: operations["delete_account_create"];
  };
  "/expenses": {
    /** @description Returns a list of `Expense` objects. */
    get: operations["expenses_list"];
    /** @description Creates an `Expense` object with the given values. */
    post: operations["expenses_create"];
  };
  "/expenses/{id}": {
    /** @description Returns an `Expense` object with the given `id`. */
    get: operations["expenses_retrieve"];
  };
  "/expenses/meta/post": {
    /** @description Returns metadata for `Expense` POSTs. */
    get: operations["expenses_meta_post_retrieve"];
  };
  "/generate-key": {
    /** @description Create a remote key. */
    post: operations["generate_key_create"];
  };
  "/income-statements": {
    /** @description Returns a list of `IncomeStatement` objects. */
    get: operations["income_statements_list"];
  };
  "/income-statements/{id}": {
    /** @description Returns an `IncomeStatement` object with the given `id`. */
    get: operations["income_statements_retrieve"];
  };
  "/invoices": {
    /** @description Returns a list of `Invoice` objects. */
    get: operations["invoices_list"];
    /** @description Creates an `Invoice` object with the given values. */
    post: operations["invoices_create"];
  };
  "/invoices/{id}": {
    /** @description Returns an `Invoice` object with the given `id`. */
    get: operations["invoices_retrieve"];
  };
  "/invoices/meta/post": {
    /** @description Returns metadata for `Invoice` POSTs. */
    get: operations["invoices_meta_post_retrieve"];
  };
  "/issues": {
    /** @description Gets issues. */
    get: operations["issues_list"];
  };
  "/issues/{id}": {
    /** @description Get a specific issue. */
    get: operations["issues_retrieve"];
  };
  "/items": {
    /** @description Returns a list of `Item` objects. */
    get: operations["items_list"];
  };
  "/items/{id}": {
    /** @description Returns an `Item` object with the given `id`. */
    get: operations["items_retrieve"];
  };
  "/journal-entries": {
    /** @description Returns a list of `JournalEntry` objects. */
    get: operations["journal_entries_list"];
    /** @description Creates a `JournalEntry` object with the given values. */
    post: operations["journal_entries_create"];
  };
  "/journal-entries/{id}": {
    /** @description Returns a `JournalEntry` object with the given `id`. */
    get: operations["journal_entries_retrieve"];
  };
  "/journal-entries/meta/post": {
    /** @description Returns metadata for `JournalEntry` POSTs. */
    get: operations["journal_entries_meta_post_retrieve"];
  };
  "/link-token": {
    /** @description Creates a link token to be used when linking a new end user. */
    post: operations["link_token_create"];
  };
  "/linked-accounts": {
    /** @description List linked accounts for your organization. */
    get: operations["linked_accounts_list"];
  };
  "/passthrough": {
    /** @description Pull data from an endpoint not currently supported by Merge. */
    post: operations["passthrough_create"];
  };
  "/payments": {
    /** @description Returns a list of `Payment` objects. */
    get: operations["payments_list"];
    /** @description Creates a `Payment` object with the given values. */
    post: operations["payments_create"];
  };
  "/payments/{id}": {
    /** @description Returns a `Payment` object with the given `id`. */
    get: operations["payments_retrieve"];
  };
  "/payments/meta/post": {
    /** @description Returns metadata for `Payment` POSTs. */
    get: operations["payments_meta_post_retrieve"];
  };
  "/phone-numbers/{id}": {
    /** @description Returns an `AccountingPhoneNumber` object with the given `id`. */
    get: operations["phone_numbers_retrieve"];
  };
  "/purchase-orders": {
    /** @description Returns a list of `PurchaseOrder` objects. */
    get: operations["purchase_orders_list"];
    /** @description Creates a `PurchaseOrder` object with the given values. */
    post: operations["purchase_orders_create"];
  };
  "/purchase-orders/{id}": {
    /** @description Returns a `PurchaseOrder` object with the given `id`. */
    get: operations["purchase_orders_retrieve"];
  };
  "/purchase-orders/meta/post": {
    /** @description Returns metadata for `PurchaseOrder` POSTs. */
    get: operations["purchase_orders_meta_post_retrieve"];
  };
  "/regenerate-key": {
    /** @description Exchange remote keys. */
    post: operations["regenerate_key_create"];
  };
  "/selective-sync/configurations": {
    /** @description Get a linked account's selective syncs. */
    get: operations["selective_sync_configurations_list"];
    /** @description Replace a linked account's selective syncs. */
    put: operations["selective_sync_configurations_update"];
  };
  "/selective-sync/meta": {
    /** @description Get metadata for the conditions available to a linked account. */
    get: operations["selective_sync_meta_list"];
  };
  "/sync-status": {
    /** @description Get syncing status. Possible values: `DISABLED`, `DONE`, `FAILED`, `PAUSED`, `SYNCING` */
    get: operations["sync_status_list"];
  };
  "/sync-status/resync": {
    /** @description Force re-sync of all models. This is available for all organizations via the dashboard. Force re-sync is also available for monthly and quarterly sync frequency customers on the Core, Professional, or Enterprise plans. */
    post: operations["sync_status_resync_create"];
  };
  "/tax-rates": {
    /** @description Returns a list of `TaxRate` objects. */
    get: operations["tax_rates_list"];
  };
  "/tax-rates/{id}": {
    /** @description Returns a `TaxRate` object with the given `id`. */
    get: operations["tax_rates_retrieve"];
  };
  "/tracking-categories": {
    /** @description Returns a list of `TrackingCategory` objects. */
    get: operations["tracking_categories_list"];
  };
  "/tracking-categories/{id}": {
    /** @description Returns a `TrackingCategory` object with the given `id`. */
    get: operations["tracking_categories_retrieve"];
  };
  "/transactions": {
    /** @description Returns a list of `Transaction` objects. */
    get: operations["transactions_list"];
  };
  "/transactions/{id}": {
    /** @description Returns a `Transaction` object with the given `id`. */
    get: operations["transactions_retrieve"];
  };
  "/vendor-credits": {
    /** @description Returns a list of `VendorCredit` objects. */
    get: operations["vendor_credits_list"];
  };
  "/vendor-credits/{id}": {
    /** @description Returns a `VendorCredit` object with the given `id`. */
    get: operations["vendor_credits_retrieve"];
  };
  "/webhook-receivers": {
    /** @description Returns a list of `WebhookReceiver` objects. */
    get: operations["webhook_receivers_list"];
    /** @description Creates a `WebhookReceiver` object with the given values. */
    post: operations["webhook_receivers_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description # The Account Object
     * ### Description
     * The `Account` object is what companies use to track transactions. They can be both bank accounts or a general ledger account (also called a chart of accounts).
     * 
     * ### Usage Example
     * Fetch from the `LIST Accounts` endpoint and view a company's accounts.
     */
    Account: {
      /**
       * Format: uuid 
       * @example ecbe05ac-62a3-46c5-ab31-4b478b37d1b4
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 21
       */
      remote_id?: string | null;
      /**
       * @description The account's name. 
       * @example Cash
       */
      name?: string | null;
      /**
       * @description The account's description. 
       * @example Cash
       */
      description?: string | null;
      /**
       * @description The account's broadest grouping.
       * 
       * * `ASSET` - ASSET
       * * `EQUITY` - EQUITY
       * * `EXPENSE` - EXPENSE
       * * `LIABILITY` - LIABILITY
       * * `REVENUE` - REVENUE 
       * @example ASSET
       */
      classification?: components["schemas"]["ClassificationEnum"] | null;
      /**
       * @description The account's type is a narrower and more specific grouping within the account's classification. 
       * @example Asset
       */
      type?: string | null;
      /**
       * @description The account's status.
       * 
       * * `ACTIVE` - ACTIVE
       * * `PENDING` - PENDING
       * * `INACTIVE` - INACTIVE 
       * @example ACTIVE
       */
      status?: components["schemas"]["AccountStatusEnum"] | null;
      /**
       * Format: double 
       * @description The account's current balance.
       */
      current_balance?: number | null;
      /**
       * @description The account's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * @description The account's number. 
       * @example X12Y9AB
       */
      account_number?: string | null;
      /**
       * Format: uuid 
       * @description ID of the parent account. 
       * @example 22d92d6c-22f9-11ed-861d-0242ac120002
       */
      parent_account?: string | null;
      /**
       * Format: uuid 
       * @description The company the account belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    AccountDetails: {
      /**
       * Format: uuid 
       * @example 0496d4c2-42e6-4072-80b3-7b69bfdc76fd
       */
      id?: string;
      /** @example BambooHR */
      integration?: string;
      /** @example bamboohr */
      integration_slug?: string;
      /** @example hris */
      category?: components["schemas"]["CategoryEnum"] | null;
      /** @example 3fa85f64-5717-4562-b3fc-2c963f66afa6 */
      end_user_origin_id?: string;
      /** @example Waystar Royco */
      end_user_organization_name?: string;
      /**
       * Format: email 
       * @example kendall.roy@waystar-royco.com
       */
      end_user_email_address?: string;
      /** @example COMPLETE */
      status?: string;
      /**
       * Format: uri 
       * @example https://api.merge.dev/api/integrations/webhook-listener/7fc3mee0UW8ecV4
       */
      webhook_listener_url?: string;
      /**
       * @description Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets. 
       * @example true
       */
      is_duplicate?: boolean | null;
    };
    /**
     * @description # The LinkedAccount Object
     * ### Description
     * The `LinkedAccount` object is used to represent an end user's link with a specific integration.
     * 
     * ### Usage Example
     * View a list of your organization's `LinkedAccount` objects.
     */
    AccountDetailsAndActions: {
      /** @example e59b1821-f85c-4e28-a6b3-1804156f3563 */
      id: string;
      /** @example hris */
      category?: components["schemas"]["CategoryEnum"];
      /** @example COMPLETE */
      status: components["schemas"]["AccountDetailsAndActionsStatusEnum"];
      status_detail?: string;
      /** @example 3ac95cde-6c7f-4eef-afec-be710b42308d */
      end_user_origin_id?: string;
      /** @example Foo Bar, LLC */
      end_user_organization_name: string;
      /** @example hradmin@foobar.dev */
      end_user_email_address: string;
      /** @example https://api.merge.dev/api/integrations/webhook-listener/7fc3mee0UW8ecV4 */
      webhook_listener_url: string;
      /**
       * @description Whether a Production Linked Account's credentials match another existing Production Linked Account. This field is `null` for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets. 
       * @example true
       */
      is_duplicate?: boolean | null;
      /**
       * @example {
       *   "name": "SAP SuccessFactors",
       *   "categories": [
       *     "hris",
       *     "ats"
       *   ],
       *   "image": "https://cdn.merge.dev/SuccessFactors_Logo.png",
       *   "square_image": "https://cdn.merge.dev/SuccessFactors_Square_Logo.jpg",
       *   "color": "#F6A704",
       *   "slug": "sap-successfactors",
       *   "passthrough_available": true,
       *   "available_model_operations": [
       *     {
       *       "model_name": "Candidate",
       *       "available_operations": [
       *         "FETCH",
       *         "CREATE"
       *       ],
       *       "required_post_parameters": [
       *         "remote_user_id"
       *       ],
       *       "supported_fields": [
       *         "first_name",
       *         "last_name",
       *         "company",
       *         "title"
       *       ]
       *     }
       *   ]
       * }
       */
      integration?: components["schemas"]["AccountDetailsAndActionsIntegration"];
    };
    AccountDetailsAndActionsIntegration: {
      name: string;
      categories: (components["schemas"]["CategoriesEnum"])[];
      image?: string;
      square_image?: string;
      color: string;
      slug: string;
      passthrough_available: boolean;
      available_model_operations?: (components["schemas"]["ModelOperation"])[];
    };
    /**
     * @description * `COMPLETE` - COMPLETE
     * * `INCOMPLETE` - INCOMPLETE
     * * `RELINK_NEEDED` - RELINK_NEEDED 
     * @enum {string}
     */
    AccountDetailsAndActionsStatusEnum: "COMPLETE" | "INCOMPLETE" | "RELINK_NEEDED";
    AccountEndpointRequest: {
      model: components["schemas"]["AccountRequest"];
    };
    AccountIntegration: {
      /** @description Company name. */
      name: string;
      /** @description Category or categories this integration belongs to. Multiple categories should be comma separated, i.e. [ats, hris]. */
      categories?: (components["schemas"]["CategoriesEnum"])[];
      /**
       * Format: uri 
       * @description Company logo in rectangular shape. <b>Upload an image with a clear background.</b>
       */
      image?: string | null;
      /**
       * Format: uri 
       * @description Company logo in square shape. <b>Upload an image with a white background.</b>
       */
      square_image?: string | null;
      /** @description The color of this integration used for buttons and text throughout the app and landing pages. <b>Choose a darker, saturated color.</b> */
      color?: string;
      slug?: string;
    };
    /**
     * @description # The Account Object
     * ### Description
     * The `Account` object is what companies use to track transactions. They can be both bank accounts or a general ledger account (also called a chart of accounts).
     * 
     * ### Usage Example
     * Fetch from the `LIST Accounts` endpoint and view a company's accounts.
     */
    AccountRequest: {
      /**
       * @description The account's name. 
       * @example Cash
       */
      name?: string | null;
      /**
       * @description The account's description. 
       * @example Cash
       */
      description?: string | null;
      /**
       * @description The account's broadest grouping.
       * 
       * * `ASSET` - ASSET
       * * `EQUITY` - EQUITY
       * * `EXPENSE` - EXPENSE
       * * `LIABILITY` - LIABILITY
       * * `REVENUE` - REVENUE 
       * @example ASSET
       */
      classification?: components["schemas"]["ClassificationEnum"] | null;
      /**
       * @description The account's type is a narrower and more specific grouping within the account's classification. 
       * @example Asset
       */
      type?: string | null;
      /**
       * @description The account's status.
       * 
       * * `ACTIVE` - ACTIVE
       * * `PENDING` - PENDING
       * * `INACTIVE` - INACTIVE 
       * @example ACTIVE
       */
      status?: components["schemas"]["AccountStatusEnum"] | null;
      /**
       * Format: double 
       * @description The account's current balance.
       */
      current_balance?: number | null;
      /**
       * @description The account's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * @description The account's number. 
       * @example X12Y9AB
       */
      account_number?: string | null;
      /**
       * Format: uuid 
       * @description ID of the parent account. 
       * @example 22d92d6c-22f9-11ed-861d-0242ac120002
       */
      parent_account?: string | null;
      /**
       * Format: uuid 
       * @description The company the account belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    AccountResponse: {
      model: components["schemas"]["Account"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description * `ACTIVE` - ACTIVE
     * * `PENDING` - PENDING
     * * `INACTIVE` - INACTIVE 
     * @enum {string}
     */
    AccountStatusEnum: "ACTIVE" | "PENDING" | "INACTIVE";
    AccountToken: {
      /** @example T9klMDQrcHdm9jrtHuOS2Nf06BIHwMNjpPXPMB */
      account_token: string;
      /**
       * @example {
       *   "name": "SAP SuccessFactors",
       *   "categories": [
       *     "hris",
       *     "ats"
       *   ],
       *   "image": "https://cdn.merge.dev/SuccessFactors_Logo.png",
       *   "square_image": "https://cdn.merge.dev/SuccessFactors_Square_Logo.jpg",
       *   "color": "#F6A704",
       *   "slug": "sap-successfactors"
       * }
       */
      integration: components["schemas"]["AccountIntegration"];
    };
    /**
     * @description # The Accounting Attachment Object
     * ### Description
     * The `AccountingAttachment` object is used to represent a company's attachments.
     * 
     * ### Usage Example
     * Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
     */
    AccountingAttachment: {
      /**
       * Format: uuid 
       * @example ecbe05ac-62a3-46c5-ab31-4b478b37d1b4
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 1018270
       */
      remote_id?: string | null;
      /**
       * @description The attachment's name. 
       * @example invoice.png
       */
      file_name?: string | null;
      /**
       * Format: uri 
       * @description The attachment's url. 
       * @example https://merge-brand.s3.amazonaws.com/20210315/rect-logo-270x80%402x.png
       */
      file_url?: string | null;
      /**
       * Format: uuid 
       * @description The company the accounting attachment belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    AccountingAttachmentEndpointRequest: {
      model: components["schemas"]["AccountingAttachmentRequest"];
    };
    /**
     * @description # The Accounting Attachment Object
     * ### Description
     * The `AccountingAttachment` object is used to represent a company's attachments.
     * 
     * ### Usage Example
     * Fetch from the `LIST AccountingAttachments` endpoint and view a company's attachments.
     */
    AccountingAttachmentRequest: {
      /**
       * @description The attachment's name. 
       * @example invoice.png
       */
      file_name?: string | null;
      /**
       * Format: uri 
       * @description The attachment's url. 
       * @example https://merge-brand.s3.amazonaws.com/20210315/rect-logo-270x80%402x.png
       */
      file_url?: string | null;
      /**
       * Format: uuid 
       * @description The company the accounting attachment belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    AccountingAttachmentResponse: {
      model: components["schemas"]["AccountingAttachment"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description # The AccountingPhoneNumber Object
     * ### Description
     * The `AccountingPhoneNumber` object is used to represent a contact's or company's phone number.
     * 
     * ### Usage Example
     * Fetch from the `GET CompanyInfo` endpoint and view the company's phone numbers.
     */
    AccountingPhoneNumber: {
      /**
       * @description The phone number. 
       * @example +3198675309
       */
      number?: string | null;
      /**
       * @description The phone number's type. 
       * @example Mobile
       */
      type?: string | null;
    };
    /**
     * @description # The AccountingPhoneNumber Object
     * ### Description
     * The `AccountingPhoneNumber` object is used to represent a contact's or company's phone number.
     * 
     * ### Usage Example
     * Fetch from the `GET CompanyInfo` endpoint and view the company's phone numbers.
     */
    AccountingPhoneNumberRequest: {
      /**
       * @description The phone number. 
       * @example +3198675309
       */
      number?: string | null;
      /**
       * @description The phone number's type. 
       * @example Mobile
       */
      type?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    /**
     * @description # The Address Object
     * ### Description
     * The `Address` object is used to represent a contact's or company's address.
     * 
     * ### Usage Example
     * Fetch from the `GET CompanyInfo` endpoint and view the company's addresses.
     */
    Address: {
      /**
       * @description The address type.
       * 
       * * `BILLING` - BILLING
       * * `SHIPPING` - SHIPPING 
       * @example SHIPPING
       */
      type?: components["schemas"]["AddressTypeEnum"] | null;
      /**
       * @description Line 1 of the address's street. 
       * @example 2920 Broadway
       */
      street_1?: string | null;
      /**
       * @description Line 2 of the address's street. 
       * @example 2nd Floor
       */
      street_2?: string | null;
      /**
       * @description The address's city. 
       * @example New York
       */
      city?: string | null;
      /**
       * @description The address's state or region. 
       * @example NY
       */
      state?: Record<string, unknown> | null;
      /**
       * @description The address's state or region. 
       * @example NY
       */
      country_subdivision?: string | null;
      /**
       * @description The address's country.
       * 
       * * `AF` - Afghanistan
       * * `AX` - Åland Islands
       * * `AL` - Albania
       * * `DZ` - Algeria
       * * `AS` - American Samoa
       * * `AD` - Andorra
       * * `AO` - Angola
       * * `AI` - Anguilla
       * * `AQ` - Antarctica
       * * `AG` - Antigua and Barbuda
       * * `AR` - Argentina
       * * `AM` - Armenia
       * * `AW` - Aruba
       * * `AU` - Australia
       * * `AT` - Austria
       * * `AZ` - Azerbaijan
       * * `BS` - Bahamas
       * * `BH` - Bahrain
       * * `BD` - Bangladesh
       * * `BB` - Barbados
       * * `BY` - Belarus
       * * `BE` - Belgium
       * * `BZ` - Belize
       * * `BJ` - Benin
       * * `BM` - Bermuda
       * * `BT` - Bhutan
       * * `BO` - Bolivia
       * * `BQ` - Bonaire, Sint Eustatius and Saba
       * * `BA` - Bosnia and Herzegovina
       * * `BW` - Botswana
       * * `BV` - Bouvet Island
       * * `BR` - Brazil
       * * `IO` - British Indian Ocean Territory
       * * `BN` - Brunei
       * * `BG` - Bulgaria
       * * `BF` - Burkina Faso
       * * `BI` - Burundi
       * * `CV` - Cabo Verde
       * * `KH` - Cambodia
       * * `CM` - Cameroon
       * * `CA` - Canada
       * * `KY` - Cayman Islands
       * * `CF` - Central African Republic
       * * `TD` - Chad
       * * `CL` - Chile
       * * `CN` - China
       * * `CX` - Christmas Island
       * * `CC` - Cocos (Keeling) Islands
       * * `CO` - Colombia
       * * `KM` - Comoros
       * * `CG` - Congo
       * * `CD` - Congo (the Democratic Republic of the)
       * * `CK` - Cook Islands
       * * `CR` - Costa Rica
       * * `CI` - Côte d'Ivoire
       * * `HR` - Croatia
       * * `CU` - Cuba
       * * `CW` - Curaçao
       * * `CY` - Cyprus
       * * `CZ` - Czechia
       * * `DK` - Denmark
       * * `DJ` - Djibouti
       * * `DM` - Dominica
       * * `DO` - Dominican Republic
       * * `EC` - Ecuador
       * * `EG` - Egypt
       * * `SV` - El Salvador
       * * `GQ` - Equatorial Guinea
       * * `ER` - Eritrea
       * * `EE` - Estonia
       * * `SZ` - Eswatini
       * * `ET` - Ethiopia
       * * `FK` - Falkland Islands (Malvinas)
       * * `FO` - Faroe Islands
       * * `FJ` - Fiji
       * * `FI` - Finland
       * * `FR` - France
       * * `GF` - French Guiana
       * * `PF` - French Polynesia
       * * `TF` - French Southern Territories
       * * `GA` - Gabon
       * * `GM` - Gambia
       * * `GE` - Georgia
       * * `DE` - Germany
       * * `GH` - Ghana
       * * `GI` - Gibraltar
       * * `GR` - Greece
       * * `GL` - Greenland
       * * `GD` - Grenada
       * * `GP` - Guadeloupe
       * * `GU` - Guam
       * * `GT` - Guatemala
       * * `GG` - Guernsey
       * * `GN` - Guinea
       * * `GW` - Guinea-Bissau
       * * `GY` - Guyana
       * * `HT` - Haiti
       * * `HM` - Heard Island and McDonald Islands
       * * `VA` - Holy See
       * * `HN` - Honduras
       * * `HK` - Hong Kong
       * * `HU` - Hungary
       * * `IS` - Iceland
       * * `IN` - India
       * * `ID` - Indonesia
       * * `IR` - Iran
       * * `IQ` - Iraq
       * * `IE` - Ireland
       * * `IM` - Isle of Man
       * * `IL` - Israel
       * * `IT` - Italy
       * * `JM` - Jamaica
       * * `JP` - Japan
       * * `JE` - Jersey
       * * `JO` - Jordan
       * * `KZ` - Kazakhstan
       * * `KE` - Kenya
       * * `KI` - Kiribati
       * * `KW` - Kuwait
       * * `KG` - Kyrgyzstan
       * * `LA` - Laos
       * * `LV` - Latvia
       * * `LB` - Lebanon
       * * `LS` - Lesotho
       * * `LR` - Liberia
       * * `LY` - Libya
       * * `LI` - Liechtenstein
       * * `LT` - Lithuania
       * * `LU` - Luxembourg
       * * `MO` - Macao
       * * `MG` - Madagascar
       * * `MW` - Malawi
       * * `MY` - Malaysia
       * * `MV` - Maldives
       * * `ML` - Mali
       * * `MT` - Malta
       * * `MH` - Marshall Islands
       * * `MQ` - Martinique
       * * `MR` - Mauritania
       * * `MU` - Mauritius
       * * `YT` - Mayotte
       * * `MX` - Mexico
       * * `FM` - Micronesia (Federated States of)
       * * `MD` - Moldova
       * * `MC` - Monaco
       * * `MN` - Mongolia
       * * `ME` - Montenegro
       * * `MS` - Montserrat
       * * `MA` - Morocco
       * * `MZ` - Mozambique
       * * `MM` - Myanmar
       * * `NA` - Namibia
       * * `NR` - Nauru
       * * `NP` - Nepal
       * * `NL` - Netherlands
       * * `NC` - New Caledonia
       * * `NZ` - New Zealand
       * * `NI` - Nicaragua
       * * `NE` - Niger
       * * `NG` - Nigeria
       * * `NU` - Niue
       * * `NF` - Norfolk Island
       * * `KP` - North Korea
       * * `MK` - North Macedonia
       * * `MP` - Northern Mariana Islands
       * * `NO` - Norway
       * * `OM` - Oman
       * * `PK` - Pakistan
       * * `PW` - Palau
       * * `PS` - Palestine, State of
       * * `PA` - Panama
       * * `PG` - Papua New Guinea
       * * `PY` - Paraguay
       * * `PE` - Peru
       * * `PH` - Philippines
       * * `PN` - Pitcairn
       * * `PL` - Poland
       * * `PT` - Portugal
       * * `PR` - Puerto Rico
       * * `QA` - Qatar
       * * `RE` - Réunion
       * * `RO` - Romania
       * * `RU` - Russia
       * * `RW` - Rwanda
       * * `BL` - Saint Barthélemy
       * * `SH` - Saint Helena, Ascension and Tristan da Cunha
       * * `KN` - Saint Kitts and Nevis
       * * `LC` - Saint Lucia
       * * `MF` - Saint Martin (French part)
       * * `PM` - Saint Pierre and Miquelon
       * * `VC` - Saint Vincent and the Grenadines
       * * `WS` - Samoa
       * * `SM` - San Marino
       * * `ST` - Sao Tome and Principe
       * * `SA` - Saudi Arabia
       * * `SN` - Senegal
       * * `RS` - Serbia
       * * `SC` - Seychelles
       * * `SL` - Sierra Leone
       * * `SG` - Singapore
       * * `SX` - Sint Maarten (Dutch part)
       * * `SK` - Slovakia
       * * `SI` - Slovenia
       * * `SB` - Solomon Islands
       * * `SO` - Somalia
       * * `ZA` - South Africa
       * * `GS` - South Georgia and the South Sandwich Islands
       * * `KR` - South Korea
       * * `SS` - South Sudan
       * * `ES` - Spain
       * * `LK` - Sri Lanka
       * * `SD` - Sudan
       * * `SR` - Suriname
       * * `SJ` - Svalbard and Jan Mayen
       * * `SE` - Sweden
       * * `CH` - Switzerland
       * * `SY` - Syria
       * * `TW` - Taiwan
       * * `TJ` - Tajikistan
       * * `TZ` - Tanzania
       * * `TH` - Thailand
       * * `TL` - Timor-Leste
       * * `TG` - Togo
       * * `TK` - Tokelau
       * * `TO` - Tonga
       * * `TT` - Trinidad and Tobago
       * * `TN` - Tunisia
       * * `TR` - Turkey
       * * `TM` - Turkmenistan
       * * `TC` - Turks and Caicos Islands
       * * `TV` - Tuvalu
       * * `UG` - Uganda
       * * `UA` - Ukraine
       * * `AE` - United Arab Emirates
       * * `GB` - United Kingdom
       * * `UM` - United States Minor Outlying Islands
       * * `US` - United States of America
       * * `UY` - Uruguay
       * * `UZ` - Uzbekistan
       * * `VU` - Vanuatu
       * * `VE` - Venezuela
       * * `VN` - Vietnam
       * * `VG` - Virgin Islands (British)
       * * `VI` - Virgin Islands (U.S.)
       * * `WF` - Wallis and Futuna
       * * `EH` - Western Sahara
       * * `YE` - Yemen
       * * `ZM` - Zambia
       * * `ZW` - Zimbabwe 
       * @example USA
       */
      country?: components["schemas"]["CountryEnum"] | null;
      /**
       * @description The address's zip code. 
       * @example 10027
       */
      zip_code?: string | null;
    };
    /**
     * @description * `BILLING` - BILLING
     * * `SHIPPING` - SHIPPING 
     * @enum {string}
     */
    AddressTypeEnum: "BILLING" | "SHIPPING";
    /**
     * @description # The AvailableActions Object
     * ### Description
     * The `Activity` object is used to see all available model/operation combinations for an integration.
     * 
     * ### Usage Example
     * Fetch all the actions available for the `Zenefits` integration.
     */
    AvailableActions: {
      /**
       * @example {
       *   "name": "Lever",
       *   "categories": [
       *     "ats"
       *   ],
       *   "image": "https://merge-api-production.s3.amazonaws.com/media/Lever_Logo.png",
       *   "square_image": "https://merge-api-production.s3.amazonaws.com/media/Lever_Square_Logo.png",
       *   "color": "#262A34"
       * }
       */
      integration: components["schemas"]["AccountIntegration"];
      /** @example true */
      passthrough_available: boolean;
      /**
       * @example [
       *   {
       *     "model_name": "Candidate",
       *     "available_operations": [
       *       "FETCH",
       *       "CREATE"
       *     ],
       *     "required_post_parameters": [
       *       "remote_user_id"
       *     ],
       *     "supported_fields": [
       *       "first_name",
       *       "last_name",
       *       "company",
       *       "title"
       *     ]
       *   }
       * ]
       */
      available_model_operations?: (components["schemas"]["ModelOperation"])[];
    };
    /**
     * @description # The BalanceSheet Object
     * ### Description
     * The `BalanceSheet` object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.
     * 
     * ### Usage Example
     * Fetch from the `LIST BalanceSheets` endpoint and view a company's balance sheets.
     */
    BalanceSheet: {
      /**
       * Format: uuid 
       * @example 9871b4a9-f5d2-4f3b-a66b-dfedbed42c46
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 8937018
       */
      remote_id?: string | null;
      /**
       * @description The balance sheet's name. 
       * @example BalanceSheet
       */
      name?: string | null;
      /**
       * @description The balance sheet's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: uuid 
       * @description `Company` object for the given `BalanceSheet` object. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: date-time 
       * @description The balance sheet's date. The balance sheet data will reflect the company's financial position this point in time. 
       * @example 2021-09-31T00:00:00Z
       */
      date?: string | null;
      /**
       * Format: double 
       * @description The balance sheet's net assets. 
       * @example 1000
       */
      net_assets?: number | null;
      /**
       * @example [
       *   {
       *     "remote_id": "10010",
       *     "name": "Assets",
       *     "value": 1000,
       *     "sub_items": []
       *   }
       * ]
       */
      assets?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * @example [
       *   {
       *     "remote_id": "10011",
       *     "name": "Liabilities",
       *     "value": 500,
       *     "sub_items": []
       *   }
       * ]
       */
      liabilities?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * @example [
       *   {
       *     "remote_id": "10012",
       *     "name": "Equity",
       *     "value": 500,
       *     "sub_items": []
       *   }
       * ]
       */
      equity?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * Format: date-time 
       * @description The time that balance sheet was generated by the accounting system. 
       * @example 2021-10-01T00:00:00Z
       */
      remote_generated_at?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The CashFlowStatement Object
     * ### Description
     * The `CashFlowStatement` object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).
     * 
     * ### Usage Example
     * Fetch from the `LIST CashFlowStatements` endpoint and view a company's cash flow statements.
     */
    CashFlowStatement: {
      /**
       * Format: uuid 
       * @example 5b3c1341-a20f-4e51-b72c-f3830a16c97b
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 8211088
       */
      remote_id?: string | null;
      /**
       * @description The cash flow statement's name. 
       * @example CashFlow
       */
      name?: string | null;
      /**
       * @description The cash flow statement's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: uuid 
       * @description The company the cash flow statement belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: date-time 
       * @description The cash flow statement's start period. 
       * @example 2020-01-01T00:00:00Z
       */
      start_period?: string | null;
      /**
       * Format: date-time 
       * @description The cash flow statement's end period. 
       * @example 2020-03-31T00:00:00Z
       */
      end_period?: string | null;
      /**
       * Format: double 
       * @description Cash and cash equivalents at the beginning of the cash flow statement's period. 
       * @example 5000
       */
      cash_at_beginning_of_period?: number | null;
      /**
       * Format: double 
       * @description Cash and cash equivalents at the beginning of the cash flow statement's period. 
       * @example 4063.52
       */
      cash_at_end_of_period?: number | null;
      /**
       * @example [
       *   {
       *     "remote_id": "10299",
       *     "name": "Operating Activities",
       *     "value": 1000,
       *     "sub_items": []
       *   }
       * ]
       */
      operating_activities?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * @example [
       *   {
       *     "remote_id": "10230",
       *     "name": "Investing Activities",
       *     "value": 1000,
       *     "sub_items": []
       *   }
       * ]
       */
      investing_activities?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * @example [
       *   {
       *     "remote_id": "10231",
       *     "name": "Financing Activities",
       *     "value": 1000,
       *     "sub_items": []
       *   }
       * ]
       */
      financing_activities?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * Format: date-time 
       * @description The time that cash flow statement was generated by the accounting system. 
       * @example 2020-04-01T00:00:00Z
       */
      remote_generated_at?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description * `hris` - hris
     * * `ats` - ats
     * * `accounting` - accounting
     * * `ticketing` - ticketing
     * * `crm` - crm
     * * `mktg` - mktg
     * * `filestorage` - filestorage 
     * @enum {string}
     */
    CategoriesEnum: "hris" | "ats" | "accounting" | "ticketing" | "crm" | "mktg" | "filestorage";
    /**
     * @description * `hris` - hris
     * * `ats` - ats
     * * `accounting` - accounting
     * * `ticketing` - ticketing
     * * `crm` - crm
     * * `mktg` - mktg
     * * `filestorage` - filestorage 
     * @enum {string}
     */
    CategoryEnum: "hris" | "ats" | "accounting" | "ticketing" | "crm" | "mktg" | "filestorage";
    /**
     * @description * `CLASS` - CLASS
     * * `DEPARTMENT` - DEPARTMENT 
     * @enum {string}
     */
    CategoryTypeEnum: "CLASS" | "DEPARTMENT";
    /**
     * @description * `ASSET` - ASSET
     * * `EQUITY` - EQUITY
     * * `EXPENSE` - EXPENSE
     * * `LIABILITY` - LIABILITY
     * * `REVENUE` - REVENUE 
     * @enum {string}
     */
    ClassificationEnum: "ASSET" | "EQUITY" | "EXPENSE" | "LIABILITY" | "REVENUE";
    CommonModelScopeData: {
      common_models: (components["schemas"]["CommonModelScopesDisabledModels"])[];
      /** Format: uuid */
      linked_account_id?: string;
    };
    CommonModelScopes: {
      /**
       * @example {
       *   "common_models": [
       *     {
       *       "model_name": "Employee",
       *       "model_id": "hris.Employee",
       *       "enabled_actions": [
       *         "READ",
       *         "WRITE"
       *       ],
       *       "is_disabled": false,
       *       "disabled_fields": [
       *         "employment"
       *       ]
       *     },
       *     {
       *       "model_name": "Employment",
       *       "model_id": "hris.Employment",
       *       "enabled_actions": [],
       *       "is_disabled": true,
       *       "disabled_fields": []
       *     }
       *   ]
       * }
       */
      organization_level_scopes?: components["schemas"]["CommonModelScopeData"];
      /**
       * @example [
       *   {
       *     "linked_account_id": "c640b80b-fac9-409f-aa19-1f9221aec445",
       *     "common_models": [
       *       {
       *         "model_name": "Employee",
       *         "model_id": "hris.Employee",
       *         "enabled_actions": [
       *           "READ",
       *           "WRITE"
       *         ],
       *         "is_disabled": false,
       *         "disabled_fields": [
       *           "employment"
       *         ]
       *       },
       *       {
       *         "model_name": "Employment",
       *         "model_id": "hris.Employment",
       *         "enabled_actions": [],
       *         "is_disabled": true,
       *         "disabled_fields": []
       *       }
       *     ]
       *   }
       * ]
       */
      scope_overrides: (components["schemas"]["CommonModelScopeData"])[];
    };
    CommonModelScopesBodyRequest: {
      /** @example hris.Employee */
      model_id: string;
      /**
       * @example [
       *   "READ",
       *   "WRITE"
       * ]
       */
      enabled_actions: (components["schemas"]["EnabledActionsEnum"])[];
      /**
       * @example [
       *   "first_name"
       * ]
       */
      disabled_fields: (string)[];
    };
    CommonModelScopesDisabledModels: {
      model_name: string;
      model_id: string;
      enabled_actions: (components["schemas"]["CommonModelScopesDisabledModelsEnabledActionsEnum"])[];
      is_disabled: boolean;
      disabled_fields: (string)[];
    };
    /**
     * @description * `ENABLED_ACTION_READ` - ENABLED_ACTION_READ
     * * `ENABLED_ACTION_WRITE` - ENABLED_ACTION_WRITE 
     * @enum {string}
     */
    CommonModelScopesDisabledModelsEnabledActionsEnum: "ENABLED_ACTION_READ" | "ENABLED_ACTION_WRITE";
    CommonModelScopesPostInnerDeserializerRequest: {
      /** @example hris.Employee */
      model_id: string;
      /**
       * @example [
       *   "READ",
       *   "WRITE"
       * ]
       */
      enabled_actions: (components["schemas"]["EnabledActionsEnum"])[];
      disabled_fields: (string)[];
    };
    CommonModelScopesUpdateSerializer: {
      /** @description The common model scopes to update. */
      common_models: (components["schemas"]["CommonModelScopesPostInnerDeserializerRequest"])[];
    };
    /**
     * @description # The CompanyInfo Object
     * ### Description
     * The `CompanyInfo` object is used to represent a company's information.
     * 
     * ### Usage Example
     * Fetch from the `GET CompanyInfo` endpoint and view a company's information.
     */
    CompanyInfo: {
      /**
       * Format: uuid 
       * @example 65d8ffd0-211b-4ba4-b85a-fbe2ce220982
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 19202938
       */
      remote_id?: string | null;
      /**
       * @description The company's name. 
       * @example Merge Pickleball Company
       */
      name?: string | null;
      /**
       * @description The company's legal name. 
       * @example Merge Pickleball Company Inc.
       */
      legal_name?: string | null;
      /**
       * @description The company's tax number. 
       * @example 11-0011000
       */
      tax_number?: string | null;
      /**
       * @description The company's fiscal year end month. 
       * @example 12
       */
      fiscal_year_end_month?: number | null;
      /**
       * @description The company's fiscal year end day. 
       * @example 31
       */
      fiscal_year_end_day?: number | null;
      /**
       * @description The currency set in the company's accounting platform.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: date-time 
       * @description When the third party's company was created. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_created_at?: string | null;
      /**
       * @description The company's urls. 
       * @example https://www.merge.dev
       */
      urls?: ((string | null)[]) | null;
      /**
       * @example [
       *   {
       *     "street_1": "2920 Broadway",
       *     "street_2": "2nd Floor",
       *     "city": "New York",
       *     "state": "NY",
       *     "country": "USA",
       *     "zip_code": "10027"
       *   }
       * ]
       */
      addresses?: (components["schemas"]["Address"])[];
      phone_numbers?: (components["schemas"]["AccountingPhoneNumber"])[];
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    ConditionSchema: {
      /**
       * Format: uuid 
       * @description The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
       */
      id: string;
      /** @description The common model for which a condition schema is defined. */
      common_model?: string;
      /** @description User-facing *native condition* name. e.g. "Skip Manager". */
      native_name: string | null;
      /** @description The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type". */
      field_name: string | null;
      /** @description Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times. */
      is_unique?: boolean;
      /**
       * @description The type of value(s) that can be set for this condition.
       * 
       * * `BOOLEAN` - BOOLEAN
       * * `DATE` - DATE
       * * `DATE_TIME` - DATE_TIME
       * * `INTEGER` - INTEGER
       * * `FLOAT` - FLOAT
       * * `STRING` - STRING
       * * `LIST_OF_STRINGS` - LIST_OF_STRINGS
       */
      condition_type: components["schemas"]["ConditionTypeEnum"];
      /** @description The schemas for the operators that can be used on a condition. */
      operators: (components["schemas"]["OperatorSchema"])[];
    };
    /**
     * @description * `BOOLEAN` - BOOLEAN
     * * `DATE` - DATE
     * * `DATE_TIME` - DATE_TIME
     * * `INTEGER` - INTEGER
     * * `FLOAT` - FLOAT
     * * `STRING` - STRING
     * * `LIST_OF_STRINGS` - LIST_OF_STRINGS 
     * @enum {string}
     */
    ConditionTypeEnum: "BOOLEAN" | "DATE" | "DATE_TIME" | "INTEGER" | "FLOAT" | "STRING" | "LIST_OF_STRINGS";
    /**
     * @description # The Contact Object
     * ### Description
     * The `Contact` object refers to either a supplier or a customer.
     * 
     * ### Usage Example
     * Fetch from the `LIST Contacts` endpoint and view a company's contacts.
     */
    Contact: {
      /**
       * Format: uuid 
       * @example c640b80b-fac9-409f-aa19-1f9221aec445
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 11167
       */
      remote_id?: string | null;
      /**
       * @description The contact's name. 
       * @example Gil Feig's Pickleball Team
       */
      name?: string | null;
      /** @description Whether the contact is a supplier. */
      is_supplier?: boolean | null;
      /**
       * @description Whether the contact is a customer. 
       * @example true
       */
      is_customer?: boolean | null;
      /**
       * @description The contact's email address. 
       * @example pickleball@merge.dev
       */
      email_address?: string | null;
      /**
       * @description The contact's tax number. 
       * @example 12-3456789
       */
      tax_number?: string | null;
      /**
       * @description The contact's status
       * 
       * * `ACTIVE` - ACTIVE
       * * `ARCHIVED` - ARCHIVED 
       * @example ACTIVE
       */
      status?: components["schemas"]["Status7d1Enum"] | null;
      /**
       * @description The currency the contact's transactions are in. 
       * @example USD
       */
      currency?: string | null;
      /**
       * Format: date-time 
       * @description When the third party's contact was updated. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_updated_at?: string | null;
      /**
       * Format: uuid 
       * @description The company the contact belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description `Address` object IDs for the given `Contacts` object. 
       * @example [
       *   "2f2702aa-8948-492b-a412-2acdf6d2c499",
       *   "d98c7428-8dda-48a8-a1da-c570f65e2375"
       * ]
       */
      addresses?: (string | null)[];
      /**
       * @description `AccountingPhoneNumber` object for the given `Contacts` object. 
       * @example [
       *   {
       *     "number": "+3198675309",
       *     "type": "Mobile"
       *   }
       * ]
       */
      phone_numbers?: (components["schemas"]["AccountingPhoneNumber"])[];
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    ContactEndpointRequest: {
      model: components["schemas"]["ContactRequest"];
    };
    /**
     * @description # The Contact Object
     * ### Description
     * The `Contact` object refers to either a supplier or a customer.
     * 
     * ### Usage Example
     * Fetch from the `LIST Contacts` endpoint and view a company's contacts.
     */
    ContactRequest: {
      /**
       * @description The contact's name. 
       * @example Gil Feig's Pickleball Team
       */
      name?: string | null;
      /** @description Whether the contact is a supplier. */
      is_supplier?: boolean | null;
      /**
       * @description Whether the contact is a customer. 
       * @example true
       */
      is_customer?: boolean | null;
      /**
       * @description The contact's email address. 
       * @example pickleball@merge.dev
       */
      email_address?: string | null;
      /**
       * @description The contact's tax number. 
       * @example 12-3456789
       */
      tax_number?: string | null;
      /**
       * @description The contact's status
       * 
       * * `ACTIVE` - ACTIVE
       * * `ARCHIVED` - ARCHIVED 
       * @example ACTIVE
       */
      status?: components["schemas"]["Status7d1Enum"] | null;
      /**
       * @description The currency the contact's transactions are in. 
       * @example USD
       */
      currency?: string | null;
      /**
       * Format: uuid 
       * @description The company the contact belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description `Address` object IDs for the given `Contacts` object. 
       * @example [
       *   "2f2702aa-8948-492b-a412-2acdf6d2c499",
       *   "d98c7428-8dda-48a8-a1da-c570f65e2375"
       * ]
       */
      addresses?: (string | null)[];
      /**
       * @description `AccountingPhoneNumber` object for the given `Contacts` object. 
       * @example [
       *   {
       *     "number": "+3198675309",
       *     "type": "Mobile"
       *   }
       * ]
       */
      phone_numbers?: (components["schemas"]["AccountingPhoneNumberRequest"])[];
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    ContactResponse: {
      model: components["schemas"]["Contact"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description * `AF` - Afghanistan
     * * `AX` - Åland Islands
     * * `AL` - Albania
     * * `DZ` - Algeria
     * * `AS` - American Samoa
     * * `AD` - Andorra
     * * `AO` - Angola
     * * `AI` - Anguilla
     * * `AQ` - Antarctica
     * * `AG` - Antigua and Barbuda
     * * `AR` - Argentina
     * * `AM` - Armenia
     * * `AW` - Aruba
     * * `AU` - Australia
     * * `AT` - Austria
     * * `AZ` - Azerbaijan
     * * `BS` - Bahamas
     * * `BH` - Bahrain
     * * `BD` - Bangladesh
     * * `BB` - Barbados
     * * `BY` - Belarus
     * * `BE` - Belgium
     * * `BZ` - Belize
     * * `BJ` - Benin
     * * `BM` - Bermuda
     * * `BT` - Bhutan
     * * `BO` - Bolivia
     * * `BQ` - Bonaire, Sint Eustatius and Saba
     * * `BA` - Bosnia and Herzegovina
     * * `BW` - Botswana
     * * `BV` - Bouvet Island
     * * `BR` - Brazil
     * * `IO` - British Indian Ocean Territory
     * * `BN` - Brunei
     * * `BG` - Bulgaria
     * * `BF` - Burkina Faso
     * * `BI` - Burundi
     * * `CV` - Cabo Verde
     * * `KH` - Cambodia
     * * `CM` - Cameroon
     * * `CA` - Canada
     * * `KY` - Cayman Islands
     * * `CF` - Central African Republic
     * * `TD` - Chad
     * * `CL` - Chile
     * * `CN` - China
     * * `CX` - Christmas Island
     * * `CC` - Cocos (Keeling) Islands
     * * `CO` - Colombia
     * * `KM` - Comoros
     * * `CG` - Congo
     * * `CD` - Congo (the Democratic Republic of the)
     * * `CK` - Cook Islands
     * * `CR` - Costa Rica
     * * `CI` - Côte d'Ivoire
     * * `HR` - Croatia
     * * `CU` - Cuba
     * * `CW` - Curaçao
     * * `CY` - Cyprus
     * * `CZ` - Czechia
     * * `DK` - Denmark
     * * `DJ` - Djibouti
     * * `DM` - Dominica
     * * `DO` - Dominican Republic
     * * `EC` - Ecuador
     * * `EG` - Egypt
     * * `SV` - El Salvador
     * * `GQ` - Equatorial Guinea
     * * `ER` - Eritrea
     * * `EE` - Estonia
     * * `SZ` - Eswatini
     * * `ET` - Ethiopia
     * * `FK` - Falkland Islands (Malvinas)
     * * `FO` - Faroe Islands
     * * `FJ` - Fiji
     * * `FI` - Finland
     * * `FR` - France
     * * `GF` - French Guiana
     * * `PF` - French Polynesia
     * * `TF` - French Southern Territories
     * * `GA` - Gabon
     * * `GM` - Gambia
     * * `GE` - Georgia
     * * `DE` - Germany
     * * `GH` - Ghana
     * * `GI` - Gibraltar
     * * `GR` - Greece
     * * `GL` - Greenland
     * * `GD` - Grenada
     * * `GP` - Guadeloupe
     * * `GU` - Guam
     * * `GT` - Guatemala
     * * `GG` - Guernsey
     * * `GN` - Guinea
     * * `GW` - Guinea-Bissau
     * * `GY` - Guyana
     * * `HT` - Haiti
     * * `HM` - Heard Island and McDonald Islands
     * * `VA` - Holy See
     * * `HN` - Honduras
     * * `HK` - Hong Kong
     * * `HU` - Hungary
     * * `IS` - Iceland
     * * `IN` - India
     * * `ID` - Indonesia
     * * `IR` - Iran
     * * `IQ` - Iraq
     * * `IE` - Ireland
     * * `IM` - Isle of Man
     * * `IL` - Israel
     * * `IT` - Italy
     * * `JM` - Jamaica
     * * `JP` - Japan
     * * `JE` - Jersey
     * * `JO` - Jordan
     * * `KZ` - Kazakhstan
     * * `KE` - Kenya
     * * `KI` - Kiribati
     * * `KW` - Kuwait
     * * `KG` - Kyrgyzstan
     * * `LA` - Laos
     * * `LV` - Latvia
     * * `LB` - Lebanon
     * * `LS` - Lesotho
     * * `LR` - Liberia
     * * `LY` - Libya
     * * `LI` - Liechtenstein
     * * `LT` - Lithuania
     * * `LU` - Luxembourg
     * * `MO` - Macao
     * * `MG` - Madagascar
     * * `MW` - Malawi
     * * `MY` - Malaysia
     * * `MV` - Maldives
     * * `ML` - Mali
     * * `MT` - Malta
     * * `MH` - Marshall Islands
     * * `MQ` - Martinique
     * * `MR` - Mauritania
     * * `MU` - Mauritius
     * * `YT` - Mayotte
     * * `MX` - Mexico
     * * `FM` - Micronesia (Federated States of)
     * * `MD` - Moldova
     * * `MC` - Monaco
     * * `MN` - Mongolia
     * * `ME` - Montenegro
     * * `MS` - Montserrat
     * * `MA` - Morocco
     * * `MZ` - Mozambique
     * * `MM` - Myanmar
     * * `NA` - Namibia
     * * `NR` - Nauru
     * * `NP` - Nepal
     * * `NL` - Netherlands
     * * `NC` - New Caledonia
     * * `NZ` - New Zealand
     * * `NI` - Nicaragua
     * * `NE` - Niger
     * * `NG` - Nigeria
     * * `NU` - Niue
     * * `NF` - Norfolk Island
     * * `KP` - North Korea
     * * `MK` - North Macedonia
     * * `MP` - Northern Mariana Islands
     * * `NO` - Norway
     * * `OM` - Oman
     * * `PK` - Pakistan
     * * `PW` - Palau
     * * `PS` - Palestine, State of
     * * `PA` - Panama
     * * `PG` - Papua New Guinea
     * * `PY` - Paraguay
     * * `PE` - Peru
     * * `PH` - Philippines
     * * `PN` - Pitcairn
     * * `PL` - Poland
     * * `PT` - Portugal
     * * `PR` - Puerto Rico
     * * `QA` - Qatar
     * * `RE` - Réunion
     * * `RO` - Romania
     * * `RU` - Russia
     * * `RW` - Rwanda
     * * `BL` - Saint Barthélemy
     * * `SH` - Saint Helena, Ascension and Tristan da Cunha
     * * `KN` - Saint Kitts and Nevis
     * * `LC` - Saint Lucia
     * * `MF` - Saint Martin (French part)
     * * `PM` - Saint Pierre and Miquelon
     * * `VC` - Saint Vincent and the Grenadines
     * * `WS` - Samoa
     * * `SM` - San Marino
     * * `ST` - Sao Tome and Principe
     * * `SA` - Saudi Arabia
     * * `SN` - Senegal
     * * `RS` - Serbia
     * * `SC` - Seychelles
     * * `SL` - Sierra Leone
     * * `SG` - Singapore
     * * `SX` - Sint Maarten (Dutch part)
     * * `SK` - Slovakia
     * * `SI` - Slovenia
     * * `SB` - Solomon Islands
     * * `SO` - Somalia
     * * `ZA` - South Africa
     * * `GS` - South Georgia and the South Sandwich Islands
     * * `KR` - South Korea
     * * `SS` - South Sudan
     * * `ES` - Spain
     * * `LK` - Sri Lanka
     * * `SD` - Sudan
     * * `SR` - Suriname
     * * `SJ` - Svalbard and Jan Mayen
     * * `SE` - Sweden
     * * `CH` - Switzerland
     * * `SY` - Syria
     * * `TW` - Taiwan
     * * `TJ` - Tajikistan
     * * `TZ` - Tanzania
     * * `TH` - Thailand
     * * `TL` - Timor-Leste
     * * `TG` - Togo
     * * `TK` - Tokelau
     * * `TO` - Tonga
     * * `TT` - Trinidad and Tobago
     * * `TN` - Tunisia
     * * `TR` - Turkey
     * * `TM` - Turkmenistan
     * * `TC` - Turks and Caicos Islands
     * * `TV` - Tuvalu
     * * `UG` - Uganda
     * * `UA` - Ukraine
     * * `AE` - United Arab Emirates
     * * `GB` - United Kingdom
     * * `UM` - United States Minor Outlying Islands
     * * `US` - United States of America
     * * `UY` - Uruguay
     * * `UZ` - Uzbekistan
     * * `VU` - Vanuatu
     * * `VE` - Venezuela
     * * `VN` - Vietnam
     * * `VG` - Virgin Islands (British)
     * * `VI` - Virgin Islands (U.S.)
     * * `WF` - Wallis and Futuna
     * * `EH` - Western Sahara
     * * `YE` - Yemen
     * * `ZM` - Zambia
     * * `ZW` - Zimbabwe 
     * @enum {string}
     */
    CountryEnum: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW";
    /**
     * @description # The CreditNote Object
     * ### Description
     * The `CreditNote` object are an accounts payable transaction used when to represent a gift or refund to a customer. A credit note will contain information on the amount of credit owed, the customer, and the account.
     * 
     * ### Usage Example
     * Fetch from the `LIST CreditNotes` endpoint and view a company's credit notes.
     */
    CreditNote: {
      /**
       * Format: uuid 
       * @example 8d9fd929-436c-4fd4-a48b-0c61f68d6178
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 123877
       */
      remote_id?: string | null;
      /**
       * Format: date-time 
       * @description The credit note's transaction date. 
       * @example 2020-03-31T00:00:00Z
       */
      transaction_date?: string | null;
      /**
       * @description The credit note's status.
       * 
       * * `SUBMITTED` - SUBMITTED
       * * `AUTHORIZED` - AUTHORIZED
       * * `PAID` - PAID 
       * @example PAID
       */
      status?: components["schemas"]["CreditNoteStatusEnum"] | null;
      /**
       * @description The credit note's number. 
       * @example CN-29
       */
      number?: string | null;
      /**
       * Format: uuid 
       * @description The credit note's contact. 
       * @example c6c7b870-bb4d-489a-921e-2f0ee4192ff9
       */
      contact?: string | null;
      /**
       * Format: uuid 
       * @description The company the credit note belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: double 
       * @description The credit note's total amount. 
       * @example 50
       */
      total_amount?: number | null;
      /**
       * Format: double 
       * @description The amount of value remaining in the credit note that the customer can use. 
       * @example 20
       */
      remaining_credit?: number | null;
      /**
       * @example [
       *   {
       *     "item": "0e3fd929-436c-4fd4-a48b-0c61f68d6178",
       *     "name": "Basic Monthly",
       *     "description": "prorated amount for items",
       *     "quantity": 1,
       *     "memo": "privNote",
       *     "unit_price": "5.0",
       *     "tax_rate": "8d9fd929-436c-4fd4-a48b-0c61f68d6178",
       *     "total_line_amount": "5.0",
       *     "tracking_category": "8d9fd929-436c-4fd4-a48b-0c61f68d6178",
       *     "tracking_categories": [
       *       "8d9fd929-436c-4fd4-a48b-0c61f68d6178",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "account": "8d9fd929-436c-4fd4-a48b-0c61f68d6178",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "remote_id": "121222"
       *   }
       * ]
       */
      line_items?: (components["schemas"]["CreditNoteLineItem"])[];
      /**
       * @description The credit note's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: date-time 
       * @description When the third party's credit note was created. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_created_at?: string | null;
      /**
       * Format: date-time 
       * @description When the third party's credit note was updated. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_updated_at?: string | null;
      /**
       * @description Array of `Payment` object IDs 
       * @example [
       *   "b26fd49a-cbae-470a-a8f8-bcbc119e0390"
       * ]
       */
      payments?: (string | null)[];
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    CreditNoteLineItem: {
      /**
       * Format: uuid 
       * @example 0e3fd929-436c-4fd4-a48b-0c61f68d6178
       */
      item?: string | null;
      /**
       * @description The credit note line item's name. 
       * @example Basic Monthly
       */
      name?: string | null;
      /**
       * @description The description of the item that is owed. 
       * @example prorated amount for items
       */
      description?: string | null;
      /**
       * Format: decimal 
       * @description The credit note line item's quantity. 
       * @example 1
       */
      quantity?: string | null;
      /**
       * @description The credit note line item's memo. 
       * @example privNote
       */
      memo?: string | null;
      /**
       * Format: decimal 
       * @description The credit note line item's unit price. 
       * @example 5.0
       */
      unit_price?: string | null;
      /**
       * Format: uuid 
       * @description The credit note line item's tax rate. 
       * @example 8d9fd929-436c-4fd4-a48b-0c61f68d6178
       */
      tax_rate?: string | null;
      /**
       * Format: decimal 
       * @description The credit note line item's total. 
       * @example 5.0
       */
      total_line_amount?: string | null;
      /**
       * Format: uuid 
       * @description The credit note line item's associated tracking category. 
       * @example 8d9fd929-436c-4fd4-a48b-0c61f68d6178
       */
      tracking_category?: string | null;
      /**
       * @description The credit note line item's associated tracking categories. 
       * @example [
       *   "8d9fd929-436c-4fd4-a48b-0c61f68d6178",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories: (string)[];
      /**
       * Format: uuid 
       * @description The credit note line item's account. 
       * @example 8d9fd929-436c-4fd4-a48b-0c61f68d6178
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The company the credit note belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
    };
    /**
     * @description * `SUBMITTED` - SUBMITTED
     * * `AUTHORIZED` - AUTHORIZED
     * * `PAID` - PAID 
     * @enum {string}
     */
    CreditNoteStatusEnum: "SUBMITTED" | "AUTHORIZED" | "PAID";
    /**
     * @description * `XUA` - ADB Unit of Account
     * * `AFN` - Afghan Afghani
     * * `AFA` - Afghan Afghani (1927–2002)
     * * `ALL` - Albanian Lek
     * * `ALK` - Albanian Lek (1946–1965)
     * * `DZD` - Algerian Dinar
     * * `ADP` - Andorran Peseta
     * * `AOA` - Angolan Kwanza
     * * `AOK` - Angolan Kwanza (1977–1991)
     * * `AON` - Angolan New Kwanza (1990–2000)
     * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
     * * `ARA` - Argentine Austral
     * * `ARS` - Argentine Peso
     * * `ARM` - Argentine Peso (1881–1970)
     * * `ARP` - Argentine Peso (1983–1985)
     * * `ARL` - Argentine Peso Ley (1970–1983)
     * * `AMD` - Armenian Dram
     * * `AWG` - Aruban Florin
     * * `AUD` - Australian Dollar
     * * `ATS` - Austrian Schilling
     * * `AZN` - Azerbaijani Manat
     * * `AZM` - Azerbaijani Manat (1993–2006)
     * * `BSD` - Bahamian Dollar
     * * `BHD` - Bahraini Dinar
     * * `BDT` - Bangladeshi Taka
     * * `BBD` - Barbadian Dollar
     * * `BYN` - Belarusian Ruble
     * * `BYB` - Belarusian Ruble (1994–1999)
     * * `BYR` - Belarusian Ruble (2000–2016)
     * * `BEF` - Belgian Franc
     * * `BEC` - Belgian Franc (convertible)
     * * `BEL` - Belgian Franc (financial)
     * * `BZD` - Belize Dollar
     * * `BMD` - Bermudan Dollar
     * * `BTN` - Bhutanese Ngultrum
     * * `BOB` - Bolivian Boliviano
     * * `BOL` - Bolivian Boliviano (1863–1963)
     * * `BOV` - Bolivian Mvdol
     * * `BOP` - Bolivian Peso
     * * `BAM` - Bosnia-Herzegovina Convertible Mark
     * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
     * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
     * * `BWP` - Botswanan Pula
     * * `BRC` - Brazilian Cruzado (1986–1989)
     * * `BRZ` - Brazilian Cruzeiro (1942–1967)
     * * `BRE` - Brazilian Cruzeiro (1990–1993)
     * * `BRR` - Brazilian Cruzeiro (1993–1994)
     * * `BRN` - Brazilian New Cruzado (1989–1990)
     * * `BRB` - Brazilian New Cruzeiro (1967–1986)
     * * `BRL` - Brazilian Real
     * * `GBP` - British Pound
     * * `BND` - Brunei Dollar
     * * `BGL` - Bulgarian Hard Lev
     * * `BGN` - Bulgarian Lev
     * * `BGO` - Bulgarian Lev (1879–1952)
     * * `BGM` - Bulgarian Socialist Lev
     * * `BUK` - Burmese Kyat
     * * `BIF` - Burundian Franc
     * * `XPF` - CFP Franc
     * * `KHR` - Cambodian Riel
     * * `CAD` - Canadian Dollar
     * * `CVE` - Cape Verdean Escudo
     * * `KYD` - Cayman Islands Dollar
     * * `XAF` - Central African CFA Franc
     * * `CLE` - Chilean Escudo
     * * `CLP` - Chilean Peso
     * * `CLF` - Chilean Unit of Account (UF)
     * * `CNX` - Chinese People’s Bank Dollar
     * * `CNY` - Chinese Yuan
     * * `CNH` - Chinese Yuan (offshore)
     * * `COP` - Colombian Peso
     * * `COU` - Colombian Real Value Unit
     * * `KMF` - Comorian Franc
     * * `CDF` - Congolese Franc
     * * `CRC` - Costa Rican Colón
     * * `HRD` - Croatian Dinar
     * * `HRK` - Croatian Kuna
     * * `CUC` - Cuban Convertible Peso
     * * `CUP` - Cuban Peso
     * * `CYP` - Cypriot Pound
     * * `CZK` - Czech Koruna
     * * `CSK` - Czechoslovak Hard Koruna
     * * `DKK` - Danish Krone
     * * `DJF` - Djiboutian Franc
     * * `DOP` - Dominican Peso
     * * `NLG` - Dutch Guilder
     * * `XCD` - East Caribbean Dollar
     * * `DDM` - East German Mark
     * * `ECS` - Ecuadorian Sucre
     * * `ECV` - Ecuadorian Unit of Constant Value
     * * `EGP` - Egyptian Pound
     * * `GQE` - Equatorial Guinean Ekwele
     * * `ERN` - Eritrean Nakfa
     * * `EEK` - Estonian Kroon
     * * `ETB` - Ethiopian Birr
     * * `EUR` - Euro
     * * `XBA` - European Composite Unit
     * * `XEU` - European Currency Unit
     * * `XBB` - European Monetary Unit
     * * `XBC` - European Unit of Account (XBC)
     * * `XBD` - European Unit of Account (XBD)
     * * `FKP` - Falkland Islands Pound
     * * `FJD` - Fijian Dollar
     * * `FIM` - Finnish Markka
     * * `FRF` - French Franc
     * * `XFO` - French Gold Franc
     * * `XFU` - French UIC-Franc
     * * `GMD` - Gambian Dalasi
     * * `GEK` - Georgian Kupon Larit
     * * `GEL` - Georgian Lari
     * * `DEM` - German Mark
     * * `GHS` - Ghanaian Cedi
     * * `GHC` - Ghanaian Cedi (1979–2007)
     * * `GIP` - Gibraltar Pound
     * * `XAU` - Gold
     * * `GRD` - Greek Drachma
     * * `GTQ` - Guatemalan Quetzal
     * * `GWP` - Guinea-Bissau Peso
     * * `GNF` - Guinean Franc
     * * `GNS` - Guinean Syli
     * * `GYD` - Guyanaese Dollar
     * * `HTG` - Haitian Gourde
     * * `HNL` - Honduran Lempira
     * * `HKD` - Hong Kong Dollar
     * * `HUF` - Hungarian Forint
     * * `IMP` - IMP
     * * `ISK` - Icelandic Króna
     * * `ISJ` - Icelandic Króna (1918–1981)
     * * `INR` - Indian Rupee
     * * `IDR` - Indonesian Rupiah
     * * `IRR` - Iranian Rial
     * * `IQD` - Iraqi Dinar
     * * `IEP` - Irish Pound
     * * `ILS` - Israeli New Shekel
     * * `ILP` - Israeli Pound
     * * `ILR` - Israeli Shekel (1980–1985)
     * * `ITL` - Italian Lira
     * * `JMD` - Jamaican Dollar
     * * `JPY` - Japanese Yen
     * * `JOD` - Jordanian Dinar
     * * `KZT` - Kazakhstani Tenge
     * * `KES` - Kenyan Shilling
     * * `KWD` - Kuwaiti Dinar
     * * `KGS` - Kyrgystani Som
     * * `LAK` - Laotian Kip
     * * `LVL` - Latvian Lats
     * * `LVR` - Latvian Ruble
     * * `LBP` - Lebanese Pound
     * * `LSL` - Lesotho Loti
     * * `LRD` - Liberian Dollar
     * * `LYD` - Libyan Dinar
     * * `LTL` - Lithuanian Litas
     * * `LTT` - Lithuanian Talonas
     * * `LUL` - Luxembourg Financial Franc
     * * `LUC` - Luxembourgian Convertible Franc
     * * `LUF` - Luxembourgian Franc
     * * `MOP` - Macanese Pataca
     * * `MKD` - Macedonian Denar
     * * `MKN` - Macedonian Denar (1992–1993)
     * * `MGA` - Malagasy Ariary
     * * `MGF` - Malagasy Franc
     * * `MWK` - Malawian Kwacha
     * * `MYR` - Malaysian Ringgit
     * * `MVR` - Maldivian Rufiyaa
     * * `MVP` - Maldivian Rupee (1947–1981)
     * * `MLF` - Malian Franc
     * * `MTL` - Maltese Lira
     * * `MTP` - Maltese Pound
     * * `MRU` - Mauritanian Ouguiya
     * * `MRO` - Mauritanian Ouguiya (1973–2017)
     * * `MUR` - Mauritian Rupee
     * * `MXV` - Mexican Investment Unit
     * * `MXN` - Mexican Peso
     * * `MXP` - Mexican Silver Peso (1861–1992)
     * * `MDC` - Moldovan Cupon
     * * `MDL` - Moldovan Leu
     * * `MCF` - Monegasque Franc
     * * `MNT` - Mongolian Tugrik
     * * `MAD` - Moroccan Dirham
     * * `MAF` - Moroccan Franc
     * * `MZE` - Mozambican Escudo
     * * `MZN` - Mozambican Metical
     * * `MZM` - Mozambican Metical (1980–2006)
     * * `MMK` - Myanmar Kyat
     * * `NAD` - Namibian Dollar
     * * `NPR` - Nepalese Rupee
     * * `ANG` - Netherlands Antillean Guilder
     * * `TWD` - New Taiwan Dollar
     * * `NZD` - New Zealand Dollar
     * * `NIO` - Nicaraguan Córdoba
     * * `NIC` - Nicaraguan Córdoba (1988–1991)
     * * `NGN` - Nigerian Naira
     * * `KPW` - North Korean Won
     * * `NOK` - Norwegian Krone
     * * `OMR` - Omani Rial
     * * `PKR` - Pakistani Rupee
     * * `XPD` - Palladium
     * * `PAB` - Panamanian Balboa
     * * `PGK` - Papua New Guinean Kina
     * * `PYG` - Paraguayan Guarani
     * * `PEI` - Peruvian Inti
     * * `PEN` - Peruvian Sol
     * * `PES` - Peruvian Sol (1863–1965)
     * * `PHP` - Philippine Peso
     * * `XPT` - Platinum
     * * `PLN` - Polish Zloty
     * * `PLZ` - Polish Zloty (1950–1995)
     * * `PTE` - Portuguese Escudo
     * * `GWE` - Portuguese Guinea Escudo
     * * `QAR` - Qatari Rial
     * * `XRE` - RINET Funds
     * * `RHD` - Rhodesian Dollar
     * * `RON` - Romanian Leu
     * * `ROL` - Romanian Leu (1952–2006)
     * * `RUB` - Russian Ruble
     * * `RUR` - Russian Ruble (1991–1998)
     * * `RWF` - Rwandan Franc
     * * `SVC` - Salvadoran Colón
     * * `WST` - Samoan Tala
     * * `SAR` - Saudi Riyal
     * * `RSD` - Serbian Dinar
     * * `CSD` - Serbian Dinar (2002–2006)
     * * `SCR` - Seychellois Rupee
     * * `SLL` - Sierra Leonean Leone
     * * `XAG` - Silver
     * * `SGD` - Singapore Dollar
     * * `SKK` - Slovak Koruna
     * * `SIT` - Slovenian Tolar
     * * `SBD` - Solomon Islands Dollar
     * * `SOS` - Somali Shilling
     * * `ZAR` - South African Rand
     * * `ZAL` - South African Rand (financial)
     * * `KRH` - South Korean Hwan (1953–1962)
     * * `KRW` - South Korean Won
     * * `KRO` - South Korean Won (1945–1953)
     * * `SSP` - South Sudanese Pound
     * * `SUR` - Soviet Rouble
     * * `ESP` - Spanish Peseta
     * * `ESA` - Spanish Peseta (A account)
     * * `ESB` - Spanish Peseta (convertible account)
     * * `XDR` - Special Drawing Rights
     * * `LKR` - Sri Lankan Rupee
     * * `SHP` - St. Helena Pound
     * * `XSU` - Sucre
     * * `SDD` - Sudanese Dinar (1992–2007)
     * * `SDG` - Sudanese Pound
     * * `SDP` - Sudanese Pound (1957–1998)
     * * `SRD` - Surinamese Dollar
     * * `SRG` - Surinamese Guilder
     * * `SZL` - Swazi Lilangeni
     * * `SEK` - Swedish Krona
     * * `CHF` - Swiss Franc
     * * `SYP` - Syrian Pound
     * * `STN` - São Tomé & Príncipe Dobra
     * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
     * * `TVD` - TVD
     * * `TJR` - Tajikistani Ruble
     * * `TJS` - Tajikistani Somoni
     * * `TZS` - Tanzanian Shilling
     * * `XTS` - Testing Currency Code
     * * `THB` - Thai Baht
     * * `XXX` - The codes assigned for transactions where no currency is involved
     * * `TPE` - Timorese Escudo
     * * `TOP` - Tongan Paʻanga
     * * `TTD` - Trinidad & Tobago Dollar
     * * `TND` - Tunisian Dinar
     * * `TRY` - Turkish Lira
     * * `TRL` - Turkish Lira (1922–2005)
     * * `TMT` - Turkmenistani Manat
     * * `TMM` - Turkmenistani Manat (1993–2009)
     * * `USD` - US Dollar
     * * `USN` - US Dollar (Next day)
     * * `USS` - US Dollar (Same day)
     * * `UGX` - Ugandan Shilling
     * * `UGS` - Ugandan Shilling (1966–1987)
     * * `UAH` - Ukrainian Hryvnia
     * * `UAK` - Ukrainian Karbovanets
     * * `AED` - United Arab Emirates Dirham
     * * `UYW` - Uruguayan Nominal Wage Index Unit
     * * `UYU` - Uruguayan Peso
     * * `UYP` - Uruguayan Peso (1975–1993)
     * * `UYI` - Uruguayan Peso (Indexed Units)
     * * `UZS` - Uzbekistani Som
     * * `VUV` - Vanuatu Vatu
     * * `VES` - Venezuelan Bolívar
     * * `VEB` - Venezuelan Bolívar (1871–2008)
     * * `VEF` - Venezuelan Bolívar (2008–2018)
     * * `VND` - Vietnamese Dong
     * * `VNN` - Vietnamese Dong (1978–1985)
     * * `CHE` - WIR Euro
     * * `CHW` - WIR Franc
     * * `XOF` - West African CFA Franc
     * * `YDD` - Yemeni Dinar
     * * `YER` - Yemeni Rial
     * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
     * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
     * * `YUM` - Yugoslavian New Dinar (1994–2002)
     * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
     * * `ZWN` - ZWN
     * * `ZRN` - Zairean New Zaire (1993–1998)
     * * `ZRZ` - Zairean Zaire (1971–1993)
     * * `ZMW` - Zambian Kwacha
     * * `ZMK` - Zambian Kwacha (1968–2012)
     * * `ZWD` - Zimbabwean Dollar (1980–2008)
     * * `ZWR` - Zimbabwean Dollar (2008)
     * * `ZWL` - Zimbabwean Dollar (2009) 
     * @enum {string}
     */
    CurrencyEnum: "XUA" | "AFN" | "AFA" | "ALL" | "ALK" | "DZD" | "ADP" | "AOA" | "AOK" | "AON" | "AOR" | "ARA" | "ARS" | "ARM" | "ARP" | "ARL" | "AMD" | "AWG" | "AUD" | "ATS" | "AZN" | "AZM" | "BSD" | "BHD" | "BDT" | "BBD" | "BYN" | "BYB" | "BYR" | "BEF" | "BEC" | "BEL" | "BZD" | "BMD" | "BTN" | "BOB" | "BOL" | "BOV" | "BOP" | "BAM" | "BAD" | "BAN" | "BWP" | "BRC" | "BRZ" | "BRE" | "BRR" | "BRN" | "BRB" | "BRL" | "GBP" | "BND" | "BGL" | "BGN" | "BGO" | "BGM" | "BUK" | "BIF" | "XPF" | "KHR" | "CAD" | "CVE" | "KYD" | "XAF" | "CLE" | "CLP" | "CLF" | "CNX" | "CNY" | "CNH" | "COP" | "COU" | "KMF" | "CDF" | "CRC" | "HRD" | "HRK" | "CUC" | "CUP" | "CYP" | "CZK" | "CSK" | "DKK" | "DJF" | "DOP" | "NLG" | "XCD" | "DDM" | "ECS" | "ECV" | "EGP" | "GQE" | "ERN" | "EEK" | "ETB" | "EUR" | "XBA" | "XEU" | "XBB" | "XBC" | "XBD" | "FKP" | "FJD" | "FIM" | "FRF" | "XFO" | "XFU" | "GMD" | "GEK" | "GEL" | "DEM" | "GHS" | "GHC" | "GIP" | "XAU" | "GRD" | "GTQ" | "GWP" | "GNF" | "GNS" | "GYD" | "HTG" | "HNL" | "HKD" | "HUF" | "IMP" | "ISK" | "ISJ" | "INR" | "IDR" | "IRR" | "IQD" | "IEP" | "ILS" | "ILP" | "ILR" | "ITL" | "JMD" | "JPY" | "JOD" | "KZT" | "KES" | "KWD" | "KGS" | "LAK" | "LVL" | "LVR" | "LBP" | "LSL" | "LRD" | "LYD" | "LTL" | "LTT" | "LUL" | "LUC" | "LUF" | "MOP" | "MKD" | "MKN" | "MGA" | "MGF" | "MWK" | "MYR" | "MVR" | "MVP" | "MLF" | "MTL" | "MTP" | "MRU" | "MRO" | "MUR" | "MXV" | "MXN" | "MXP" | "MDC" | "MDL" | "MCF" | "MNT" | "MAD" | "MAF" | "MZE" | "MZN" | "MZM" | "MMK" | "NAD" | "NPR" | "ANG" | "TWD" | "NZD" | "NIO" | "NIC" | "NGN" | "KPW" | "NOK" | "OMR" | "PKR" | "XPD" | "PAB" | "PGK" | "PYG" | "PEI" | "PEN" | "PES" | "PHP" | "XPT" | "PLN" | "PLZ" | "PTE" | "GWE" | "QAR" | "XRE" | "RHD" | "RON" | "ROL" | "RUB" | "RUR" | "RWF" | "SVC" | "WST" | "SAR" | "RSD" | "CSD" | "SCR" | "SLL" | "XAG" | "SGD" | "SKK" | "SIT" | "SBD" | "SOS" | "ZAR" | "ZAL" | "KRH" | "KRW" | "KRO" | "SSP" | "SUR" | "ESP" | "ESA" | "ESB" | "XDR" | "LKR" | "SHP" | "XSU" | "SDD" | "SDG" | "SDP" | "SRD" | "SRG" | "SZL" | "SEK" | "CHF" | "SYP" | "STN" | "STD" | "TVD" | "TJR" | "TJS" | "TZS" | "XTS" | "THB" | "XXX" | "TPE" | "TOP" | "TTD" | "TND" | "TRY" | "TRL" | "TMT" | "TMM" | "USD" | "USN" | "USS" | "UGX" | "UGS" | "UAH" | "UAK" | "AED" | "UYW" | "UYU" | "UYP" | "UYI" | "UZS" | "VUV" | "VES" | "VEB" | "VEF" | "VND" | "VNN" | "CHE" | "CHW" | "XOF" | "YDD" | "YER" | "YUN" | "YUD" | "YUM" | "YUR" | "ZWN" | "ZRN" | "ZRZ" | "ZMW" | "ZMK" | "ZWD" | "ZWR" | "ZWL";
    /**
     * @description # The DataPassthrough Object
     * ### Description
     * The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.
     * 
     * ### Usage Example
     * Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
     */
    DataPassthroughRequest: {
      /** @example POST */
      method: components["schemas"]["MethodEnum"];
      /** @example /scooters */
      path: string;
      base_url_override?: string | null;
      /** @example {"company": "Lime", "model": "Gen 2.5"} */
      data?: string | null;
      /** @description Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`. */
      multipart_form_data?: (components["schemas"]["MultipartFormFieldRequest"])[] | null;
      /**
       * @description The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server. 
       * @example {
       *   "EXTRA-HEADER": "value"
       * }
       */
      headers?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /** @example JSON */
      request_format?: components["schemas"]["RequestFormatEnum"] | null;
      /** @description Optional. If true, the response will always be an object of the form `{"type": T, "value": ...}` where `T` will be one of `string, boolean, number, null, array, object`. */
      normalize_response?: boolean;
    };
    DebugModeLog: {
      /** @example 99433219-8017-4acd-bb3c-ceb23d663832 */
      log_id: string;
      /** @example https://app.merge.dev/logs/99433219-8017-4acd-bb3c-ceb23d663832 */
      dashboard_view: string;
      /**
       * @example {
       *   "url": "https://harvest.greenhouse.io/v1/candidates/",
       *   "method": "POST",
       *   "status_code": 200
       * }
       */
      log_summary: components["schemas"]["DebugModelLogSummary"];
    };
    DebugModelLogSummary: {
      /** @example https://harvest.greenhouse.io/v1/candidates/ */
      url: string;
      /** @example POST */
      method: string;
      /** @example 200 */
      status_code: number;
    };
    /**
     * @description * `READ` - READ
     * * `WRITE` - WRITE 
     * @enum {string}
     */
    EnabledActionsEnum: "READ" | "WRITE";
    /**
     * @description * `RAW` - RAW
     * * `BASE64` - BASE64
     * * `GZIP_BASE64` - GZIP_BASE64 
     * @enum {string}
     */
    EncodingEnum: "RAW" | "BASE64" | "GZIP_BASE64";
    EndUserDetailsRequest: {
      /** @description Your end user's email address. This is purely for identification purposes - setting this value will not cause any emails to be sent. */
      end_user_email_address: string;
      /** @description Your end user's organization. */
      end_user_organization_name: string;
      /** @description This unique identifier typically represents the ID for your end user in your product's database. This value must be distinct from other Linked Accounts' unique identifiers. */
      end_user_origin_id: string;
      /** @description The integration categories to show in Merge Link. */
      categories: (components["schemas"]["CategoriesEnum"])[];
      /** @description The slug of a specific pre-selected integration for this linking flow token. For examples of slugs, see https://www.merge.dev/docs/basics/integration-metadata/. */
      integration?: string | null;
      /**
       * @description An integer number of minutes between [30, 720 or 10080 if for a Magic Link URL] for how long this token is valid. Defaults to 30. 
       * @default 30
       */
      link_expiry_mins?: number;
      /**
       * @description Whether to generate a Magic Link URL. Defaults to false. For more information on Magic Link, see https://merge.dev/blog/product/integrations,-fast.-say-hello-to-magic-link/. 
       * @default false
       */
      should_create_magic_link_url?: boolean | null;
      /** @description An array of objects to specify the models and fields that will be disabled for a given Linked Account. Each object uses model_id, enabled_actions, and disabled_fields to specify the model, method, and fields that are scoped for a given Linked Account. */
      common_models?: (components["schemas"]["CommonModelScopesBodyRequest"])[] | null;
    };
    ErrorValidationProblem: {
      /**
       * @example {
       *   "pointer": "/model/custom_fields"
       * }
       */
      source?: components["schemas"]["ValidationProblemSource"];
      /** @example Missing Required Field */
      title: string;
      /** @example custom_fields is a required field on model. */
      detail: string;
      /** @example MISSING_REQUIRED_FIELD */
      problem_type: string;
    };
    /**
     * @description # The Expense Object
     * ### Description
     * The `Expense` object is used to represent a purchase made from a business which can be made with a check, credit card, or cash. Each expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
     * 
     * ### Usage Example
     * Fetch from the `GET Expense` endpoint and view a company's expense.
     */
    Expense: {
      /**
       * Format: date-time 
       * @description When the transaction occurred.
       */
      transaction_date?: string | null;
      /**
       * Format: date-time 
       * @description When the expense was created. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_created_at?: string | null;
      /**
       * Format: uuid 
       * @description The expense's payment account. 
       * @example 9d892439-5fab-4dbb-8bd8-34f7f96c7912
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The expense's contact. 
       * @example 3d263469-51a1-4766-9205-f6c997826be1
       */
      contact?: string | null;
      /**
       * Format: double 
       * @description The expense's total amount. 
       * @example 10000
       */
      total_amount?: number | null;
      /**
       * @description The expense's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The expense's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the expense belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description The expense's private note. 
       * @example New employee supplies
       */
      memo?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "net_amount": 25.54,
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "item": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "account": "2a56344a-a491-11ec-b909-0242ac120002",
       *     "contact": "c640b80b-fac9-409f-aa19-1f9221aec445",
       *     "description": "MacBook Pro"
       *   },
       *   {
       *     "remote_id": "121223",
       *     "net_amount": 10,
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "item": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "account": "2a56344a-a491-11ec-b909-0242ac120002",
       *     "description": "Desk Lamp"
       *   }
       * ]
       */
      lines?: (components["schemas"]["ExpenseLine"])[];
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * Format: uuid 
       * @example ecbe05ac-62a3-46c5-ab31-4b478b37d1b4
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 088899
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    ExpenseEndpointRequest: {
      model: components["schemas"]["ExpenseRequest"];
    };
    /**
     * @description # The ExpenseLine Object
     * ### Description
     * The `ExpenseLine` object is used to represent an expense's line items.
     * 
     * ### Usage Example
     * Fetch from the `GET Expense` endpoint and view the expense's line items.
     */
    ExpenseLine: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * Format: uuid 
       * @description The line's item. 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      item?: string | null;
      /**
       * Format: double 
       * @description The line's net amount. 
       * @example 25.54
       */
      net_amount?: number | null;
      /**
       * Format: uuid 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      tracking_category?: string | null;
      /**
       * @example [
       *   "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories?: (string | null)[];
      /**
       * Format: uuid 
       * @description The company the line belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: uuid 
       * @description The expense's payment account. 
       * @example 2a56344a-a491-11ec-b909-0242ac120002
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The expense's contact. 
       * @example c640b80b-fac9-409f-aa19-1f9221aec445
       */
      contact?: string | null;
      /**
       * @description The description of the item that was purchased by the company. 
       * @example MacBook Pro
       */
      description?: string | null;
    };
    /**
     * @description # The ExpenseLine Object
     * ### Description
     * The `ExpenseLine` object is used to represent an expense's line items.
     * 
     * ### Usage Example
     * Fetch from the `GET Expense` endpoint and view the expense's line items.
     */
    ExpenseLineRequest: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * Format: uuid 
       * @description The line's item. 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      item?: string | null;
      /**
       * Format: double 
       * @description The line's net amount. 
       * @example 25.54
       */
      net_amount?: number | null;
      /**
       * Format: uuid 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      tracking_category?: string | null;
      /**
       * @example [
       *   "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories?: (string | null)[];
      /**
       * Format: uuid 
       * @description The company the line belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: uuid 
       * @description The expense's payment account. 
       * @example 2a56344a-a491-11ec-b909-0242ac120002
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The expense's contact. 
       * @example c640b80b-fac9-409f-aa19-1f9221aec445
       */
      contact?: string | null;
      /**
       * @description The description of the item that was purchased by the company. 
       * @example MacBook Pro
       */
      description?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    /**
     * @description # The Expense Object
     * ### Description
     * The `Expense` object is used to represent a purchase made from a business which can be made with a check, credit card, or cash. Each expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.
     * 
     * ### Usage Example
     * Fetch from the `GET Expense` endpoint and view a company's expense.
     */
    ExpenseRequest: {
      /**
       * Format: date-time 
       * @description When the transaction occurred.
       */
      transaction_date?: string | null;
      /**
       * Format: uuid 
       * @description The expense's payment account. 
       * @example 9d892439-5fab-4dbb-8bd8-34f7f96c7912
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The expense's contact. 
       * @example 3d263469-51a1-4766-9205-f6c997826be1
       */
      contact?: string | null;
      /**
       * Format: double 
       * @description The expense's total amount. 
       * @example 10000
       */
      total_amount?: number | null;
      /**
       * @description The expense's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The expense's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the expense belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description The expense's private note. 
       * @example New employee supplies
       */
      memo?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "net_amount": 25.54,
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "item": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "account": "2a56344a-a491-11ec-b909-0242ac120002",
       *     "contact": "c640b80b-fac9-409f-aa19-1f9221aec445",
       *     "description": "MacBook Pro"
       *   },
       *   {
       *     "remote_id": "121223",
       *     "net_amount": 10,
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "item": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "account": "2a56344a-a491-11ec-b909-0242ac120002",
       *     "description": "Desk Lamp"
       *   }
       * ]
       */
      lines?: (components["schemas"]["ExpenseLineRequest"])[];
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    ExpenseResponse: {
      model: components["schemas"]["Expense"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description # The GenerateRemoteKey Object
     * ### Description
     * The `GenerateRemoteKey` object is used to represent a request for a new remote key.
     * 
     * ### Usage Example
     * Post a `GenerateRemoteKey` to create a new remote key.
     */
    GenerateRemoteKeyRequest: {
      /** @example Remote Deployment Key 1 */
      name: string;
    };
    /**
     * @description # The IncomeStatement Object
     * ### Description
     * The `IncomeStatement` object is used to represent a company’s income, the cost of sales, operating expenses, and other non-operating expenses. The object also includes other important values like gross profit, gross operating profit, and net income. This represents a period of time (month, quarter, or year).
     * 
     * ### Usage Example
     * Fetch from the `GET IncomeStatement` endpoint and view a company's income statement for a given period.
     */
    IncomeStatement: {
      /**
       * Format: uuid 
       * @example 0958cbc6-6040-430a-848e-aafacbadf4ae
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 1342348
       */
      remote_id?: string | null;
      /**
       * @description The income statement's name. 
       * @example IncomeStatement
       */
      name?: string | null;
      /**
       * @description The income statement's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: uuid 
       * @description The company the income statement belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: date-time 
       * @description The income statement's start period.
       */
      start_period?: string | null;
      /**
       * Format: date-time 
       * @description The income statement's end period.
       */
      end_period?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "10299",
       *     "name": "Total Income",
       *     "value": 325,
       *     "sub_items": [
       *       {
       *         "remote_id": "10200",
       *         "name": "Landscaping Services",
       *         "value": 425,
       *         "sub_items": []
       *       },
       *       {
       *         "remote_id": "10201",
       *         "name": "Pest Control Services",
       *         "value": -100,
       *         "sub_items": []
       *       }
       *     ]
       *   }
       * ]
       */
      income?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * @example [
       *   {
       *     "remote_id": "10299",
       *     "name": "Total COGS",
       *     "value": 25,
       *     "sub_items": [
       *       {
       *         "remote_id": "10200",
       *         "name": "Supplies",
       *         "value": 10,
       *         "sub_items": []
       *       }
       *     ]
       *   }
       * ]
       */
      cost_of_sales?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * Format: double 
       * @description The revenue minus the cost of sale. 
       * @example 300
       */
      gross_profit?: number | null;
      /**
       * @example [
       *   {
       *     "remote_id": "10299",
       *     "name": "Total Operating Expenses",
       *     "value": 100,
       *     "sub_items": []
       *   }
       * ]
       */
      operating_expenses?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * Format: double 
       * @description The revenue minus the operating expenses. 
       * @example 200
       */
      net_operating_income?: number | null;
      /**
       * @example [
       *   {
       *     "remote_id": "10299",
       *     "name": "Total Non-Operating Expenses",
       *     "value": 100,
       *     "sub_items": []
       *   }
       * ]
       */
      non_operating_expenses?: readonly (components["schemas"]["ReportItem"])[];
      /**
       * Format: double 
       * @description The gross profit minus the total expenses. 
       * @example 100
       */
      net_income?: number | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The Invoice Object
     *     ### Description
     *     The `Invoice` object represents an itemized record of goods and/or services sold to a customer.
     * If type = accounts_payable `Invoice` is a bill, if type = accounts_receivable it's an invoice.
     * 
     *     ### Usage Example
     *     Fetch from the `LIST Invoices` endpoint and view a company's invoices.
     */
    Invoice: {
      /**
       * @description Whether the invoice is an accounts receivable or accounts payable. Accounts payable invoices are commonly referred to as Bills.
       * 
       * * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
       * * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE 
       * @example ACCOUNTS_RECEIVABLE
       */
      type?: components["schemas"]["InvoiceTypeEnum"] | null;
      /**
       * Format: uuid 
       * @description The invoice's contact. 
       * @example 022a2bef-57e5-4def-8ed2-7c41bd9a5ed8
       */
      contact?: string | null;
      /**
       * @description The invoice's number. 
       * @example AIQ12546
       */
      number?: string | null;
      /**
       * Format: date-time 
       * @description The invoice's issue date. 
       * @example 2020-03-31T00:00:00Z
       */
      issue_date?: string | null;
      /**
       * Format: date-time 
       * @description The invoice's due date. 
       * @example 2020-04-15T00:00:00Z
       */
      due_date?: string | null;
      /**
       * Format: date-time 
       * @description The invoice's paid date. 
       * @example 2020-04-01T00:00:00Z
       */
      paid_on_date?: string | null;
      /**
       * @description The invoice's private note. 
       * @example Weekly Payment
       */
      memo?: string | null;
      /**
       * Format: uuid 
       * @description The company the invoice belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description The invoice's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The invoice's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: double 
       * @description The total discounts applied to the total cost.
       */
      total_discount?: number | null;
      /**
       * Format: double 
       * @description The total amount being paid before taxes. 
       * @example 100
       */
      sub_total?: number | null;
      /**
       * Format: double 
       * @description The total amount being paid in taxes. 
       * @example 5
       */
      total_tax_amount?: number | null;
      /**
       * Format: double 
       * @description The invoice's total amount. 
       * @example 105
       */
      total_amount?: number | null;
      /**
       * Format: double 
       * @description The invoice's remaining balance. 
       * @example 105
       */
      balance?: number | null;
      /**
       * Format: date-time 
       * @description When the third party's invoice entry was updated. 
       * @example 2020-04-01T00:00:00Z
       */
      remote_updated_at?: string | null;
      /**
       * @description Array of `Payment` object IDs. 
       * @example [
       *   "b26fd49a-cbae-470a-a8f8-bcbc119e0390"
       * ]
       */
      payments?: (string | null)[];
      /**
       * @example [
       *   {
       *     "id": "022a2bef-57e5-4def-8ed2-7c41bd9a5ed8",
       *     "remote_id": "8765432",
       *     "description": "Pickleball lessons",
       *     "unit_price": 50,
       *     "quantity": 1,
       *     "total_amount": 50,
       *     "currency": "USD",
       *     "exchange_rate": "2.9",
       *     "item": "5b3c1341-a20f-4e51-b72c-f3830a16c97b",
       *     "account": "cd0f32d4-a493-11ec-b909-0242ac120002",
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "remote_data": [
       *       {
       *         "path": "/actions",
       *         "data": [
       *           "Varies by platform"
       *         ]
       *       }
       *     ]
       *   }
       * ]
       */
      line_items?: (components["schemas"]["InvoiceLineItem"])[];
      remote_was_deleted?: boolean;
      /**
       * Format: uuid 
       * @example 9871b4a9-f5d2-4f3b-a66b-dfedbed42c46
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 990110
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    InvoiceEndpointRequest: {
      model: components["schemas"]["InvoiceRequest"];
    };
    /**
     * @description # The InvoiceLineItem Object
     * ### Description
     * The `InvoiceLineItem` object represents an itemized record of goods and/or services sold to a customer. If type = accounts_payable, invoice is a bill, if type = accounts_receivable it's an invoice.
     * 
     * ### Usage Example
     * Fetch from the `GET Invoice` endpoint and view the invoice's line items.
     */
    InvoiceLineItem: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 8765432
       */
      remote_id?: string | null;
      /**
       * @description The line item's description. 
       * @example Pickleball lessons
       */
      description?: string | null;
      /**
       * Format: double 
       * @description The line item's unit price. 
       * @example 50
       */
      unit_price?: number | null;
      /**
       * Format: double 
       * @description The line item's quantity. 
       * @example 1
       */
      quantity?: number | null;
      /**
       * Format: double 
       * @description The line item's total amount. 
       * @example 50
       */
      total_amount?: number | null;
      /**
       * @description The line item's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The line item's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @example 5b3c1341-a20f-4e51-b72c-f3830a16c97b
       */
      item?: string | null;
      /**
       * Format: uuid 
       * @example cd0f32d4-a493-11ec-b909-0242ac120002
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      tracking_category?: string | null;
      /**
       * @example [
       *   "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories?: (string | null)[];
      /**
       * Format: uuid 
       * @description The company the line item belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: uuid 
       * @example 022a2bef-57e5-4def-8ed2-7c41bd9a5ed8
       */
      id?: string;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    /**
     * @description # The InvoiceLineItem Object
     * ### Description
     * The `InvoiceLineItem` object represents an itemized record of goods and/or services sold to a customer. If type = accounts_payable, invoice is a bill, if type = accounts_receivable it's an invoice.
     * 
     * ### Usage Example
     * Fetch from the `GET Invoice` endpoint and view the invoice's line items.
     */
    InvoiceLineItemRequest: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 8765432
       */
      remote_id?: string | null;
      /**
       * @description The line item's description. 
       * @example Pickleball lessons
       */
      description?: string | null;
      /**
       * Format: double 
       * @description The line item's unit price. 
       * @example 50
       */
      unit_price?: number | null;
      /**
       * Format: double 
       * @description The line item's quantity. 
       * @example 1
       */
      quantity?: number | null;
      /**
       * Format: double 
       * @description The line item's total amount. 
       * @example 50
       */
      total_amount?: number | null;
      /**
       * @description The line item's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The line item's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @example 5b3c1341-a20f-4e51-b72c-f3830a16c97b
       */
      item?: string | null;
      /**
       * Format: uuid 
       * @example cd0f32d4-a493-11ec-b909-0242ac120002
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      tracking_category?: string | null;
      /**
       * @example [
       *   "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories?: (string | null)[];
      /**
       * Format: uuid 
       * @description The company the line item belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    /**
     * @description # The Invoice Object
     *     ### Description
     *     The `Invoice` object represents an itemized record of goods and/or services sold to a customer.
     * If type = accounts_payable `Invoice` is a bill, if type = accounts_receivable it's an invoice.
     * 
     *     ### Usage Example
     *     Fetch from the `LIST Invoices` endpoint and view a company's invoices.
     */
    InvoiceRequest: {
      /**
       * @description Whether the invoice is an accounts receivable or accounts payable. Accounts payable invoices are commonly referred to as Bills.
       * 
       * * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
       * * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE 
       * @example ACCOUNTS_RECEIVABLE
       */
      type?: components["schemas"]["InvoiceTypeEnum"] | null;
      /**
       * Format: uuid 
       * @description The invoice's contact. 
       * @example 022a2bef-57e5-4def-8ed2-7c41bd9a5ed8
       */
      contact?: string | null;
      /**
       * @description The invoice's number. 
       * @example AIQ12546
       */
      number?: string | null;
      /**
       * Format: date-time 
       * @description The invoice's issue date. 
       * @example 2020-03-31T00:00:00Z
       */
      issue_date?: string | null;
      /**
       * Format: date-time 
       * @description The invoice's due date. 
       * @example 2020-04-15T00:00:00Z
       */
      due_date?: string | null;
      /**
       * Format: date-time 
       * @description The invoice's paid date. 
       * @example 2020-04-01T00:00:00Z
       */
      paid_on_date?: string | null;
      /**
       * @description The invoice's private note. 
       * @example Weekly Payment
       */
      memo?: string | null;
      /**
       * Format: uuid 
       * @description The company the invoice belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @description The invoice's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The invoice's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: double 
       * @description The total discounts applied to the total cost.
       */
      total_discount?: number | null;
      /**
       * Format: double 
       * @description The total amount being paid before taxes. 
       * @example 100
       */
      sub_total?: number | null;
      /**
       * Format: double 
       * @description The total amount being paid in taxes. 
       * @example 5
       */
      total_tax_amount?: number | null;
      /**
       * Format: double 
       * @description The invoice's total amount. 
       * @example 105
       */
      total_amount?: number | null;
      /**
       * Format: double 
       * @description The invoice's remaining balance. 
       * @example 105
       */
      balance?: number | null;
      /**
       * @description Array of `Payment` object IDs. 
       * @example [
       *   "b26fd49a-cbae-470a-a8f8-bcbc119e0390"
       * ]
       */
      payments?: (string | null)[];
      /**
       * @example [
       *   {
       *     "id": "022a2bef-57e5-4def-8ed2-7c41bd9a5ed8",
       *     "remote_id": "8765432",
       *     "description": "Pickleball lessons",
       *     "unit_price": 50,
       *     "quantity": 1,
       *     "total_amount": 50,
       *     "currency": "USD",
       *     "exchange_rate": "2.9",
       *     "item": "5b3c1341-a20f-4e51-b72c-f3830a16c97b",
       *     "account": "cd0f32d4-a493-11ec-b909-0242ac120002",
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "remote_data": [
       *       {
       *         "path": "/actions",
       *         "data": [
       *           "Varies by platform"
       *         ]
       *       }
       *     ]
       *   }
       * ]
       */
      line_items?: (components["schemas"]["InvoiceLineItemRequest"])[];
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    InvoiceResponse: {
      model: components["schemas"]["Invoice"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
     * * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE 
     * @enum {string}
     */
    InvoiceTypeEnum: "ACCOUNTS_RECEIVABLE" | "ACCOUNTS_PAYABLE";
    Issue: {
      /**
       * Format: uuid 
       * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
       */
      id?: string;
      /** @example ONGOING */
      status?: components["schemas"]["IssueStatusEnum"];
      /** @example string */
      error_description: string;
      /** @example b82302de-852e-4e60-b050-edf9da3b7c02 */
      end_user?: {
        [key: string]: unknown | undefined;
      };
      /**
       * Format: date-time 
       * @example 2022-12-05T16:19:15.161Z
       */
      first_incident_time?: string | null;
      /**
       * Format: date-time 
       * @example 2022-12-05T16:19:15.161Z
       */
      last_incident_time?: string | null;
      /** @example true */
      is_muted?: boolean;
      /**
       * @example [
       *   "Missing employee permissions.",
       *   "Missing time off permissions."
       * ]
       */
      error_details?: readonly (string)[];
    };
    /**
     * @description * `ONGOING` - ONGOING
     * * `RESOLVED` - RESOLVED 
     * @enum {string}
     */
    IssueStatusEnum: "ONGOING" | "RESOLVED";
    /**
     * @description # The Item Object
     * ### Description
     * The `Item` object refers to the goods involved in a transaction.
     * 
     * ### Usage Example
     * Fetch from the `LIST Items` endpoint and view a company's items.
     */
    Item: {
      /**
       * Format: uuid 
       * @example d2f972d0-2526-434b-9409-4c3b468e08f0
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 12374
       */
      remote_id?: string | null;
      /**
       * @description The item's name. 
       * @example Pickleball Paddle
       */
      name?: string | null;
      /**
       * @description The item's status.
       * 
       * * `ACTIVE` - ACTIVE
       * * `ARCHIVED` - ARCHIVED 
       * @example ACTIVE
       */
      status?: components["schemas"]["Status7d1Enum"] | null;
      /**
       * Format: double 
       * @description The item's unit price. 
       * @example 10
       */
      unit_price?: number | null;
      /**
       * Format: double 
       * @description The price at which the item is purchased from a vendor. 
       * @example 25
       */
      purchase_price?: number | null;
      /**
       * Format: uuid 
       * @description References the default account used to record a purchase of the item. 
       * @example 9871b4a9-f5d2-4f3b-a66b-dfedbed42c46
       */
      purchase_account?: string | null;
      /**
       * Format: uuid 
       * @description References the default account used to record a sale. 
       * @example 3872b4c9-f5d2-4f3b-a66b-dfedbed42c49
       */
      sales_account?: string | null;
      /**
       * Format: uuid 
       * @description The company the item belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: date-time 
       * @description When the third party's item note was updated. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_updated_at?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The JournalEntry Object
     * ### Description
     * The `JournalEntry` object is used to get a record of all manually created entries made in a company’s general ledger. The journal line items for each journal entry should sum to zero.
     * 
     * ### Usage Example
     * Fetch from the `GET JournalEntry` endpoint and view a company's journey entry.
     */
    JournalEntry: {
      /**
       * Format: date-time 
       * @description The journal entry's transaction date. 
       * @example 2020-03-31T00:00:00Z
       */
      transaction_date?: string | null;
      /**
       * Format: date-time 
       * @description When the third party's journal entry was created. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_created_at?: string | null;
      /**
       * Format: date-time 
       * @description When the third party's journal entry was updated. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_updated_at?: string | null;
      /**
       * @description Array of `Payment` object IDs. 
       * @example [
       *   "b26fd49a-cbae-470a-a8f8-bcbc119e0390"
       * ]
       */
      payments?: (string | null)[];
      /**
       * @description The journal entry's private note. 
       * @example Weekly Payment
       */
      memo?: string | null;
      /**
       * @description The journal's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The journal entry's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the journal entry belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "account": "9d892439-5fab-4dbb-8bd8-34f7f96c7912",
       *     "net_amount": 25.54,
       *     "tracking_category": "d25d609b-945f-4762-b55a-1c8fb220c43c",
       *     "tracking_categories": [
       *       "d25d609b-945f-4762-b55a-1c8fb220c43c",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "contact": "d2d5ea3c-b032-11ec-b909-0242ac120002",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "description": "Cash payment for lunch"
       *   },
       *   {
       *     "remote_id": "121223",
       *     "account": "f963f34d-3d2f-4f77-b557-cf36bc7e6498",
       *     "net_amount": 10
       *   }
       * ]
       */
      lines?: (components["schemas"]["JournalLine"])[];
      remote_was_deleted?: boolean;
      /**
       * @description The journal's posting status.
       * 
       * * `UNPOSTED` - UNPOSTED
       * * `POSTED` - POSTED 
       * @example POSTED
       */
      posting_status?: components["schemas"]["PostingStatusEnum"] | null;
      /**
       * Format: uuid 
       * @example ecbe05ac-62a3-46c5-ab31-4b478b37d1b4
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 088899
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    JournalEntryEndpointRequest: {
      model: components["schemas"]["JournalEntryRequest"];
    };
    /**
     * @description # The JournalEntry Object
     * ### Description
     * The `JournalEntry` object is used to get a record of all manually created entries made in a company’s general ledger. The journal line items for each journal entry should sum to zero.
     * 
     * ### Usage Example
     * Fetch from the `GET JournalEntry` endpoint and view a company's journey entry.
     */
    JournalEntryRequest: {
      /**
       * Format: date-time 
       * @description The journal entry's transaction date. 
       * @example 2020-03-31T00:00:00Z
       */
      transaction_date?: string | null;
      /**
       * @description Array of `Payment` object IDs. 
       * @example [
       *   "b26fd49a-cbae-470a-a8f8-bcbc119e0390"
       * ]
       */
      payments?: (string | null)[];
      /**
       * @description The journal entry's private note. 
       * @example Weekly Payment
       */
      memo?: string | null;
      /**
       * @description The journal's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The journal entry's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the journal entry belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "account": "9d892439-5fab-4dbb-8bd8-34f7f96c7912",
       *     "net_amount": 25.54,
       *     "tracking_category": "d25d609b-945f-4762-b55a-1c8fb220c43c",
       *     "tracking_categories": [
       *       "d25d609b-945f-4762-b55a-1c8fb220c43c",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "contact": "d2d5ea3c-b032-11ec-b909-0242ac120002",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5",
       *     "description": "Cash payment for lunch"
       *   },
       *   {
       *     "remote_id": "121223",
       *     "account": "f963f34d-3d2f-4f77-b557-cf36bc7e6498",
       *     "net_amount": 10
       *   }
       * ]
       */
      lines?: (components["schemas"]["JournalLineRequest"])[];
      /**
       * @description The journal's posting status.
       * 
       * * `UNPOSTED` - UNPOSTED
       * * `POSTED` - POSTED 
       * @example POSTED
       */
      posting_status?: components["schemas"]["PostingStatusEnum"] | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    JournalEntryResponse: {
      model: components["schemas"]["JournalEntry"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description # The JournalLine Object
     * ### Description
     * The `JournalLine` object is used to represent a journal entry's line items.
     * 
     * ### Usage Example
     * Fetch from the `GET JournalEntry` endpoint and view the journal entry's line items.
     */
    JournalLine: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * Format: uuid 
       * @example 9d892439-5fab-4dbb-8bd8-34f7f96c7912
       */
      account?: string | null;
      /**
       * Format: double 
       * @description The value of the line item including taxes and other fees. 
       * @example 25.54
       */
      net_amount?: number | null;
      /**
       * Format: uuid 
       * @example d25d609b-945f-4762-b55a-1c8fb220c43c
       */
      tracking_category?: string | null;
      /**
       * @example [
       *   "d25d609b-945f-4762-b55a-1c8fb220c43c",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories?: (string | null)[];
      /**
       * Format: uuid 
       * @example d2d5ea3c-b032-11ec-b909-0242ac120002
       */
      contact?: string | null;
      /**
       * @description The line's description. 
       * @example Cash payment for lunch
       */
      description?: string | null;
    };
    /**
     * @description # The JournalLine Object
     * ### Description
     * The `JournalLine` object is used to represent a journal entry's line items.
     * 
     * ### Usage Example
     * Fetch from the `GET JournalEntry` endpoint and view the journal entry's line items.
     */
    JournalLineRequest: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * Format: uuid 
       * @example 9d892439-5fab-4dbb-8bd8-34f7f96c7912
       */
      account?: string | null;
      /**
       * Format: double 
       * @description The value of the line item including taxes and other fees. 
       * @example 25.54
       */
      net_amount?: number | null;
      /**
       * Format: uuid 
       * @example d25d609b-945f-4762-b55a-1c8fb220c43c
       */
      tracking_category?: string | null;
      /**
       * @example [
       *   "d25d609b-945f-4762-b55a-1c8fb220c43c",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories?: (string | null)[];
      /**
       * Format: uuid 
       * @example d2d5ea3c-b032-11ec-b909-0242ac120002
       */
      contact?: string | null;
      /**
       * @description The line's description. 
       * @example Cash payment for lunch
       */
      description?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    LinkToken: {
      /** @example necdP7FtdASl1fQwm62be2_dM4wBG8_GactqoUV0 */
      link_token: string;
      /** @example Lever */
      integration_name?: string;
      /** @example https://link.merge.dev/asdfjkl12345jsndfgi2i83n */
      magic_link_url?: string;
    };
    LinkedAccountCondition: {
      /**
       * Format: uuid 
       * @description The ID indicating which condition schema to use for a specific condition.
       */
      condition_schema_id: string;
      /** @description The common model for a specific condition. */
      common_model?: string;
      /** @description User-facing *native condition* name. e.g. "Skip Manager". */
      native_name: string | null;
      /** @description The operator for a specific condition. */
      operator: string;
      /** @description The value for a condition. */
      value?: Record<string, never>;
      /** @description The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. "location_type". */
      field_name: string | null;
    };
    LinkedAccountConditionRequest: {
      /**
       * Format: uuid 
       * @description The ID indicating which condition schema to use for a specific condition.
       */
      condition_schema_id: string;
      /** @description The operator for a specific condition. */
      operator: string;
      /** @description The value for a specific condition. */
      value: Record<string, never>;
    };
    LinkedAccountSelectiveSyncConfiguration: {
      /** @description The conditions belonging to a selective sync. */
      linked_account_conditions?: readonly (components["schemas"]["LinkedAccountCondition"])[];
    };
    LinkedAccountSelectiveSyncConfigurationListRequest: {
      /** @description The selective syncs associated with a linked account. */
      sync_configurations: (components["schemas"]["LinkedAccountSelectiveSyncConfigurationRequest"])[];
    };
    LinkedAccountSelectiveSyncConfigurationRequest: {
      /** @description The conditions belonging to a selective sync. */
      linked_account_conditions: (components["schemas"]["LinkedAccountConditionRequest"])[];
    };
    LinkedAccountStatus: {
      linked_account_status: string;
      can_make_request: boolean;
    };
    MetaResponse: {
      request_schema: {
        [key: string]: unknown | undefined;
      };
      remote_field_classes?: {
        [key: string]: unknown | undefined;
      };
      status?: components["schemas"]["LinkedAccountStatus"];
      has_conditional_params: boolean;
      has_required_linked_account_params: boolean;
    };
    /**
     * @description * `GET` - GET
     * * `OPTIONS` - OPTIONS
     * * `HEAD` - HEAD
     * * `POST` - POST
     * * `PUT` - PUT
     * * `PATCH` - PATCH
     * * `DELETE` - DELETE 
     * @enum {string}
     */
    MethodEnum: "GET" | "OPTIONS" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE";
    /**
     * @description # The ModelOperation Object
     * ### Description
     * The `ModelOperation` object is used to represent the operations that are currently supported for a given model.
     * 
     * ### Usage Example
     * View what operations are supported for the `Candidate` endpoint.
     */
    ModelOperation: {
      /** @example Candidate */
      model_name: string;
      /**
       * @example [
       *   "FETCH",
       *   "CREATE"
       * ]
       */
      available_operations: (string)[];
      /**
       * @example [
       *   "remote_user_id"
       * ]
       */
      required_post_parameters: (string)[];
      /**
       * @example [
       *   "first_name",
       *   "last_name",
       *   "company",
       *   "title"
       * ]
       */
      supported_fields: (string)[];
    };
    /**
     * @description # The MultipartFormField Object
     * ### Description
     * The `MultipartFormField` object is used to represent fields in an HTTP request using `multipart/form-data`.
     * 
     * ### Usage Example
     * Create a `MultipartFormField` to define a multipart form entry.
     */
    MultipartFormFieldRequest: {
      /**
       * @description The name of the form field 
       * @example resume
       */
      name: string;
      /**
       * @description The data for the form field. 
       * @example SW50ZWdyYXRlIGZhc3QKSW50ZWdyYXRlIG9uY2U=
       */
      data: string;
      /**
       * @description The encoding of the value of `data`. Defaults to `RAW` if not defined.
       * 
       * * `RAW` - RAW
       * * `BASE64` - BASE64
       * * `GZIP_BASE64` - GZIP_BASE64 
       * @default RAW 
       * @example BASE64
       */
      encoding?: components["schemas"]["EncodingEnum"] | null;
      /**
       * @description The file name of the form field, if the field is for a file. 
       * @example resume.pdf
       */
      file_name?: string | null;
      /**
       * @description The MIME type of the file, if the field is for a file. 
       * @example application/pdf
       */
      content_type?: string | null;
    };
    OperatorSchema: {
      /** @description The operator for which an operator schema is defined. */
      operator?: string;
      /** @description Whether the operator can be repeated multiple times. */
      is_unique?: boolean;
    };
    PaginatedAccountDetailsAndActionsList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["AccountDetailsAndActions"])[];
    };
    PaginatedAccountList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Account"])[];
    };
    PaginatedAccountingAttachmentList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["AccountingAttachment"])[];
    };
    PaginatedBalanceSheetList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["BalanceSheet"])[];
    };
    PaginatedCashFlowStatementList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["CashFlowStatement"])[];
    };
    PaginatedCompanyInfoList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["CompanyInfo"])[];
    };
    PaginatedConditionSchemaList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["ConditionSchema"])[];
    };
    PaginatedContactList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Contact"])[];
    };
    PaginatedCreditNoteList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["CreditNote"])[];
    };
    PaginatedExpenseList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Expense"])[];
    };
    PaginatedIncomeStatementList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["IncomeStatement"])[];
    };
    PaginatedInvoiceList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Invoice"])[];
    };
    PaginatedIssueList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Issue"])[];
    };
    PaginatedItemList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Item"])[];
    };
    PaginatedJournalEntryList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["JournalEntry"])[];
    };
    PaginatedPaymentList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Payment"])[];
    };
    PaginatedPurchaseOrderList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["PurchaseOrder"])[];
    };
    PaginatedSyncStatusList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["SyncStatus"])[];
    };
    PaginatedTaxRateList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["TaxRate"])[];
    };
    PaginatedTrackingCategoryList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["TrackingCategory"])[];
    };
    PaginatedTransactionList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["Transaction"])[];
    };
    PaginatedVendorCreditList: {
      /** @example cD0yMDIxLTAxLTA2KzAzJTNBMjQlM0E1My40MzQzMjYlMkIwMCUzQTAw */
      next?: string | null;
      /** @example cj1sZXdwd2VycWVtY29zZnNkc2NzUWxNMEUxTXk0ME16UXpNallsTWtJ */
      previous?: string | null;
      results?: (components["schemas"]["VendorCredit"])[];
    };
    /**
     * @description # The Payment Object
     * ### Description
     * The `Payment` object represents general payments made towards a specific transaction.
     * 
     * ### Usage Example
     * Fetch from the `GET Payment` endpoint and view an invoice's payment.
     */
    Payment: {
      /**
       * Format: uuid 
       * @example b26fd49a-cbae-470a-a8f8-bcbc119e0390
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 987300
       */
      remote_id?: string | null;
      /**
       * Format: date-time 
       * @description The payment's transaction date. 
       * @example 2020-03-31T00:00:00Z
       */
      transaction_date?: string | null;
      /**
       * Format: uuid 
       * @description The supplier, or customer involved in the payment. 
       * @example 5b3c1341-a20f-4e51-b72c-f3830a16c97b
       */
      contact?: string | null;
      /**
       * Format: uuid 
       * @description The supplier’s or customer’s account in which the payment is made. 
       * @example d6e687d6-0c36-48a1-8114-35324b5cb38f
       */
      account?: string | null;
      /**
       * @description The payment's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example FKP
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The payment's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the payment belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: double 
       * @description The total amount of money being paid to the supplier, or customer, after taxes. 
       * @example 50
       */
      total_amount?: number | null;
      /**
       * Format: date-time 
       * @description When the third party's payment entry was updated. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_updated_at?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    PaymentEndpointRequest: {
      model: components["schemas"]["PaymentRequest"];
    };
    /**
     * @description # The Payment Object
     * ### Description
     * The `Payment` object represents general payments made towards a specific transaction.
     * 
     * ### Usage Example
     * Fetch from the `GET Payment` endpoint and view an invoice's payment.
     */
    PaymentRequest: {
      /**
       * Format: date-time 
       * @description The payment's transaction date. 
       * @example 2020-03-31T00:00:00Z
       */
      transaction_date?: string | null;
      /**
       * Format: uuid 
       * @description The supplier, or customer involved in the payment. 
       * @example 5b3c1341-a20f-4e51-b72c-f3830a16c97b
       */
      contact?: string | null;
      /**
       * Format: uuid 
       * @description The supplier’s or customer’s account in which the payment is made. 
       * @example d6e687d6-0c36-48a1-8114-35324b5cb38f
       */
      account?: string | null;
      /**
       * @description The payment's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example FKP
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The payment's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the payment belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: double 
       * @description The total amount of money being paid to the supplier, or customer, after taxes. 
       * @example 50
       */
      total_amount?: number | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    PaymentResponse: {
      model: components["schemas"]["Payment"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description * `UNPOSTED` - UNPOSTED
     * * `POSTED` - POSTED 
     * @enum {string}
     */
    PostingStatusEnum: "UNPOSTED" | "POSTED";
    /**
     * @description # The PurchaseOrder Object
     * ### Description
     * The `PurchaseOrder` object is a record of request for a product or service between a buyer and seller.
     * 
     * ### Usage Example
     * Fetch from the `LIST PurchaseOrders` endpoint and view a company's purchase orders.
     */
    PurchaseOrder: {
      /**
       * @description The purchase order's status.
       * 
       * * `DRAFT` - DRAFT
       * * `SUBMITTED` - SUBMITTED
       * * `AUTHORIZED` - AUTHORIZED
       * * `BILLED` - BILLED
       * * `DELETED` - DELETED 
       * @example SUBMITTED
       */
      status?: components["schemas"]["PurchaseOrderStatusEnum"] | null;
      /**
       * Format: date-time 
       * @description The purchase order's issue date. 
       * @example 2020-03-31T00:00:00Z0
       */
      issue_date?: string | null;
      /**
       * Format: date-time 
       * @description The purchase order's delivery date. 
       * @example 2020-04-15T00:00:00Z
       */
      delivery_date?: string | null;
      /**
       * Format: uuid 
       * @description The purchase order's delivery address. 
       * @example {
       *   "street_1": "2920 Broadway",
       *   "street_2": "2nd Floor",
       *   "city": "New York",
       *   "state": "NY",
       *   "country": "USA",
       *   "zip_code": "10027"
       * }
       */
      delivery_address?: string | null;
      /**
       * Format: uuid 
       * @description The contact making the purchase order. 
       * @example 3e442c5d-8f51-4103-b5c9-dcee39c30a08
       */
      customer?: string | null;
      /**
       * Format: uuid 
       * @description The party fulfilling the purchase order. 
       * @example 2c22ce34-5c6e-4fc7-a594-7f26bb4cf78b
       */
      vendor?: string | null;
      /**
       * @description A memo attached to the purchase order. 
       * @example private note
       */
      memo?: string | null;
      /**
       * Format: uuid 
       * @description The company the purchase order belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: double 
       * @description The purchase order's total amount. 
       * @example 260
       */
      total_amount?: number | null;
      /**
       * @description The purchase order's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The purchase order's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "description": "Pickleball paddles",
       *     "unit_price": 25,
       *     "quantity": 10,
       *     "item": "0958cbc6-6040-430a-848e-aafacbadf4ae",
       *     "tracking_category": "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *     "tracking_categories": [
       *       "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "tax_amount": 10,
       *     "total_line_amount": 260,
       *     "currency": "USD",
       *     "exchange_rate": "2.9",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5"
       *   },
       *   {
       *     "description": "Pickleball Balls",
       *     "unit_price": 1,
       *     "quantity": 10,
       *     "item": "249c9faa-3045-4a31-953b-8f22d3613301",
       *     "tracking_category": "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *     "tracking_categories": [
       *       "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "tax_amount": 10,
       *     "total_line_amount": 20
       *   }
       * ]
       */
      line_items?: (components["schemas"]["PurchaseOrderLineItem"])[];
      /**
       * Format: date-time 
       * @description When the third party's purchase order note was created. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_created_at?: string | null;
      /**
       * Format: date-time 
       * @description When the third party's purchase order note was updated. 
       * @example 2020-03-31T00:00:00Z
       */
      remote_updated_at?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * Format: uuid 
       * @example 0048ea5b-911e-4dff-9364-92070dea62ff
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 239741
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    PurchaseOrderEndpointRequest: {
      model: components["schemas"]["PurchaseOrderRequest"];
    };
    /**
     * @description # The PurchaseOrderLineItem Object
     * ### Description
     * The `PurchaseOrderLineItem` object is used to represent a purchase order's line item.
     * 
     * ### Usage Example
     * Fetch from the `GET PurchaseOrder` endpoint and view a company's purchase orders.
     */
    PurchaseOrderLineItem: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * @description A description of the good being purchased. 
       * @example Pickleball paddles
       */
      description?: string | null;
      /**
       * Format: double 
       * @description The line item's unit price. 
       * @example 25
       */
      unit_price?: number | null;
      /**
       * Format: double 
       * @description The line item's quantity. 
       * @example 10
       */
      quantity?: number | null;
      /**
       * Format: uuid 
       * @example 0958cbc6-6040-430a-848e-aafacbadf4ae
       */
      item?: string | null;
      /**
       * Format: uuid 
       * @description The purchase order line item's account.
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The purchase order line item's associated tracking category. 
       * @example f1214c24-2702-4617-b74b-3ddecfc0d384
       */
      tracking_category?: string | null;
      /**
       * @description The purchase order line item's associated tracking categories. 
       * @example [
       *   "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories: (string)[];
      /**
       * Format: decimal 
       * @description The purchase order line item's tax amount. 
       * @example 10
       */
      tax_amount?: string | null;
      /**
       * Format: decimal 
       * @description The purchase order line item's total amount. 
       * @example 260
       */
      total_line_amount?: string | null;
      /**
       * @description The purchase order line item's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The purchase order line item's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the purchase order line item belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
    };
    /**
     * @description # The PurchaseOrderLineItem Object
     * ### Description
     * The `PurchaseOrderLineItem` object is used to represent a purchase order's line item.
     * 
     * ### Usage Example
     * Fetch from the `GET PurchaseOrder` endpoint and view a company's purchase orders.
     */
    PurchaseOrderLineItemRequest: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * @description A description of the good being purchased. 
       * @example Pickleball paddles
       */
      description?: string | null;
      /**
       * Format: double 
       * @description The line item's unit price. 
       * @example 25
       */
      unit_price?: number | null;
      /**
       * Format: double 
       * @description The line item's quantity. 
       * @example 10
       */
      quantity?: number | null;
      /**
       * Format: uuid 
       * @example 0958cbc6-6040-430a-848e-aafacbadf4ae
       */
      item?: string | null;
      /**
       * Format: uuid 
       * @description The purchase order line item's account.
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The purchase order line item's associated tracking category. 
       * @example f1214c24-2702-4617-b74b-3ddecfc0d384
       */
      tracking_category?: string | null;
      /**
       * @description The purchase order line item's associated tracking categories. 
       * @example [
       *   "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories: (string)[];
      /**
       * Format: decimal 
       * @description The purchase order line item's tax amount. 
       * @example 10
       */
      tax_amount?: string | null;
      /**
       * Format: decimal 
       * @description The purchase order line item's total amount. 
       * @example 260
       */
      total_line_amount?: string | null;
      /**
       * @description The purchase order line item's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The purchase order line item's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the purchase order line item belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    /**
     * @description # The PurchaseOrder Object
     * ### Description
     * The `PurchaseOrder` object is a record of request for a product or service between a buyer and seller.
     * 
     * ### Usage Example
     * Fetch from the `LIST PurchaseOrders` endpoint and view a company's purchase orders.
     */
    PurchaseOrderRequest: {
      /**
       * @description The purchase order's status.
       * 
       * * `DRAFT` - DRAFT
       * * `SUBMITTED` - SUBMITTED
       * * `AUTHORIZED` - AUTHORIZED
       * * `BILLED` - BILLED
       * * `DELETED` - DELETED 
       * @example SUBMITTED
       */
      status?: components["schemas"]["PurchaseOrderStatusEnum"] | null;
      /**
       * Format: date-time 
       * @description The purchase order's issue date. 
       * @example 2020-03-31T00:00:00Z0
       */
      issue_date?: string | null;
      /**
       * Format: date-time 
       * @description The purchase order's delivery date. 
       * @example 2020-04-15T00:00:00Z
       */
      delivery_date?: string | null;
      /**
       * Format: uuid 
       * @description The purchase order's delivery address. 
       * @example {
       *   "street_1": "2920 Broadway",
       *   "street_2": "2nd Floor",
       *   "city": "New York",
       *   "state": "NY",
       *   "country": "USA",
       *   "zip_code": "10027"
       * }
       */
      delivery_address?: string | null;
      /**
       * Format: uuid 
       * @description The contact making the purchase order. 
       * @example 3e442c5d-8f51-4103-b5c9-dcee39c30a08
       */
      customer?: string | null;
      /**
       * Format: uuid 
       * @description The party fulfilling the purchase order. 
       * @example 2c22ce34-5c6e-4fc7-a594-7f26bb4cf78b
       */
      vendor?: string | null;
      /**
       * @description A memo attached to the purchase order. 
       * @example private note
       */
      memo?: string | null;
      /**
       * Format: uuid 
       * @description The company the purchase order belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * Format: double 
       * @description The purchase order's total amount. 
       * @example 260
       */
      total_amount?: number | null;
      /**
       * @description The purchase order's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The purchase order's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "description": "Pickleball paddles",
       *     "unit_price": 25,
       *     "quantity": 10,
       *     "item": "0958cbc6-6040-430a-848e-aafacbadf4ae",
       *     "tracking_category": "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *     "tracking_categories": [
       *       "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "tax_amount": 10,
       *     "total_line_amount": 260,
       *     "currency": "USD",
       *     "exchange_rate": "2.9",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5"
       *   },
       *   {
       *     "description": "Pickleball Balls",
       *     "unit_price": 1,
       *     "quantity": 10,
       *     "item": "249c9faa-3045-4a31-953b-8f22d3613301",
       *     "tracking_category": "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *     "tracking_categories": [
       *       "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "tax_amount": 10,
       *     "total_line_amount": 20
       *   }
       * ]
       */
      line_items?: (components["schemas"]["PurchaseOrderLineItemRequest"])[];
      /**
       * @example {
       *   "unique_integration_field": "unique_integration_field_value"
       * }
       */
      integration_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example {
       *   "unique_linked_account_field": "unique_linked_account_field_value"
       * }
       */
      linked_account_params?: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    PurchaseOrderResponse: {
      model: components["schemas"]["PurchaseOrder"];
      warnings: (components["schemas"]["WarningValidationProblem"])[];
      errors: (components["schemas"]["ErrorValidationProblem"])[];
      logs?: (components["schemas"]["DebugModeLog"])[];
    };
    /**
     * @description * `DRAFT` - DRAFT
     * * `SUBMITTED` - SUBMITTED
     * * `AUTHORIZED` - AUTHORIZED
     * * `BILLED` - BILLED
     * * `DELETED` - DELETED 
     * @enum {string}
     */
    PurchaseOrderStatusEnum: "DRAFT" | "SUBMITTED" | "AUTHORIZED" | "BILLED" | "DELETED";
    RemoteData: {
      path: string;
      data?: {
        [key: string]: unknown | undefined;
      };
    };
    /**
     * @description # The RemoteKey Object
     * ### Description
     * The `RemoteKey` object is used to represent a request for a new remote key.
     * 
     * ### Usage Example
     * Post a `GenerateRemoteKey` to receive a new `RemoteKey`.
     */
    RemoteKey: {
      /** @example Remote Deployment Key 1 */
      name: string;
      /** @example hXY57W0g0WkdRHjCaPvwijK63fwfN-o_Wh7f30SLTq_uPCOLo-WFcA */
      key: string;
    };
    /**
     * @description # The RemoteKeyForRegeneration Object
     * ### Description
     * The `RemoteKeyForRegeneration` object is used to exchange an old remote key for a new one
     * 
     * ### Usage Example
     * Post a `RemoteKeyForRegeneration` to swap out an old remote key for a new one
     */
    RemoteKeyForRegenerationRequest: {
      /** @example Remote Deployment Key 1 */
      name: string;
    };
    /**
     * @description # The RemoteResponse Object
     * ### Description
     * The `RemoteResponse` object is used to represent information returned from a third-party endpoint.
     * 
     * ### Usage Example
     * View the `RemoteResponse` returned from your `DataPassthrough`.
     */
    RemoteResponse: {
      /** @example GET */
      method: string;
      /** @example /scooters */
      path: string;
      /** @example 200 */
      status: number;
      /**
       * @example {
       *   "scooters": [
       *     {
       *       "company": "Lime",
       *       "model": "Gen 2.5"
       *     },
       *     {
       *       "company": "Bird",
       *       "model": "Bird Zero"
       *     }
       *   ]
       * }
       */
      response: Record<string, never>;
      /**
       * @example {
       *   "X-Page-Token": "value"
       * }
       */
      response_headers?: {
        [key: string]: unknown | undefined;
      };
      /** @example JSON */
      response_type?: components["schemas"]["ResponseTypeEnum"];
      /**
       * @example {
       *   "EXTRA-HEADER": "value",
       *   "Authorization": "<redacted>"
       * }
       */
      headers?: {
        [key: string]: unknown | undefined;
      };
    };
    /**
     * @description # The ReportItem Object
     * ### Description
     * The `ReportItem` object is used to represent a report item for a Balance Sheet, Cash Flow Statement or Profit and Loss Report.
     * 
     * ### Usage Example
     * Fetch from the `GET BalanceSheet` endpoint and view the balance sheet's report items.
     */
    ReportItem: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 10299
       */
      remote_id?: string | null;
      /**
       * @description The report item's name. 
       * @example Revenue
       */
      name?: string | null;
      /**
       * Format: double 
       * @description The report item's value. 
       * @example 1000
       */
      value?: number | null;
      /**
       * @example [
       *   {
       *     "remote_id": "10300",
       *     "name": "Revenue - San Francisco",
       *     "value": 500,
       *     "sub_items": []
       *   },
       *   {
       *     "remote_id": "10301",
       *     "name": "Revenue - New York",
       *     "value": 500,
       *     "sub_items": []
       *   }
       * ]
       */
      sub_items?: {
        [key: string]: unknown | undefined;
      };
      /**
       * Format: uuid 
       * @description The company the report item belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
    };
    /**
     * @description * `JSON` - JSON
     * * `XML` - XML
     * * `MULTIPART` - MULTIPART 
     * @enum {string}
     */
    RequestFormatEnum: "JSON" | "XML" | "MULTIPART";
    /**
     * @description * `JSON` - JSON
     * * `BASE64_GZIP` - BASE64_GZIP 
     * @enum {string}
     */
    ResponseTypeEnum: "JSON" | "BASE64_GZIP";
    /**
     * @description * `IN_NEXT_SYNC` - IN_NEXT_SYNC
     * * `IN_LAST_SYNC` - IN_LAST_SYNC 
     * @enum {string}
     */
    SelectiveSyncConfigurationsUsageEnum: "IN_NEXT_SYNC" | "IN_LAST_SYNC";
    /**
     * @description * `ACTIVE` - ACTIVE
     * * `ARCHIVED` - ARCHIVED 
     * @enum {string}
     */
    Status7d1Enum: "ACTIVE" | "ARCHIVED";
    /**
     * @description # The SyncStatus Object
     * ### Description
     * The `SyncStatus` object is used to represent the syncing state of an account
     * 
     * ### Usage Example
     * View the `SyncStatus` for an account to see how recently its models were synced.
     */
    SyncStatus: {
      /** @example Invoice */
      model_name: string;
      /** @example accounting.Invoices */
      model_id: string;
      /**
       * Format: date-time 
       * @example 2021-03-30T19:44:18.695973Z
       */
      last_sync_start?: string;
      /**
       * Format: date-time 
       * @example 2021-03-30T20:44:18.662942Z
       */
      next_sync_start?: string;
      /** @example SYNCING */
      status: components["schemas"]["SyncStatusStatusEnum"];
      /** @example true */
      is_initial_sync: boolean;
      /** @example IN_NEXT_SYNC */
      selective_sync_configurations_usage?: components["schemas"]["SelectiveSyncConfigurationsUsageEnum"];
    };
    /**
     * @description * `SYNCING` - SYNCING
     * * `DONE` - DONE
     * * `FAILED` - FAILED
     * * `DISABLED` - DISABLED
     * * `PAUSED` - PAUSED 
     * @enum {string}
     */
    SyncStatusStatusEnum: "SYNCING" | "DONE" | "FAILED" | "DISABLED" | "PAUSED";
    /**
     * @description # The TaxRate Object
     * ### Description
     * The `TaxRate` object is used to represent a tax rate.
     * 
     * ### Usage Example
     * Fetch from the `LIST TaxRates` endpoint and view tax rates relevant to a company.
     */
    TaxRate: {
      /**
       * @description The tax rate's description. 
       * @example Sales Tax
       */
      description?: string | null;
      /**
       * Format: double 
       * @description The tax rate's total tax rate. 
       * @example 15
       */
      total_tax_rate?: number | null;
      /**
       * Format: double 
       * @description The tax rate's effective tax rate. 
       * @example 15
       */
      effective_tax_rate?: number | null;
      /**
       * Format: uuid 
       * @description The company the tax rate belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * Format: uuid 
       * @example b82302de-852e-4e60-b050-edf9da3b7c02
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 039111
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The TrackingCategory Object
     * ### Description
     * The `TrackingCategory` object is used to represent a company's tracking categories.
     * 
     * ### Usage Example
     * Fetch from the `GET TrackingCategory` endpoint and view a company's tracking category.
     */
    TrackingCategory: {
      /**
       * @description The tracking category's name. 
       * @example Marketing Department
       */
      name?: string | null;
      /**
       * @description The tracking category's status.
       * 
       * * `ACTIVE` - ACTIVE
       * * `ARCHIVED` - ARCHIVED 
       * @example ACTIVE
       */
      status?: components["schemas"]["Status7d1Enum"] | null;
      /**
       * @description The tracking category’s type.
       * 
       * * `CLASS` - CLASS
       * * `DEPARTMENT` - DEPARTMENT 
       * @example DEPARTMENT
       */
      category_type?: components["schemas"]["CategoryTypeEnum"] | null;
      /**
       * Format: uuid 
       * @description ID of the parent tracking category. 
       * @example d25d609b-945f-4762-b55a-1c8fb220c43c
       */
      parent_category?: string | null;
      /**
       * Format: uuid 
       * @description The company the tracking category belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * Format: uuid 
       * @example ecbe05ac-62a3-46c5-ab31-4b478b37d1b4
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 948201
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The Transaction Object
     * ### Description
     * The `Transaction` includes different types of transactions. The Transactions object does not cover expenses, credit notes, vendor credit, invoices, purchase orders, and journal entries. See the “transaction_type” field for more information.
     * 
     * ### Usage Example
     * Fetch from the `GET Transaction` endpoint and view a company's transactions.
     */
    Transaction: {
      /**
       * @description The type of transaction, which can by any transaction object not already included in Merge’s common model. 
       * @example estimate
       */
      transaction_type?: string | null;
      /**
       * @description The transaction's number used for identifying purposes. 
       * @example 122
       */
      number?: string | null;
      /**
       * Format: date-time 
       * @description The date upon which the transaction occurred. 
       * @example 2020-03-31T00:00:00Z0
       */
      transaction_date?: string | null;
      /**
       * Format: uuid 
       * @description The transaction's account. 
       * @example 3e442c5d-8f51-4103-b5c9-dcee39c30a08
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The contact to whom the transaction relates to. 
       * @example 2c22ce34-5c6e-4fc7-a594-7f26bb4cf78b
       */
      contact?: string | null;
      /**
       * Format: decimal 
       * @description The total amount being paid after taxes. 
       * @example 260
       */
      total_amount?: string | null;
      /**
       * @description The transaction's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The transaction's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the transaction belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "memo": "Pickleball paddles",
       *     "unit_price": "25.0",
       *     "quantity": "10.0",
       *     "item": "0958cbc6-6040-430a-848e-aafacbadf4ae",
       *     "account": "2b38c085-2620-4269-b5ec-75dd9095ed2c",
       *     "tracking_category": "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *     "tracking_categories": [
       *       "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "total_line_amount": 260,
       *     "tax_rate": "a12e7c20-1922-9df7-s75n-edfeewnn7384",
       *     "currency": "USD",
       *     "exchange_rate": "2.9",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5"
       *   },
       *   {
       *     "memo": "Pickleball Balls",
       *     "unit_price": 1,
       *     "quantity": 10,
       *     "item": "249c9faa-3045-4a31-953b-8f22d3613301",
       *     "account": "3e442c5d-8f51-4103-b5c9-dcee39c30a08",
       *     "tracking_category": "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *     "tracking_categories": [
       *       "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "total_line_amount": 20,
       *     "tax_rate": "a12e7c20-1922-9df7-s75n-edfeewnn7384"
       *   }
       * ]
       */
      line_items?: (components["schemas"]["TransactionLineItem"])[];
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * Format: uuid 
       * @example 0048ea5b-911e-4dff-9364-92070dea62ff
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 239741
       */
      remote_id?: string | null;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The TransactionLineItem Object
     * ### Description
     * The `TransactionLineItem` object is used to represent a transaction's line items.
     * 
     * ### Usage Example
     * Fetch from the `GET TransactionLineItem` endpoint and view the transaction's line items.
     */
    TransactionLineItem: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * @description An internal note used by the business to clarify purpose of the transaction. 
       * @example Pickleball paddles
       */
      memo?: string | null;
      /**
       * Format: decimal 
       * @description The line item's unit price. 
       * @example 25.0
       */
      unit_price?: string | null;
      /**
       * Format: decimal 
       * @description The line item's quantity. 
       * @example 10.0
       */
      quantity?: string | null;
      /**
       * Format: uuid 
       * @example 0958cbc6-6040-430a-848e-aafacbadf4ae
       */
      item?: string | null;
      /**
       * Format: uuid 
       * @description The line item's account. 
       * @example 2b38c085-2620-4269-b5ec-75dd9095ed2c
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The line's associated tracking category. 
       * @example f1214c24-2702-4617-b74b-3ddecfc0d384
       */
      tracking_category?: string | null;
      /**
       * @description The line's associated tracking categories. 
       * @example [
       *   "f1214c24-2702-4617-b74b-3ddecfc0d384",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories: (string)[];
      /**
       * Format: decimal 
       * @description The line item's total. 
       * @example 260
       */
      total_line_amount?: string | null;
      /**
       * Format: uuid 
       * @description The line item's tax rate. 
       * @example a12e7c20-1922-9df7-s75n-edfeewnn7384
       */
      tax_rate?: string | null;
      /**
       * @description The line item's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The line item's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the line belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
    };
    ValidationProblemSource: {
      pointer: string;
    };
    /**
     * @description # The VendorCredit Object
     * ### Description
     * The `VendorCredit` object is an accounts receivable transaction used to show that a customer is owed a gift or refund. A vendor credit will contain information on the amount of credit owed to the customer, the vendor that owes the credit, and the account.
     * 
     * ### Usage Example
     * Fetch from the `GET VendorCredit` endpoint and view a company's vendor credits.
     */
    VendorCredit: {
      /**
       * Format: uuid 
       * @example ecbe05ac-62a3-46c5-ab31-4b478b37d1b4
       */
      id?: string;
      /**
       * @description The third-party API ID of the matching object. 
       * @example 088899
       */
      remote_id?: string | null;
      /**
       * @description The vendor credit's number. 
       * @example 6
       */
      number?: string | null;
      /**
       * Format: date-time 
       * @description The vendor credit's transaction date. 
       * @example 2020-03-31T00:00:00Z
       */
      transaction_date?: string | null;
      /**
       * Format: uuid 
       * @description The vendor that owes the gift or refund. 
       * @example 3d263469-51a1-4766-9205-f6c997826be1
       */
      vendor?: string | null;
      /**
       * Format: double 
       * @description The vendor credit's total amount. 
       * @example 10000
       */
      total_amount?: number | null;
      /**
       * @description The vendor credit's currency.
       * 
       * * `XUA` - ADB Unit of Account
       * * `AFN` - Afghan Afghani
       * * `AFA` - Afghan Afghani (1927–2002)
       * * `ALL` - Albanian Lek
       * * `ALK` - Albanian Lek (1946–1965)
       * * `DZD` - Algerian Dinar
       * * `ADP` - Andorran Peseta
       * * `AOA` - Angolan Kwanza
       * * `AOK` - Angolan Kwanza (1977–1991)
       * * `AON` - Angolan New Kwanza (1990–2000)
       * * `AOR` - Angolan Readjusted Kwanza (1995–1999)
       * * `ARA` - Argentine Austral
       * * `ARS` - Argentine Peso
       * * `ARM` - Argentine Peso (1881–1970)
       * * `ARP` - Argentine Peso (1983–1985)
       * * `ARL` - Argentine Peso Ley (1970–1983)
       * * `AMD` - Armenian Dram
       * * `AWG` - Aruban Florin
       * * `AUD` - Australian Dollar
       * * `ATS` - Austrian Schilling
       * * `AZN` - Azerbaijani Manat
       * * `AZM` - Azerbaijani Manat (1993–2006)
       * * `BSD` - Bahamian Dollar
       * * `BHD` - Bahraini Dinar
       * * `BDT` - Bangladeshi Taka
       * * `BBD` - Barbadian Dollar
       * * `BYN` - Belarusian Ruble
       * * `BYB` - Belarusian Ruble (1994–1999)
       * * `BYR` - Belarusian Ruble (2000–2016)
       * * `BEF` - Belgian Franc
       * * `BEC` - Belgian Franc (convertible)
       * * `BEL` - Belgian Franc (financial)
       * * `BZD` - Belize Dollar
       * * `BMD` - Bermudan Dollar
       * * `BTN` - Bhutanese Ngultrum
       * * `BOB` - Bolivian Boliviano
       * * `BOL` - Bolivian Boliviano (1863–1963)
       * * `BOV` - Bolivian Mvdol
       * * `BOP` - Bolivian Peso
       * * `BAM` - Bosnia-Herzegovina Convertible Mark
       * * `BAD` - Bosnia-Herzegovina Dinar (1992–1994)
       * * `BAN` - Bosnia-Herzegovina New Dinar (1994–1997)
       * * `BWP` - Botswanan Pula
       * * `BRC` - Brazilian Cruzado (1986–1989)
       * * `BRZ` - Brazilian Cruzeiro (1942–1967)
       * * `BRE` - Brazilian Cruzeiro (1990–1993)
       * * `BRR` - Brazilian Cruzeiro (1993–1994)
       * * `BRN` - Brazilian New Cruzado (1989–1990)
       * * `BRB` - Brazilian New Cruzeiro (1967–1986)
       * * `BRL` - Brazilian Real
       * * `GBP` - British Pound
       * * `BND` - Brunei Dollar
       * * `BGL` - Bulgarian Hard Lev
       * * `BGN` - Bulgarian Lev
       * * `BGO` - Bulgarian Lev (1879–1952)
       * * `BGM` - Bulgarian Socialist Lev
       * * `BUK` - Burmese Kyat
       * * `BIF` - Burundian Franc
       * * `XPF` - CFP Franc
       * * `KHR` - Cambodian Riel
       * * `CAD` - Canadian Dollar
       * * `CVE` - Cape Verdean Escudo
       * * `KYD` - Cayman Islands Dollar
       * * `XAF` - Central African CFA Franc
       * * `CLE` - Chilean Escudo
       * * `CLP` - Chilean Peso
       * * `CLF` - Chilean Unit of Account (UF)
       * * `CNX` - Chinese People’s Bank Dollar
       * * `CNY` - Chinese Yuan
       * * `CNH` - Chinese Yuan (offshore)
       * * `COP` - Colombian Peso
       * * `COU` - Colombian Real Value Unit
       * * `KMF` - Comorian Franc
       * * `CDF` - Congolese Franc
       * * `CRC` - Costa Rican Colón
       * * `HRD` - Croatian Dinar
       * * `HRK` - Croatian Kuna
       * * `CUC` - Cuban Convertible Peso
       * * `CUP` - Cuban Peso
       * * `CYP` - Cypriot Pound
       * * `CZK` - Czech Koruna
       * * `CSK` - Czechoslovak Hard Koruna
       * * `DKK` - Danish Krone
       * * `DJF` - Djiboutian Franc
       * * `DOP` - Dominican Peso
       * * `NLG` - Dutch Guilder
       * * `XCD` - East Caribbean Dollar
       * * `DDM` - East German Mark
       * * `ECS` - Ecuadorian Sucre
       * * `ECV` - Ecuadorian Unit of Constant Value
       * * `EGP` - Egyptian Pound
       * * `GQE` - Equatorial Guinean Ekwele
       * * `ERN` - Eritrean Nakfa
       * * `EEK` - Estonian Kroon
       * * `ETB` - Ethiopian Birr
       * * `EUR` - Euro
       * * `XBA` - European Composite Unit
       * * `XEU` - European Currency Unit
       * * `XBB` - European Monetary Unit
       * * `XBC` - European Unit of Account (XBC)
       * * `XBD` - European Unit of Account (XBD)
       * * `FKP` - Falkland Islands Pound
       * * `FJD` - Fijian Dollar
       * * `FIM` - Finnish Markka
       * * `FRF` - French Franc
       * * `XFO` - French Gold Franc
       * * `XFU` - French UIC-Franc
       * * `GMD` - Gambian Dalasi
       * * `GEK` - Georgian Kupon Larit
       * * `GEL` - Georgian Lari
       * * `DEM` - German Mark
       * * `GHS` - Ghanaian Cedi
       * * `GHC` - Ghanaian Cedi (1979–2007)
       * * `GIP` - Gibraltar Pound
       * * `XAU` - Gold
       * * `GRD` - Greek Drachma
       * * `GTQ` - Guatemalan Quetzal
       * * `GWP` - Guinea-Bissau Peso
       * * `GNF` - Guinean Franc
       * * `GNS` - Guinean Syli
       * * `GYD` - Guyanaese Dollar
       * * `HTG` - Haitian Gourde
       * * `HNL` - Honduran Lempira
       * * `HKD` - Hong Kong Dollar
       * * `HUF` - Hungarian Forint
       * * `IMP` - IMP
       * * `ISK` - Icelandic Króna
       * * `ISJ` - Icelandic Króna (1918–1981)
       * * `INR` - Indian Rupee
       * * `IDR` - Indonesian Rupiah
       * * `IRR` - Iranian Rial
       * * `IQD` - Iraqi Dinar
       * * `IEP` - Irish Pound
       * * `ILS` - Israeli New Shekel
       * * `ILP` - Israeli Pound
       * * `ILR` - Israeli Shekel (1980–1985)
       * * `ITL` - Italian Lira
       * * `JMD` - Jamaican Dollar
       * * `JPY` - Japanese Yen
       * * `JOD` - Jordanian Dinar
       * * `KZT` - Kazakhstani Tenge
       * * `KES` - Kenyan Shilling
       * * `KWD` - Kuwaiti Dinar
       * * `KGS` - Kyrgystani Som
       * * `LAK` - Laotian Kip
       * * `LVL` - Latvian Lats
       * * `LVR` - Latvian Ruble
       * * `LBP` - Lebanese Pound
       * * `LSL` - Lesotho Loti
       * * `LRD` - Liberian Dollar
       * * `LYD` - Libyan Dinar
       * * `LTL` - Lithuanian Litas
       * * `LTT` - Lithuanian Talonas
       * * `LUL` - Luxembourg Financial Franc
       * * `LUC` - Luxembourgian Convertible Franc
       * * `LUF` - Luxembourgian Franc
       * * `MOP` - Macanese Pataca
       * * `MKD` - Macedonian Denar
       * * `MKN` - Macedonian Denar (1992–1993)
       * * `MGA` - Malagasy Ariary
       * * `MGF` - Malagasy Franc
       * * `MWK` - Malawian Kwacha
       * * `MYR` - Malaysian Ringgit
       * * `MVR` - Maldivian Rufiyaa
       * * `MVP` - Maldivian Rupee (1947–1981)
       * * `MLF` - Malian Franc
       * * `MTL` - Maltese Lira
       * * `MTP` - Maltese Pound
       * * `MRU` - Mauritanian Ouguiya
       * * `MRO` - Mauritanian Ouguiya (1973–2017)
       * * `MUR` - Mauritian Rupee
       * * `MXV` - Mexican Investment Unit
       * * `MXN` - Mexican Peso
       * * `MXP` - Mexican Silver Peso (1861–1992)
       * * `MDC` - Moldovan Cupon
       * * `MDL` - Moldovan Leu
       * * `MCF` - Monegasque Franc
       * * `MNT` - Mongolian Tugrik
       * * `MAD` - Moroccan Dirham
       * * `MAF` - Moroccan Franc
       * * `MZE` - Mozambican Escudo
       * * `MZN` - Mozambican Metical
       * * `MZM` - Mozambican Metical (1980–2006)
       * * `MMK` - Myanmar Kyat
       * * `NAD` - Namibian Dollar
       * * `NPR` - Nepalese Rupee
       * * `ANG` - Netherlands Antillean Guilder
       * * `TWD` - New Taiwan Dollar
       * * `NZD` - New Zealand Dollar
       * * `NIO` - Nicaraguan Córdoba
       * * `NIC` - Nicaraguan Córdoba (1988–1991)
       * * `NGN` - Nigerian Naira
       * * `KPW` - North Korean Won
       * * `NOK` - Norwegian Krone
       * * `OMR` - Omani Rial
       * * `PKR` - Pakistani Rupee
       * * `XPD` - Palladium
       * * `PAB` - Panamanian Balboa
       * * `PGK` - Papua New Guinean Kina
       * * `PYG` - Paraguayan Guarani
       * * `PEI` - Peruvian Inti
       * * `PEN` - Peruvian Sol
       * * `PES` - Peruvian Sol (1863–1965)
       * * `PHP` - Philippine Peso
       * * `XPT` - Platinum
       * * `PLN` - Polish Zloty
       * * `PLZ` - Polish Zloty (1950–1995)
       * * `PTE` - Portuguese Escudo
       * * `GWE` - Portuguese Guinea Escudo
       * * `QAR` - Qatari Rial
       * * `XRE` - RINET Funds
       * * `RHD` - Rhodesian Dollar
       * * `RON` - Romanian Leu
       * * `ROL` - Romanian Leu (1952–2006)
       * * `RUB` - Russian Ruble
       * * `RUR` - Russian Ruble (1991–1998)
       * * `RWF` - Rwandan Franc
       * * `SVC` - Salvadoran Colón
       * * `WST` - Samoan Tala
       * * `SAR` - Saudi Riyal
       * * `RSD` - Serbian Dinar
       * * `CSD` - Serbian Dinar (2002–2006)
       * * `SCR` - Seychellois Rupee
       * * `SLL` - Sierra Leonean Leone
       * * `XAG` - Silver
       * * `SGD` - Singapore Dollar
       * * `SKK` - Slovak Koruna
       * * `SIT` - Slovenian Tolar
       * * `SBD` - Solomon Islands Dollar
       * * `SOS` - Somali Shilling
       * * `ZAR` - South African Rand
       * * `ZAL` - South African Rand (financial)
       * * `KRH` - South Korean Hwan (1953–1962)
       * * `KRW` - South Korean Won
       * * `KRO` - South Korean Won (1945–1953)
       * * `SSP` - South Sudanese Pound
       * * `SUR` - Soviet Rouble
       * * `ESP` - Spanish Peseta
       * * `ESA` - Spanish Peseta (A account)
       * * `ESB` - Spanish Peseta (convertible account)
       * * `XDR` - Special Drawing Rights
       * * `LKR` - Sri Lankan Rupee
       * * `SHP` - St. Helena Pound
       * * `XSU` - Sucre
       * * `SDD` - Sudanese Dinar (1992–2007)
       * * `SDG` - Sudanese Pound
       * * `SDP` - Sudanese Pound (1957–1998)
       * * `SRD` - Surinamese Dollar
       * * `SRG` - Surinamese Guilder
       * * `SZL` - Swazi Lilangeni
       * * `SEK` - Swedish Krona
       * * `CHF` - Swiss Franc
       * * `SYP` - Syrian Pound
       * * `STN` - São Tomé & Príncipe Dobra
       * * `STD` - São Tomé & Príncipe Dobra (1977–2017)
       * * `TVD` - TVD
       * * `TJR` - Tajikistani Ruble
       * * `TJS` - Tajikistani Somoni
       * * `TZS` - Tanzanian Shilling
       * * `XTS` - Testing Currency Code
       * * `THB` - Thai Baht
       * * `XXX` - The codes assigned for transactions where no currency is involved
       * * `TPE` - Timorese Escudo
       * * `TOP` - Tongan Paʻanga
       * * `TTD` - Trinidad & Tobago Dollar
       * * `TND` - Tunisian Dinar
       * * `TRY` - Turkish Lira
       * * `TRL` - Turkish Lira (1922–2005)
       * * `TMT` - Turkmenistani Manat
       * * `TMM` - Turkmenistani Manat (1993–2009)
       * * `USD` - US Dollar
       * * `USN` - US Dollar (Next day)
       * * `USS` - US Dollar (Same day)
       * * `UGX` - Ugandan Shilling
       * * `UGS` - Ugandan Shilling (1966–1987)
       * * `UAH` - Ukrainian Hryvnia
       * * `UAK` - Ukrainian Karbovanets
       * * `AED` - United Arab Emirates Dirham
       * * `UYW` - Uruguayan Nominal Wage Index Unit
       * * `UYU` - Uruguayan Peso
       * * `UYP` - Uruguayan Peso (1975–1993)
       * * `UYI` - Uruguayan Peso (Indexed Units)
       * * `UZS` - Uzbekistani Som
       * * `VUV` - Vanuatu Vatu
       * * `VES` - Venezuelan Bolívar
       * * `VEB` - Venezuelan Bolívar (1871–2008)
       * * `VEF` - Venezuelan Bolívar (2008–2018)
       * * `VND` - Vietnamese Dong
       * * `VNN` - Vietnamese Dong (1978–1985)
       * * `CHE` - WIR Euro
       * * `CHW` - WIR Franc
       * * `XOF` - West African CFA Franc
       * * `YDD` - Yemeni Dinar
       * * `YER` - Yemeni Rial
       * * `YUN` - Yugoslavian Convertible Dinar (1990–1992)
       * * `YUD` - Yugoslavian Hard Dinar (1966–1990)
       * * `YUM` - Yugoslavian New Dinar (1994–2002)
       * * `YUR` - Yugoslavian Reformed Dinar (1992–1993)
       * * `ZWN` - ZWN
       * * `ZRN` - Zairean New Zaire (1993–1998)
       * * `ZRZ` - Zairean Zaire (1971–1993)
       * * `ZMW` - Zambian Kwacha
       * * `ZMK` - Zambian Kwacha (1968–2012)
       * * `ZWD` - Zimbabwean Dollar (1980–2008)
       * * `ZWR` - Zimbabwean Dollar (2008)
       * * `ZWL` - Zimbabwean Dollar (2009) 
       * @example USD
       */
      currency?: components["schemas"]["CurrencyEnum"] | null;
      /**
       * Format: decimal 
       * @description The vendor credit's exchange rate. 
       * @example 2.9
       */
      exchange_rate?: string | null;
      /**
       * Format: uuid 
       * @description The company the vendor credit belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
      /**
       * @example [
       *   {
       *     "remote_id": "121222",
       *     "net_amount": 25.54,
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "description": "Gifted Merge Credit",
       *     "account": "9d892439-5fab-4dbb-8bd8-34f7f96c7912",
       *     "company": "595c8f97-2ac4-45b7-b000-41bdf43240b5"
       *   },
       *   {
       *     "remote_id": "121223",
       *     "net_amount": 10,
       *     "tracking_category": "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *     "tracking_categories": [
       *       "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *       "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *       "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       *     ],
       *     "description": "Refund for overpayment",
       *     "account": "9d892439-5fab-4dbb-8bd8-34f7f96c7912"
       *   }
       * ]
       */
      lines?: (components["schemas"]["VendorCreditLine"])[];
      /** @description Indicates whether or not this object has been deleted by third party webhooks. */
      remote_was_deleted?: boolean;
      /**
       * @example {
       *   "organization_defined_targets": {
       *     "custom_key": "custom_value"
       *   },
       *   "linked_account_defined_targets": {
       *     "custom_key": "custom_value"
       *   }
       * }
       */
      field_mappings?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @example [
       *   {
       *     "path": "/actions",
       *     "data": [
       *       "Varies by platform"
       *     ]
       *   }
       * ]
       */
      remote_data?: readonly (components["schemas"]["RemoteData"])[] | null;
    };
    /**
     * @description # The VendorCreditLine Object
     * ### Description
     * The `VendorCreditLine` object is used to represent a vendor credit's line items.
     * 
     * ### Usage Example
     * Fetch from the `GET VendorCredit` endpoint and view the vendor credit's line items.
     */
    VendorCreditLine: {
      /**
       * @description The third-party API ID of the matching object. 
       * @example 121222
       */
      remote_id?: string | null;
      /**
       * Format: double 
       * @description The full value of the credit. 
       * @example 25.54
       */
      net_amount?: number | null;
      /**
       * Format: uuid 
       * @description The line's associated tracking category. 
       * @example b38c59b0-a9d7-4740-b1ee-5436c6751e3d
       */
      tracking_category?: string | null;
      /**
       * @description The line's associated tracking categories. 
       * @example [
       *   "b38c59b0-a9d7-4740-b1ee-5436c6751e3d",
       *   "9b840d2-686a-465a-8a8e-7b028498f8e4",
       *   "a47e11b6-c73b-4a0c-be31-130fc48177fa"
       * ]
       */
      tracking_categories: (string)[];
      /**
       * @description The line's description. 
       * @example Gifted Merge Credit
       */
      description?: string | null;
      /**
       * Format: uuid 
       * @description The line's account. 
       * @example 9d892439-5fab-4dbb-8bd8-34f7f96c7912
       */
      account?: string | null;
      /**
       * Format: uuid 
       * @description The company the line belongs to. 
       * @example 595c8f97-2ac4-45b7-b000-41bdf43240b5
       */
      company?: string | null;
    };
    WarningValidationProblem: {
      /**
       * @example {
       *   "pointer": "/age"
       * }
       */
      source?: components["schemas"]["ValidationProblemSource"];
      /** @example Unrecognized Field */
      title: string;
      /** @example An unrecognized field, age, was passed in with request data. */
      detail: string;
      /** @example UNRECOGNIZED_FIELD */
      problem_type: string;
    };
    WebhookReceiver: {
      event: string;
      is_active: boolean;
      key?: string;
    };
    WebhookReceiverRequest: {
      event: string;
      is_active: boolean;
      key?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  account_details_retrieve: {
    /** @description Get details for a linked account. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountDetails"];
        };
      };
    };
  };
  account_token_retrieve: {
    /** @description Returns the account token for the end user with the provided public token. */
    parameters: {
      path: {
        public_token: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountToken"];
        };
      };
    };
  };
  accounts_list: {
    /** @description Returns a list of `Account` objects. */
    parameters: {
        /** @description If provided, will only return accounts for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "classification" | "classification,status" | "status";
        remote_id?: string | null;
        show_enum_origins?: "classification" | "classification,status" | "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAccountList"];
        };
      };
    };
  };
  accounts_create: {
    /** @description Creates an `Account` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountEndpointRequest"];
        "multipart/form-data": components["schemas"]["AccountEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AccountResponse"];
        };
      };
    };
  };
  accounts_retrieve: {
    /** @description Returns an `Account` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "company";
        include_remote_data?: boolean;
        remote_fields?: "classification" | "classification,status" | "status";
        show_enum_origins?: "classification" | "classification,status" | "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
    };
  };
  accounts_meta_post_retrieve: {
    /** @description Returns metadata for `Account` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  addresses_retrieve: {
    /** @description Returns an `Address` object with the given `id`. */
    parameters: {
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        include_remote_data?: boolean;
        remote_fields?: "type";
        show_enum_origins?: "type";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
    };
  };
  attachments_list: {
    /** @description Returns a list of `AccountingAttachment` objects. */
    parameters: {
        /** @description If provided, will only return accounting attachments for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAccountingAttachmentList"];
        };
      };
    };
  };
  attachments_create: {
    /** @description Creates an `AccountingAttachment` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountingAttachmentEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AccountingAttachmentEndpointRequest"];
        "multipart/form-data": components["schemas"]["AccountingAttachmentEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AccountingAttachmentResponse"];
        };
      };
    };
  };
  attachments_retrieve: {
    /** @description Returns an `AccountingAttachment` object with the given `id`. */
    parameters: {
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountingAttachment"];
        };
      };
    };
  };
  attachments_meta_post_retrieve: {
    /** @description Returns metadata for `AccountingAttachment` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  available_actions_retrieve: {
    /** @description Returns a list of models and actions available for an account. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AvailableActions"];
        };
      };
    };
  };
  balance_sheets_list: {
    /** @description Returns a list of `BalanceSheet` objects. */
    parameters: {
        /** @description If provided, will only return balance sheets for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedBalanceSheetList"];
        };
      };
    };
  };
  balance_sheets_retrieve: {
    /** @description Returns a `BalanceSheet` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BalanceSheet"];
        };
      };
    };
  };
  cash_flow_statements_list: {
    /** @description Returns a list of `CashFlowStatement` objects. */
    parameters: {
        /** @description If provided, will only return cash flow statements for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCashFlowStatementList"];
        };
      };
    };
  };
  cash_flow_statements_retrieve: {
    /** @description Returns a `CashFlowStatement` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CashFlowStatement"];
        };
      };
    };
  };
  common_model_scopes_retrieve: {
    /** @description Fetch the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account. */
    parameters: {
        /** @description ID of specific linked account to fetch */
      query: {
        linked_account_id?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CommonModelScopes"];
        };
      };
    };
  };
  common_model_scopes_create: {
    /** @description Update the configuration of what data is saved by Merge when syncing. Common model scopes are set as a default across all linked accounts, but can be updated to have greater granularity per account. */
    parameters: {
        /** @description ID of specific linked account to fetch */
      query: {
        linked_account_id?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommonModelScopesUpdateSerializer"];
        "application/x-www-form-urlencoded": components["schemas"]["CommonModelScopesUpdateSerializer"];
        "multipart/form-data": components["schemas"]["CommonModelScopesUpdateSerializer"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CommonModelScopes"];
        };
      };
    };
  };
  company_info_list: {
    /** @description Returns a list of `CompanyInfo` objects. */
    parameters: {
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
      query: {
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "addresses" | "addresses,phone_numbers" | "phone_numbers";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCompanyInfoList"];
        };
      };
    };
  };
  company_info_retrieve: {
    /** @description Returns a `CompanyInfo` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "addresses" | "addresses,phone_numbers" | "phone_numbers";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CompanyInfo"];
        };
      };
    };
  };
  contacts_list: {
    /** @description Returns a list of `Contact` objects. */
    parameters: {
        /** @description If provided, will only return contacts for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "addresses" | "addresses,company" | "addresses,phone_numbers" | "addresses,phone_numbers,company" | "company" | "phone_numbers" | "phone_numbers,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "status";
        remote_id?: string | null;
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedContactList"];
        };
      };
    };
  };
  contacts_create: {
    /** @description Creates a `Contact` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContactEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ContactEndpointRequest"];
        "multipart/form-data": components["schemas"]["ContactEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ContactResponse"];
        };
      };
    };
  };
  contacts_retrieve: {
    /** @description Returns a `Contact` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "addresses" | "addresses,company" | "addresses,phone_numbers" | "addresses,phone_numbers,company" | "company" | "phone_numbers" | "phone_numbers,company";
        include_remote_data?: boolean;
        remote_fields?: "status";
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Contact"];
        };
      };
    };
  };
  contacts_meta_post_retrieve: {
    /** @description Returns metadata for `Contact` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  credit_notes_list: {
    /** @description Returns a list of `CreditNote` objects. */
    parameters: {
        /** @description If provided, will only return credit notes for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "line_items" | "payments" | "payments,line_items";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "status" | "status,type" | "type";
        remote_id?: string | null;
        show_enum_origins?: "status" | "status,type" | "type";
        transaction_date_after?: string | null;
        transaction_date_before?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCreditNoteList"];
        };
      };
    };
  };
  credit_notes_retrieve: {
    /** @description Returns a `CreditNote` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "line_items" | "payments" | "payments,line_items";
        include_remote_data?: boolean;
        remote_fields?: "status" | "status,type" | "type";
        show_enum_origins?: "status" | "status,type" | "type";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
    };
  };
  delete_account_create: {
    /** @description Delete a linked account. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      /** @description No response body */
      200: never;
    };
  };
  expenses_list: {
    /** @description Returns a list of `Expense` objects. */
    parameters: {
        /** @description If provided, will only return expenses for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "account" | "account,company" | "account,contact" | "account,contact,company" | "company" | "contact" | "contact,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
        transaction_date_after?: string | null;
        transaction_date_before?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExpenseList"];
        };
      };
    };
  };
  expenses_create: {
    /** @description Creates an `Expense` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExpenseEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ExpenseEndpointRequest"];
        "multipart/form-data": components["schemas"]["ExpenseEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExpenseResponse"];
        };
      };
    };
  };
  expenses_retrieve: {
    /** @description Returns an `Expense` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "account" | "account,company" | "account,contact" | "account,contact,company" | "company" | "contact" | "contact,company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
    };
  };
  expenses_meta_post_retrieve: {
    /** @description Returns metadata for `Expense` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  generate_key_create: {
    /** @description Create a remote key. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateRemoteKeyRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GenerateRemoteKeyRequest"];
        "multipart/form-data": components["schemas"]["GenerateRemoteKeyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RemoteKey"];
        };
      };
    };
  };
  income_statements_list: {
    /** @description Returns a list of `IncomeStatement` objects. */
    parameters: {
        /** @description If provided, will only return income statements for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIncomeStatementList"];
        };
      };
    };
  };
  income_statements_retrieve: {
    /** @description Returns an `IncomeStatement` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["IncomeStatement"];
        };
      };
    };
  };
  invoices_list: {
    /** @description Returns a list of `Invoice` objects. */
    parameters: {
        /** @description If provided, will only return invoices for this company. */
        /** @description If provided, will only return invoices for this contact. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
        /**
         * @description If provided, will only return Invoices with this type
         * 
         * * `ACCOUNTS_RECEIVABLE` - ACCOUNTS_RECEIVABLE
         * * `ACCOUNTS_PAYABLE` - ACCOUNTS_PAYABLE
         */
      query: {
        company_id?: string;
        contact_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company" | "contact" | "contact,company" | "line_items" | "line_items,company" | "line_items,contact" | "line_items,contact,company" | "payments" | "payments,company" | "payments,contact" | "payments,contact,company" | "payments,line_items" | "payments,line_items,company" | "payments,line_items,contact" | "payments,line_items,contact,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        issue_date_after?: string | null;
        issue_date_before?: string | null;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "type";
        remote_id?: string | null;
        show_enum_origins?: "type";
        type?: "ACCOUNTS_PAYABLE" | "ACCOUNTS_RECEIVABLE" | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedInvoiceList"];
        };
      };
    };
  };
  invoices_create: {
    /** @description Creates an `Invoice` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvoiceEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["InvoiceEndpointRequest"];
        "multipart/form-data": components["schemas"]["InvoiceEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InvoiceResponse"];
        };
      };
    };
  };
  invoices_retrieve: {
    /** @description Returns an `Invoice` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "company" | "contact" | "contact,company" | "line_items" | "line_items,company" | "line_items,contact" | "line_items,contact,company" | "payments" | "payments,company" | "payments,contact" | "payments,contact,company" | "payments,line_items" | "payments,line_items,company" | "payments,line_items,contact" | "payments,line_items,contact,company";
        include_remote_data?: boolean;
        remote_fields?: "type";
        show_enum_origins?: "type";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  invoices_meta_post_retrieve: {
    /** @description Returns metadata for `Invoice` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  issues_list: {
    /** @description Gets issues. */
    parameters: {
        /** @description The pagination cursor value. */
        /** @description If included, will only include issues whose most recent action occurred before this time */
        /** @description If provided, will only return issues whose first incident time was after this datetime. */
        /** @description If provided, will only return issues whose first incident time was before this datetime. */
        /** @description If True, will include muted issues */
        /** @description If provided, will only return issues whose first incident time was after this datetime. */
        /** @description If provided, will only return issues whose first incident time was before this datetime. */
        /** @description Number of results to return per page. */
        /** @description If included, will only include issues whose most recent action occurred after this time */
        /**
         * @description * `ONGOING` - ONGOING
         * * `RESOLVED` - RESOLVED
         * 
         * * `ONGOING` - ONGOING
         * * `RESOLVED` - RESOLVED
         */
      query: {
        account_token?: string;
        cursor?: string;
        end_date?: string;
        end_user_organization_name?: string;
        first_incident_time_after?: string | null;
        first_incident_time_before?: string | null;
        include_muted?: string;
        integration_name?: string;
        last_incident_time_after?: string | null;
        last_incident_time_before?: string | null;
        page_size?: number;
        start_date?: string;
        status?: "ONGOING" | "RESOLVED";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIssueList"];
        };
      };
    };
  };
  issues_retrieve: {
    /** @description Get a specific issue. */
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Issue"];
        };
      };
    };
  };
  items_list: {
    /** @description Returns a list of `Item` objects. */
    parameters: {
        /** @description If provided, will only return items for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company" | "purchase_account" | "purchase_account,company" | "purchase_account,sales_account" | "purchase_account,sales_account,company" | "sales_account" | "sales_account,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "status";
        remote_id?: string | null;
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedItemList"];
        };
      };
    };
  };
  items_retrieve: {
    /** @description Returns an `Item` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "company" | "purchase_account" | "purchase_account,company" | "purchase_account,sales_account" | "purchase_account,sales_account,company" | "sales_account" | "sales_account,company";
        include_remote_data?: boolean;
        remote_fields?: "status";
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Item"];
        };
      };
    };
  };
  journal_entries_list: {
    /** @description Returns a list of `JournalEntry` objects. */
    parameters: {
        /** @description If provided, will only return journal entries for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company" | "lines" | "lines,company" | "lines,payments" | "lines,payments,company" | "payments" | "payments,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
        transaction_date_after?: string | null;
        transaction_date_before?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedJournalEntryList"];
        };
      };
    };
  };
  journal_entries_create: {
    /** @description Creates a `JournalEntry` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JournalEntryEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JournalEntryEndpointRequest"];
        "multipart/form-data": components["schemas"]["JournalEntryEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["JournalEntryResponse"];
        };
      };
    };
  };
  journal_entries_retrieve: {
    /** @description Returns a `JournalEntry` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "company" | "lines" | "lines,company" | "lines,payments" | "lines,payments,company" | "payments" | "payments,company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JournalEntry"];
        };
      };
    };
  };
  journal_entries_meta_post_retrieve: {
    /** @description Returns metadata for `JournalEntry` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  link_token_create: {
    /** @description Creates a link token to be used when linking a new end user. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["EndUserDetailsRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EndUserDetailsRequest"];
        "multipart/form-data": components["schemas"]["EndUserDetailsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LinkToken"];
        };
      };
    };
  };
  linked_accounts_list: {
    /** @description List linked accounts for your organization. */
    parameters: {
        /**
         * @description * `hris` - hris
         * * `ats` - ats
         * * `accounting` - accounting
         * * `ticketing` - ticketing
         * * `crm` - crm
         * * `mktg` - mktg
         * * `filestorage` - filestorage
         * 
         * * `hris` - hris
         * * `ats` - ats
         * * `accounting` - accounting
         * * `ticketing` - ticketing
         * * `crm` - crm
         * * `mktg` - mktg
         * * `filestorage` - filestorage
         */
        /** @description The pagination cursor value. */
        /** @description If provided, will only return linked accounts associated with the given email address. */
        /** @description If provided, will only return linked accounts associated with the given organization name. */
        /** @description If provided, will only return linked accounts associated with the given origin ID. */
        /** @description Comma-separated list of EndUser origin IDs, making it possible to specify multiple EndUsers at once. */
        /** @description Comma-separated list of LinkedAccount IDs, making it possible to specify multiple LinkedAccounts at once. */
        /** @description If `true`, will include complete production duplicates of the account specified by the `id` query parameter in the response. `id` must be for a complete production linked account. */
        /** @description If provided, will only return linked accounts associated with the given integration name. */
        /** @description If included, will only include test linked accounts. If not included, will only include non-test linked accounts. */
        /** @description Number of results to return per page. */
        /** @description Filter by status. Options: `COMPLETE`, `INCOMPLETE`, `RELINK_NEEDED` */
      query: {
        category?: "accounting" | "ats" | "crm" | "filestorage" | "hris" | "mktg" | "ticketing" | null;
        cursor?: string;
        end_user_email_address?: string;
        end_user_organization_name?: string;
        end_user_origin_id?: string;
        end_user_origin_ids?: string;
        id?: string;
        ids?: string;
        include_duplicates?: boolean;
        integration_name?: string;
        is_test_account?: string;
        page_size?: number;
        status?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAccountDetailsAndActionsList"];
        };
      };
    };
  };
  passthrough_create: {
    /** @description Pull data from an endpoint not currently supported by Merge. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DataPassthroughRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DataPassthroughRequest"];
        "multipart/form-data": components["schemas"]["DataPassthroughRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RemoteResponse"];
        };
      };
    };
  };
  payments_list: {
    /** @description Returns a list of `Payment` objects. */
    parameters: {
        /** @description If provided, will only return payments for this account. */
        /** @description If provided, will only return payments for this company. */
        /** @description If provided, will only return payments for this contact. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
      query: {
        account_id?: string;
        company_id?: string;
        contact_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "account" | "account,company" | "company" | "contact" | "contact,account" | "contact,account,company" | "contact,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
        transaction_date_after?: string | null;
        transaction_date_before?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPaymentList"];
        };
      };
    };
  };
  payments_create: {
    /** @description Creates a `Payment` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PaymentEndpointRequest"];
        "multipart/form-data": components["schemas"]["PaymentEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PaymentResponse"];
        };
      };
    };
  };
  payments_retrieve: {
    /** @description Returns a `Payment` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "account" | "account,company" | "company" | "contact" | "contact,account" | "contact,account,company" | "contact,company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
    };
  };
  payments_meta_post_retrieve: {
    /** @description Returns metadata for `Payment` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  phone_numbers_retrieve: {
    /** @description Returns an `AccountingPhoneNumber` object with the given `id`. */
    parameters: {
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AccountingPhoneNumber"];
        };
      };
    };
  };
  purchase_orders_list: {
    /** @description Returns a list of `PurchaseOrder` objects. */
    parameters: {
        /** @description If provided, will only return purchase orders for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company" | "delivery_address" | "delivery_address,company" | "delivery_address,vendor" | "delivery_address,vendor,company" | "line_items" | "line_items,company" | "line_items,delivery_address" | "line_items,delivery_address,company" | "line_items,delivery_address,vendor" | "line_items,delivery_address,vendor,company" | "line_items,vendor" | "line_items,vendor,company" | "vendor" | "vendor,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        issue_date_after?: string | null;
        issue_date_before?: string | null;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "status";
        remote_id?: string | null;
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPurchaseOrderList"];
        };
      };
    };
  };
  purchase_orders_create: {
    /** @description Creates a `PurchaseOrder` object with the given values. */
    parameters: {
        /** @description Whether to include debug fields (such as log file links) in the response. */
        /** @description Whether or not third-party updates should be run asynchronously. */
      query: {
        is_debug_mode?: boolean;
        run_async?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PurchaseOrderEndpointRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PurchaseOrderEndpointRequest"];
        "multipart/form-data": components["schemas"]["PurchaseOrderEndpointRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PurchaseOrderResponse"];
        };
      };
    };
  };
  purchase_orders_retrieve: {
    /** @description Returns a `PurchaseOrder` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "company" | "delivery_address" | "delivery_address,company" | "delivery_address,vendor" | "delivery_address,vendor,company" | "line_items" | "line_items,company" | "line_items,delivery_address" | "line_items,delivery_address,company" | "line_items,delivery_address,vendor" | "line_items,delivery_address,vendor,company" | "line_items,vendor" | "line_items,vendor,company" | "vendor" | "vendor,company";
        include_remote_data?: boolean;
        remote_fields?: "status";
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PurchaseOrder"];
        };
      };
    };
  };
  purchase_orders_meta_post_retrieve: {
    /** @description Returns metadata for `PurchaseOrder` POSTs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetaResponse"];
        };
      };
    };
  };
  regenerate_key_create: {
    /** @description Exchange remote keys. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoteKeyForRegenerationRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["RemoteKeyForRegenerationRequest"];
        "multipart/form-data": components["schemas"]["RemoteKeyForRegenerationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RemoteKey"];
        };
      };
    };
  };
  selective_sync_configurations_list: {
    /** @description Get a linked account's selective syncs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["LinkedAccountSelectiveSyncConfiguration"])[];
        };
      };
    };
  };
  selective_sync_configurations_update: {
    /** @description Replace a linked account's selective syncs. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkedAccountSelectiveSyncConfigurationListRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["LinkedAccountSelectiveSyncConfiguration"])[];
        };
      };
    };
  };
  selective_sync_meta_list: {
    /** @description Get metadata for the conditions available to a linked account. */
    parameters: {
        /** @description The pagination cursor value. */
        /** @description Number of results to return per page. */
      query: {
        common_model?: string;
        cursor?: string;
        page_size?: number;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedConditionSchemaList"];
        };
      };
    };
  };
  sync_status_list: {
    /** @description Get syncing status. Possible values: `DISABLED`, `DONE`, `FAILED`, `PAUSED`, `SYNCING` */
    parameters: {
        /** @description The pagination cursor value. */
        /** @description Number of results to return per page. */
      query: {
        cursor?: string;
        page_size?: number;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSyncStatusList"];
        };
      };
    };
  };
  sync_status_resync_create: {
    /** @description Force re-sync of all models. This is available for all organizations via the dashboard. Force re-sync is also available for monthly and quarterly sync frequency customers on the Core, Professional, or Enterprise plans. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SyncStatus"])[];
        };
      };
    };
  };
  tax_rates_list: {
    /** @description Returns a list of `TaxRate` objects. */
    parameters: {
        /** @description If provided, will only return tax rates for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTaxRateList"];
        };
      };
    };
  };
  tax_rates_retrieve: {
    /** @description Returns a `TaxRate` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaxRate"];
        };
      };
    };
  };
  tracking_categories_list: {
    /** @description Returns a list of `TrackingCategory` objects. */
    parameters: {
        /** @description If provided, will only return tracking categories for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description The API provider's ID for the given object. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_fields?: "status";
        remote_id?: string | null;
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTrackingCategoryList"];
        };
      };
    };
  };
  tracking_categories_retrieve: {
    /** @description Returns a `TrackingCategory` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description Deprecated. Use show_enum_origins. */
        /** @description Which fields should be returned in non-normalized form. */
      query: {
        expand?: "company";
        include_remote_data?: boolean;
        remote_fields?: "status";
        show_enum_origins?: "status";
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrackingCategory"];
        };
      };
    };
  };
  transactions_list: {
    /** @description Returns a list of `Transaction` objects. */
    parameters: {
        /** @description If provided, will only return accounting transactions for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "account" | "contact" | "contact,account" | "line_items" | "line_items,account" | "line_items,contact" | "line_items,contact,account";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
        transaction_date_after?: string | null;
        transaction_date_before?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTransactionList"];
        };
      };
    };
  };
  transactions_retrieve: {
    /** @description Returns a `Transaction` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "account" | "contact" | "contact,account" | "line_items" | "line_items,account" | "line_items,contact" | "line_items,contact,account";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
    };
  };
  vendor_credits_list: {
    /** @description Returns a list of `VendorCredit` objects. */
    parameters: {
        /** @description If provided, will only return vendor credits for this company. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
        /** @description The pagination cursor value. */
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include data that was marked as deleted by third party webhooks. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
        /** @description If provided, will only return objects modified after this datetime. */
        /** @description If provided, will only return objects modified before this datetime. */
        /** @description Number of results to return per page. */
        /** @description The API provider's ID for the given object. */
        /** @description If provided, will only return objects created after this datetime. */
        /** @description If provided, will only return objects created before this datetime. */
      query: {
        company_id?: string;
        created_after?: string;
        created_before?: string;
        cursor?: string;
        expand?: "company" | "lines" | "lines,company" | "lines,vendor" | "lines,vendor,company" | "vendor" | "vendor,company";
        include_deleted_data?: boolean;
        include_remote_data?: boolean;
        modified_after?: string;
        modified_before?: string;
        page_size?: number;
        remote_id?: string | null;
        transaction_date_after?: string | null;
        transaction_date_before?: string | null;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedVendorCreditList"];
        };
      };
    };
  };
  vendor_credits_retrieve: {
    /** @description Returns a `VendorCredit` object with the given `id`. */
    parameters: {
        /** @description Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces. */
        /** @description Whether to include the original data Merge fetched from the third-party to produce these models. */
      query: {
        expand?: "company" | "lines" | "lines,company" | "lines,vendor" | "lines,vendor,company" | "vendor" | "vendor,company";
        include_remote_data?: boolean;
      };
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VendorCredit"];
        };
      };
    };
  };
  webhook_receivers_list: {
    /** @description Returns a list of `WebhookReceiver` objects. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["WebhookReceiver"])[];
        };
      };
    };
  };
  webhook_receivers_create: {
    /** @description Creates a `WebhookReceiver` object with the given values. */
    parameters: {
        /** @description Token identifying the end user. */
      header: {
        "X-Account-Token": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookReceiverRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["WebhookReceiverRequest"];
        "multipart/form-data": components["schemas"]["WebhookReceiverRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WebhookReceiver"];
        };
      };
    };
  };
}
