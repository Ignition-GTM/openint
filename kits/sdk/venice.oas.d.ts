/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Health check */
    get: operations['health']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/debug/raw-schemas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get raw schemas */
    get: operations['getRawSchemas']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connect/token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createConnectToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connect/magic-link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createMagicLink']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/passthrough': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['passthrough']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core/resource/{id}/source_sync': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['sourceSync']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core/resource': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['listResources']
    put?: never
    post: operations['createResource']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core/resource/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getResource']
    put?: never
    post?: never
    delete: operations['deleteResource']
    options?: never
    head?: never
    patch: operations['updateResource']
    trace?: never
  }
  '/core/connector_config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['adminListConnectorConfigs']
    put?: never
    post: operations['adminUpsertConnectorConfig']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core/connector_config/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['adminGetConnectorConfig']
    put?: never
    post?: never
    delete: operations['adminDeleteConnectorConfig']
    options?: never
    head?: never
    patch: operations['adminUpdateConnectorConfig']
    trace?: never
  }
  '/core/connector_config_info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['listConnectorConfigInfos']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connector': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get catalog of all available connectors */
    get: operations['listConnectorMetas']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connector/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getConnectorMeta']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connector/{name}/oas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getConnectorOpenApiSpec']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/connector/{name}/schemas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getConnectorSchemas']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core/pipeline': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['listPipelines']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core/pipeline/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete: operations['deletePipeline']
    options?: never
    head?: never
    patch: operations['updatePipeline']
    trace?: never
  }
  '/verticals/accounting/account': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-accounting-account_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/accounting/expense': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-accounting-expense_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/accounting/vendor': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-accounting-vendor_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/pta/account': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-pta-account_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/pta/transaction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-pta-transaction_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/pta/commodity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-pta-commodity_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/investment/account': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-investment-account_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/investment/transaction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-investment-transaction_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/investment/holding': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-investment-holding_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/investment/security': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-investment-security_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/sales-engagement/contacts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-salesEngagement-listContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/verticals/banking/category': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['verticals-banking-listCategories']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/viewer': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get current viewer accessing the API */
    get: operations['getViewer']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/openapi.json': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getOpenapiDocument']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * Error
     * @description The error information
     * @example {
     *       "code": "INTERNAL_SERVER_ERROR",
     *       "message": "Internal server error",
     *       "issues": []
     *     }
     */
    'error.INTERNAL_SERVER_ERROR': {
      /**
       * @description The error message
       * @example Internal server error
       */
      message: string
      /**
       * @description The error code
       * @example INTERNAL_SERVER_ERROR
       */
      code: string
      /**
       * @description An array of issues that were responsible for the error
       * @example []
       */
      issues?: {
        message: string
      }[]
    }
    /**
     * Error
     * @description The error information
     * @example {
     *       "code": "BAD_REQUEST",
     *       "message": "Invalid input data",
     *       "issues": []
     *     }
     */
    'error.BAD_REQUEST': {
      /**
       * @description The error message
       * @example Invalid input data
       */
      message: string
      /**
       * @description The error code
       * @example BAD_REQUEST
       */
      code: string
      /**
       * @description An array of issues that were responsible for the error
       * @example []
       */
      issues?: {
        message: string
      }[]
    }
    Resource: {
      createdAt: string
      updatedAt: string
      /** @description Must start with 'reso_' */
      id: string
      /** @description Unique name of the connector */
      connectorName: string
      displayName?: string | null
      endUserId?: string | null
      /** @description Must start with 'ccfg_' */
      connectorConfigId: string
      /** @description Must start with 'int_' */
      integrationId?: string | null
      settings?: {
        [key: string]: unknown
      } | null
      standard?: {
        displayName: string
        /** @enum {string|null} */
        status?: 'healthy' | 'disconnected' | 'error' | 'manual'
        statusMessage?: string | null
        labels?: string[]
      } | null
      disabled?: boolean
      /** @description
       *       JSON object can can be used to associate arbitrary metadata to
       *       avoid needing a separate 1-1 table just for simple key values in your application.
       *       During updates this object will be shallowly merged
       *      */
      metadata?: unknown
    }
    /**
     * Error
     * @description The error information
     * @example {
     *       "code": "NOT_FOUND",
     *       "message": "Not found",
     *       "issues": []
     *     }
     */
    'error.NOT_FOUND': {
      /**
       * @description The error message
       * @example Not found
       */
      message: string
      /**
       * @description The error code
       * @example NOT_FOUND
       */
      code: string
      /**
       * @description An array of issues that were responsible for the error
       * @example []
       */
      issues?: {
        message: string
      }[]
    }
    ConnectorConfig: {
      createdAt: string
      updatedAt: string
      /** @description Must start with 'ccfg_' */
      id: string
      connectorName: string
      config?: {
        [key: string]: unknown
      } | null
      /** @description Must start with 'org_' */
      orgId: string
      displayName?: string | null
      disabled?: boolean
      /** @description Automatically sync data from any resources associated with this config to the destination resource, which is typically a Postgres database. Think ETL */
      defaultPipeOut?: {
        streams?: {
          [key: string]: boolean | undefined
        } | null
        /** @description Array of transformations that the data gets piped through on the way out. Typically used for things like unification / normalization. */
        links?: components['schemas']['Link'][] | null
        /** @description Must start with 'reso_' */
        destination_id: string
      } | null
      /** @description Automatically sync data from any resources associated with this config to the destination resource, which is typically a Postgres database. Think ETL */
      defaultPipeIn?: {
        /** @description Array of transformations that the data gets piped through on the way out. Typically used for things like unification / normalization. */
        links?: components['schemas']['Link'][] | null
        /** @description Must start with 'reso_' */
        source_id: string
      } | null
      envName?: string | null
      /** @description
       *       JSON object can can be used to associate arbitrary metadata to
       *       avoid needing a separate 1-1 table just for simple key values in your application.
       *       During updates this object will be shallowly merged
       *      */
      metadata?: unknown
    }
    /** @enum {string} */
    Link: 'banking'
    Pipeline: {
      createdAt: string
      updatedAt: string
      /** @description Must start with 'pipe_' */
      id: string
      /** @description Must start with 'reso_' */
      sourceId?: string
      sourceState?: {
        [key: string]: unknown
      }
      /** @description Must start with 'reso_' */
      destinationId?: string
      destinationState?: {
        [key: string]: unknown
      }
      linkOptions?: unknown[] | null
      lastSyncStartedAt?: string | null
      lastSyncCompletedAt?: string | null
      disabled?: boolean
      /** @description
       *       JSON object can can be used to associate arbitrary metadata to
       *       avoid needing a separate 1-1 table just for simple key values in your application.
       *       During updates this object will be shallowly merged
       *      */
      metadata?: unknown
    }
    'sales-engagement.contact': {
      id: string
      first_name: string
      last_name: string
    }
    'banking.category': {
      id: string
      name: string
    }
    Viewer:
      | {
          /** @enum {string} */
          role: 'anon'
        }
      | {
          /** @enum {string} */
          role: 'end_user'
          endUserId: string
          /** @description Must start with 'org_' */
          orgId: string
        }
      | {
          /** @enum {string} */
          role: 'user'
          /** @description Must start with 'user_' */
          userId: string
          /** @description Must start with 'org_' */
          orgId?: string | null
          /** @description Currently clerk user */
          extra?: {
            [key: string]: unknown
          }
        }
      | {
          /** @enum {string} */
          role: 'org'
          /** @description Must start with 'org_' */
          orgId: string
          /** @description Currently clerk organization */
          extra?: {
            [key: string]: unknown
          }
        }
      | {
          /** @enum {string} */
          role: 'system'
        }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  health: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getRawSchemas: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  createConnectToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Anything that uniquely identifies the end user that you will be sending the magic link to */
          endUserId?: string
          /**
           * @description How long the magic link will be valid for (in seconds) before it expires
           * @default 3600
           */
          validityInSeconds: number
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            token: string
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  createMagicLink: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Anything that uniquely identifies the end user that you will be sending the magic link to */
          endUserId?: string
          /**
           * @description How long the magic link will be valid for (in seconds) before it expires
           * @default 3600
           */
          validityInSeconds: number
          /** @description What to call user by */
          displayName?: string | null
          /** @description Where to send user to after connect / if they press back button */
          redirectUrl?: string | null
          /** @description Filter connector config by connector name */
          connectorName?: string | null
          /** @description Filter connector config by displayName  */
          connectorConfigDisplayName?: string | null
          /** @description Must start with 'ccfg_' */
          connectorConfigId?: string
          /** @default true */
          showExisting: boolean
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            url: string
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  passthrough: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS'
          path: string
          query?: {
            [key: string]: unknown
          }
          headers?: {
            [key: string]: unknown
          }
          body?: {
            [key: string]: unknown
          }
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  sourceSync: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          state?: {
            [key: string]: unknown
          }
          streams?: {
            [key: string]: boolean | undefined
          }
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: unknown
          }[]
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  listResources: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
        endUserId?: string | null
        connectorConfigId?: string | null
        connectorName?: string | null
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Resource'][]
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  createResource: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Must start with 'ccfg_' */
          connectorConfigId: string
          settings?: {
            [key: string]: unknown
          } | null
          displayName?: string | null
          endUserId?: string | null
          disabled?: boolean
          /** @description
           *       JSON object can can be used to associate arbitrary metadata to
           *       avoid needing a separate 1-1 table just for simple key values in your application.
           *       During updates this object will be shallowly merged
           *      */
          metadata?: unknown
          /** @description Must start with 'int_' */
          integrationId?: string | null
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getResource: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Resource']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  deleteResource: {
    parameters: {
      query?: {
        skipRevoke?: boolean
      }
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  updateResource: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          settings?: {
            [key: string]: unknown
          } | null
          displayName?: string | null
          /** @description
           *       JSON object can can be used to associate arbitrary metadata to
           *       avoid needing a separate 1-1 table just for simple key values in your application.
           *       During updates this object will be shallowly merged
           *      */
          metadata?: unknown
          disabled?: boolean
          endUserId?: string | null
          /** @description Must start with 'int_' */
          integrationId?: string | null
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Resource']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  adminListConnectorConfigs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConnectorConfig'][]
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  adminUpsertConnectorConfig: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Must start with 'ccfg_' */
          id?: string
          connectorName?: string
          /** @description Must start with 'org_' */
          orgId: string
          config?: {
            [key: string]: unknown
          } | null
          displayName?: string | null
          /** @description Automatically sync data from any resources associated with this config to the destination resource, which is typically a Postgres database. Think ETL */
          defaultPipeOut?: {
            streams?: {
              [key: string]: boolean | undefined
            } | null
            /** @description Array of transformations that the data gets piped through on the way out. Typically used for things like unification / normalization. */
            links?: components['schemas']['Link'][] | null
            /** @description Must start with 'reso_' */
            destination_id: string
          } | null
          /** @description Automatically sync data from any resources associated with this config to the destination resource, which is typically a Postgres database. Think ETL */
          defaultPipeIn?: {
            /** @description Array of transformations that the data gets piped through on the way out. Typically used for things like unification / normalization. */
            links?: components['schemas']['Link'][] | null
            /** @description Must start with 'reso_' */
            source_id: string
          } | null
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConnectorConfig']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  adminGetConnectorConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConnectorConfig']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  adminDeleteConnectorConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  adminUpdateConnectorConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description
           *       JSON object can can be used to associate arbitrary metadata to
           *       avoid needing a separate 1-1 table just for simple key values in your application.
           *       During updates this object will be shallowly merged
           *      */
          metadata?: unknown
          displayName?: string | null
          disabled?: boolean
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConnectorConfig']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  listConnectorConfigInfos: {
    parameters: {
      query?: {
        type?: 'source' | 'destination'
        id?: string | null
        connectorName?: string | null
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Must start with 'ccfg_' */
            id: string
            envName?: string | null
            displayName?: string | null
            connectorName: string
            isSource: boolean
            isDestination: boolean
          }[]
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  listConnectorMetas: {
    parameters: {
      query?: {
        includeOas?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getConnectorMeta: {
    parameters: {
      query?: {
        includeOas?: boolean
      }
      header?: never
      path: {
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getConnectorOpenApiSpec: {
    parameters: {
      query?: {
        original?: boolean
      }
      header?: never
      path: {
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getConnectorSchemas: {
    parameters: {
      query?: {
        type?: string
      }
      header?: never
      path: {
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  listPipelines: {
    parameters: {
      query?: {
        limit?: number
        offset?: number
        resourceIds?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Pipeline'][]
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  deletePipeline: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': true
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  updatePipeline: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description
           *       JSON object can can be used to associate arbitrary metadata to
           *       avoid needing a separate 1-1 table just for simple key values in your application.
           *       During updates this object will be shallowly merged
           *      */
          metadata?: unknown
          disabled?: boolean
        }
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Pipeline']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-accounting-account_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              number?: string | null
              name: string
              type: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-accounting-expense_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              amount: number
              currency: string
              payment_account: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-accounting-vendor_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              name: string
              url: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-pta-account_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-pta-transaction_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-pta-commodity_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-investment-account_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              name: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-investment-transaction_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-investment-holding_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-investment-security_list': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: {
              id: string
              _original?: unknown
            }[]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-salesEngagement-listContacts': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: components['schemas']['sales-engagement.contact'][]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  'verticals-banking-listCategories': {
    parameters: {
      query?: {
        limit?: number
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            hasNextPage: boolean
            items: components['schemas']['banking.category'][]
          }
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.BAD_REQUEST']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.NOT_FOUND']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getViewer: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Viewer']
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
  getOpenapiDocument: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['error.INTERNAL_SERVER_ERROR']
        }
      }
    }
  }
}
