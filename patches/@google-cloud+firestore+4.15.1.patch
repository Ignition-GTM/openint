diff --git a/node_modules/@google-cloud/firestore/build/src/document.js b/node_modules/@google-cloud/firestore/build/src/document.js
index b21966d..f6f889d 100644
--- a/node_modules/@google-cloud/firestore/build/src/document.js
+++ b/node_modules/@google-cloud/firestore/build/src/document.js
@@ -678,7 +678,7 @@ class DocumentMask {
                 let result = null;
                 Object.keys(currentData).forEach(key => {
                     const childPath = currentPath
-                        ? currentPath.append(key)
+                        ? currentPath.append(new path_1.FieldPath(key))
                         : new path_1.FieldPath(key);
                     if (this.contains(childPath)) {
                         DocumentMask.removeFromSortedArray(remainingPaths, [childPath]);
diff --git a/node_modules/@google-cloud/firestore/types/firestore.d.ts b/node_modules/@google-cloud/firestore/types/firestore.d.ts
index 558ae81..4f65030 100644
--- a/node_modules/@google-cloud/firestore/types/firestore.d.ts
+++ b/node_modules/@google-cloud/firestore/types/firestore.d.ts
@@ -40,7 +40,9 @@ declare namespace FirebaseFirestore {
    * key (e.g. `foo.bar`). This nested field update replaces the contents at
    * `bar` but does not modify other data under `foo`.
    */
-  export type UpdateData = {[fieldPath: string]: any};
+   export type UpdateData<T, U> = Exclude<keyof U, keyof T> extends never
+     ? {[K in keyof U]?: U[K] | FieldValue}
+     : {[K in keyof T]?: T[K] | FieldValue};
 
   /**
    * Sets or disables the log function for all active Firestore instances.
@@ -228,7 +230,7 @@ declare namespace FirebaseFirestore {
      * @param collectionPath A slash-separated path to a collection.
      * @return The `CollectionReference` instance.
      */
-    collection(collectionPath: string): CollectionReference<DocumentData>;
+    collection<T>(collectionPath: string): CollectionReference<T>;
 
     /**
      * Gets a `DocumentReference` instance that refers to the document at the
@@ -237,7 +239,7 @@ declare namespace FirebaseFirestore {
      * @param documentPath A slash-separated path to a document.
      * @return The `DocumentReference` instance.
      */
-    doc(documentPath: string): DocumentReference<DocumentData>;
+    doc<T>(documentPath: string): DocumentReference<T>;
 
     /**
      * Creates and returns a new Query that includes all documents in the
@@ -249,7 +251,7 @@ declare namespace FirebaseFirestore {
      * will be included. Cannot contain a slash.
      * @return The created `CollectionGroup`.
      */
-    collectionGroup(collectionId: string): CollectionGroup<DocumentData>;
+    collectionGroup<T>(collectionId: string): CollectionGroup<T>;
 
     /**
      * Retrieves multiple documents from Firestore.
@@ -264,11 +266,11 @@ declare namespace FirebaseFirestore {
      * @return A Promise that resolves with an array of resulting document
      * snapshots.
      */
-    getAll(
+    getAll<T>(
       ...documentRefsOrReadOptions: Array<
-        DocumentReference<DocumentData> | ReadOptions
+        DocumentReference<T> | ReadOptions
       >
-    ): Promise<Array<DocumentSnapshot<DocumentData>>>;
+    ): Promise<Array<DocumentSnapshot<T>>>;
 
     /**
      * Recursively deletes all documents and subcollections at and under the
@@ -506,7 +508,7 @@ declare namespace FirebaseFirestore {
      */
     set<T>(
       documentRef: DocumentReference<T>,
-      data: Partial<T>,
+      data: import('@alka/util').ObjectPartialDeep<T>,
       options: SetOptions
     ): Transaction;
     set<T>(documentRef: DocumentReference<T>, data: T): Transaction;
@@ -525,9 +527,9 @@ declare namespace FirebaseFirestore {
      * @param precondition A Precondition to enforce on this update.
      * @return This `Transaction` instance. Used for chaining method calls.
      */
-    update(
-      documentRef: DocumentReference<any>,
-      data: UpdateData,
+    update<T, U>(
+      documentRef: DocumentReference<T>,
+      data: UpdateData<T, U>,
       precondition?: Precondition
     ): Transaction;
 
@@ -550,10 +552,10 @@ declare namespace FirebaseFirestore {
      * update.
      * @return This `Transaction` instance. Used for chaining method calls.
      */
-    update(
-      documentRef: DocumentReference<any>,
+    update<T, U>(
+      documentRef: DocumentReference<T>,
       field: string | FieldPath,
-      value: any,
+      value: U,
       ...fieldsOrPrecondition: any[]
     ): Transaction;
 
@@ -636,7 +638,7 @@ declare namespace FirebaseFirestore {
      */
     set<T>(
       documentRef: DocumentReference<T>,
-      data: Partial<T>,
+      data: import('@alka/util').ObjectPartialDeep<T>,
       options: SetOptions
     ): Promise<WriteResult>;
     set<T>(documentRef: DocumentReference<T>, data: T): Promise<WriteResult>;
@@ -664,9 +666,9 @@ declare namespace FirebaseFirestore {
      * write fails, the promise is rejected with a
      * [BulkWriterError]{@link BulkWriterError}.
      */
-    update(
-      documentRef: DocumentReference<any>,
-      data: UpdateData,
+    update<T, U>(
+      documentRef: DocumentReference<T>,
+      data: UpdateData<T, U>,
       precondition?: Precondition
     ): Promise<WriteResult>;
 
@@ -694,10 +696,10 @@ declare namespace FirebaseFirestore {
      * write fails, the promise is rejected with a
      * [BulkWriterError]{@link BulkWriterError}.
      */
-    update(
-      documentRef: DocumentReference<any>,
+    update<T, U>(
+      documentRef: DocumentReference<T>,
       field: string | FieldPath,
-      value: any,
+      value: U,
       ...fieldsOrPrecondition: any[]
     ): Promise<WriteResult>;
 
@@ -849,7 +851,7 @@ declare namespace FirebaseFirestore {
      */
     set<T>(
       documentRef: DocumentReference<T>,
-      data: Partial<T>,
+      data: import('@alka/util').ObjectPartialDeep<T>,
       options: SetOptions
     ): WriteBatch;
     set<T>(documentRef: DocumentReference<T>, data: T): WriteBatch;
@@ -868,9 +870,9 @@ declare namespace FirebaseFirestore {
      * @param precondition A Precondition to enforce on this update.
      * @return This `WriteBatch` instance. Used for chaining method calls.
      */
-    update(
-      documentRef: DocumentReference<any>,
-      data: UpdateData,
+    update<T, U>(
+      documentRef: DocumentReference<T>,
+      data: UpdateData<T, U>,
       precondition?: Precondition
     ): WriteBatch;
 
@@ -892,10 +894,10 @@ declare namespace FirebaseFirestore {
      * to update, optionally followed a `Precondition` to enforce on this update.
      * @return This `WriteBatch` instance. Used for chaining method calls.
      */
-    update(
-      documentRef: DocumentReference<any>,
+    update<T, U>(
+      documentRef: DocumentReference<T>,
       field: string | FieldPath,
-      value: any,
+      value: U,
       ...fieldsOrPrecondition: any[]
     ): WriteBatch;
 
@@ -1037,7 +1039,7 @@ declare namespace FirebaseFirestore {
      * @param collectionPath A slash-separated path to a collection.
      * @return The `CollectionReference` instance.
      */
-    collection(collectionPath: string): CollectionReference<DocumentData>;
+    collection<U>(collectionPath: string): CollectionReference<U>;
 
     /**
      * Fetches the subcollections that are direct children of this document.
@@ -1064,7 +1066,7 @@ declare namespace FirebaseFirestore {
      * @param options An object to configure the set behavior.
      * @return A Promise resolved with the write time of this set.
      */
-    set(data: Partial<T>, options: SetOptions): Promise<WriteResult>;
+    set(data: import('@alka/util').ObjectPartialDeep<T>, options: SetOptions): Promise<WriteResult>;
     set(data: T): Promise<WriteResult>;
 
     /**
@@ -1079,7 +1081,7 @@ declare namespace FirebaseFirestore {
      * @param precondition A Precondition to enforce on this update.
      * @return A Promise resolved with the write time of this update.
      */
-    update(data: UpdateData, precondition?: Precondition): Promise<WriteResult>;
+    update<U>(data: UpdateData<T, U>, precondition?: Precondition): Promise<WriteResult>;
 
     /**
      * Updates fields in the document referred to by this `DocumentReference`.
@@ -1098,9 +1100,9 @@ declare namespace FirebaseFirestore {
      * this update.
      * @return A Promise resolved with the write time of this update.
      */
-    update(
+    update<U>(
       field: string | FieldPath,
-      value: any,
+      value: U,
       ...moreFieldsOrPrecondition: any[]
     ): Promise<WriteResult>;
 
@@ -1388,7 +1390,7 @@ declare namespace FirebaseFirestore {
      * @param field The field paths to return.
      * @return The created Query.
      */
-    select(...field: (string | FieldPath)[]): Query<DocumentData>;
+    select<T>(...field: (string | FieldPath)[]): Query<T>;
 
     /**
      * Creates and returns a new Query that starts at the provided document
