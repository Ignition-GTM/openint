{
  "components": {
    "schemas": {
      "AccountBalance": {
        "properties": {
          "account_id": {
            "example": "checking_account_202348",
            "type": "string"
          },
          "batch_closing_balance": {
            "description": "The closing balance for this account after the transactions in this batch",
            "example": 25000.45,
            "type": "number"
          }
        },
        "required": ["account_id", "batch_closing_balance"],
        "type": "object"
      },
      "Annotation": {
        "properties": {
          "annotator": {
            "allOf": [{"$ref": "#/components/schemas/AnnotatorPublic"}],
            "readOnly": true
          },
          "category": {
            "allOf": [{"$ref": "#/components/schemas/Category1"}],
            "readOnly": true
          },
          "confidence": {"readOnly": true, "type": "number"},
          "model_version": {"readOnly": true, "type": "string"}
        },
        "type": "object"
      },
      "AnnotatorPublic": {
        "properties": {
          "context": {
            "enum": ["sync", "async_", "manual", "undetermined"],
            "type": "string"
          },
          "priority_type": {
            "enum": [
              "gold_standard",
              "client_feedback",
              "tagging_ui",
              "reconcile",
              "heuristic",
              "classifier",
              "undetermined"
            ],
            "type": "string"
          }
        },
        "required": ["context", "priority_type"],
        "type": "object"
      },
      "AnomalyParams": {
        "properties": {
          "category_label_or_heron_id": {
            "description": "Label or Heron ID of category to find anomalies for",
            "example": "Revenue",
            "type": "string"
          }
        },
        "required": ["category_label_or_heron_id"],
        "type": "object"
      },
      "AnomalySchema": {
        "properties": {
          "amount": {
            "description": "Converted amount of transaction in currency",
            "example": 42.42,
            "type": "number"
          },
          "anomaly_score": {
            "description": "Anomaly score 0-1, where 1 is very anomalous, and 0 is not anomalous",
            "example": 0.5,
            "type": "number"
          },
          "currency": {
            "description": "Currency code for amount that transaction was converted to",
            "example": "USD",
            "type": "string"
          },
          "heron_id": {
            "description": "Heron ID of the Transaction",
            "example": "txn_mA4FFgbgPPxEWisxVGpgPB",
            "type": "string"
          },
          "reference_id": {
            "description": "Customer-provided reference ID for the Transaction",
            "example": "1342db06-feb7-4c33-a157-4351d74a98e9",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkCategoryFeedback": {
        "properties": {
          "category": {"$ref": "#/components/schemas/CategoryFeedback"},
          "source": {
            "default": null,
            "description": "your identifier for where the feedback comes from e.g. bob_the_underwriter",
            "maxLength": 120,
            "nullable": true,
            "type": "string"
          },
          "transaction_heron_id": {
            "description": "heron id of transaction",
            "example": "txn_TzPhPLvuyEjsAS5wSjMRqU",
            "type": "string"
          }
        },
        "required": ["transaction_heron_id"],
        "type": "object"
      },
      "Category": {
        "properties": {
          "created": {
            "description": "Timestamp for when the category was created",
            "example": "2023-04-11T16:52:51.110354",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {"nullable": true, "type": "string"},
          "heron_id": {
            "description": "Unique ID of the category generated by Heron Data",
            "example": "ctg_UXGt4J9UBCE84FxtRjZhmi",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "description": "The label of the category",
            "example": "Rent",
            "type": "string"
          }
        },
        "required": ["label"],
        "type": "object"
      },
      "Category1": {
        "properties": {
          "heron_id": {
            "description": "Unique ID of the category generated by Heron Data",
            "example": "ctg_UXGt4J9UBCE84FxtRjZhmi",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "description": "The label of the category",
            "example": "Rent",
            "type": "string"
          }
        },
        "required": ["label"],
        "type": "object"
      },
      "CategoryFeedback": {
        "properties": {
          "heron_id": {
            "description": "heron_id of the correct category",
            "example": "ctg_F9L9CmF9dHJBfu4rqwajqx",
            "type": "string"
          },
          "label": {
            "description": "label of the correct category",
            "example": "Insurance",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteTransactionParams": {
        "properties": {
          "account_id": {
            "default": null,
            "description": "account_id of transactions to be deleted",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id of transactions to be deleted",
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "default": null,
            "description": "(legacy) Heron ID of transaction to be deleted",
            "example": "txn_kDTPmuRwYLtYKoKSK95TJ7",
            "nullable": true,
            "type": "string"
          },
          "heron_ids": {
            "default": [],
            "description": "Heron IDs of transactions to be deleted",
            "items": {"type": "string"},
            "type": "array"
          },
          "only_duplicates": {
            "default": null,
            "description": "if true, deletes only transactions that are marked as duplicates",
            "nullable": true,
            "type": "boolean"
          },
          "reference_ids": {
            "default": [],
            "description": "Reference IDs of transactions to be deleted",
            "items": {"type": "string"},
            "type": "array"
          },
          "request_id": {
            "default": null,
            "description": "Request ID of transactions to be deleted",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUser": {
        "properties": {
          "confidence": {
            "description": "Aggregated confidence for the end user across all transactions; between 0 and 1",
            "example": 0.42,
            "readOnly": true,
            "type": "number"
          },
          "created": {
            "description": "When the end user was created in Heron system",
            "example": "2023-02-28T16:52:51.315557",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "criteria": {
            "description": "List of scorecard metrics",
            "items": {"$ref": "#/components/schemas/Metric"},
            "readOnly": true,
            "type": "array"
          },
          "end_user_id": {
            "description": "id defined by user; links to the end_user_id for transactions",
            "example": "c534d093-6a0a-4925-ab41-b5d096cf45e7",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for end user generated by Heron",
            "example": "eus_GRNvAkyu3NmAPMLq8aqBFc",
            "readOnly": true,
            "type": "string"
          },
          "is_portfolio": {
            "description": "Whether the end user is part of a lending portfolio",
            "example": true,
            "type": "boolean"
          },
          "last_updated": {
            "description": "When the end user was last updated in Heron system",
            "example": "2023-04-11T16:52:51.315605",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of end user; may help to improve categorisation accuracy",
            "example": "Company Name Inc.",
            "nullable": true,
            "type": "string"
          },
          "profit_and_loss_layout": {"nullable": true, "writeOnly": true},
          "status": {
            "description": "Status of end user; 'ready' triggers async processing, 'review_requested' triggers manual review request",
            "enum": ["new", "ready", "review_requested", "reviewed"],
            "example": "ready",
            "type": "string"
          }
        },
        "required": ["end_user_id"],
        "type": "object"
      },
      "EndUser1": {
        "properties": {
          "heron_id": {
            "description": "Unique id for end user generated by Heron",
            "example": "eus_GRNvAkyu3NmAPMLq8aqBFc",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserAccountBalance": {
        "properties": {
          "account_id": {
            "description": "Account associated with balance",
            "type": "string"
          },
          "balance": {"description": "Balance amount", "type": "number"},
          "balance_converted": {
            "description": "Converted balance amount in target currency",
            "type": "number"
          },
          "currency": {
            "description": "ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "currency_converted": {
            "description": "Conversion currency code. ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "is_computed": {
            "description": "Whether the balance has been imputed using forward fill",
            "type": "boolean"
          },
          "is_latest": {
            "description": "Whether the date is the latest non-imputed balance for the account",
            "type": "boolean"
          },
          "timestamp": {
            "description": "Timestamp of the latest transaction",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserAccountBalanceForecast": {
        "properties": {
          "account_id": {"type": "string"},
          "balances": {
            "items": {"$ref": "#/components/schemas/EndUserBalanceForecast"},
            "type": "array"
          },
          "currency": {"type": "string"}
        },
        "type": "object"
      },
      "EndUserBalanceForecast": {
        "properties": {
          "date": {
            "description": "Forecast date at specified date granularity",
            "example": "2023-04-11",
            "type": "string"
          },
          "predicted": {
            "description": "Predicted converted balance",
            "example": 42.42,
            "type": "number"
          },
          "predicted_lower": {
            "description": "Predict amount lower bound",
            "example": 4.24,
            "type": "number"
          },
          "predicted_upper": {
            "description": "Predicted amount upper bound",
            "example": 420.42,
            "type": "number"
          }
        },
        "type": "object"
      },
      "EndUserBalanceInputParams": {
        "properties": {
          "end_user_heron_id": {
            "default": null,
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "example": "eus_UcRkA5fL7EMypdS8vqKJ7Y",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "include_forecast": {
            "default": false,
            "description": "If true, forecasts the balances of each account",
            "type": "boolean"
          },
          "timestamp_max": {
            "default": null,
            "description": "Filter for transactions with timestamp earlier than the input value",
            "example": "2023-04-10T16:52:51.269338",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "timestamp_min": {
            "default": null,
            "description": "Filter for transactions with timestamp after the input value",
            "example": "2023-04-11T16:52:51.269300",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "to_currency": {
            "description": "ISO 4217 currency code to convert to",
            "enum": ["USD", "EUR", "GBP"],
            "example": "USD",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserBalanceOutputSchema": {
        "properties": {
          "daily_balances": {
            "items": {"$ref": "#/components/schemas/EndUserDailyBalance"},
            "type": "array"
          },
          "forecasted": {
            "items": {
              "$ref": "#/components/schemas/EndUserAccountBalanceForecast"
            },
            "type": "array"
          },
          "summary": {"$ref": "#/components/schemas/EndUserDailyBalance"}
        },
        "type": "object"
      },
      "EndUserDailyBalance": {
        "properties": {
          "accounts": {
            "items": {"$ref": "#/components/schemas/EndUserAccountBalance"},
            "type": "array"
          },
          "balance": {"description": "Balance amount", "type": "number"},
          "currency": {
            "description": "ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "Date of balance",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserForecastInputParams": {
        "properties": {
          "category_heron_id": {
            "description": "Heron ID of category to be forecasted; either category_heron_id or category_label must be present",
            "example": "ctg_FfznrqHBEnU8HsmB9txpyx",
            "type": "string"
          },
          "category_label": {
            "description": "Label of category to be forecasted; either category_heron_id or category_label must be present",
            "example": "Revenue",
            "type": "string"
          },
          "date_granularity": {
            "default": "month",
            "description": "Aggregate results over time, i.e., aggregate by week or by month",
            "enum": ["week", "month"],
            "example": "month",
            "type": "string"
          },
          "end_user_heron_id": {
            "default": null,
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "example": "eus_UcRkA5fL7EMypdS8vqKJ7Y",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "from_date": {
            "default": null,
            "description": "The earliest transaction timestamp date to use in forecasting",
            "example": "2022-01-01",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "to_currency": {
            "description": "ISO 4217 currency code to convert to",
            "enum": ["USD", "EUR", "GBP"],
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "default": null,
            "description": "The latest transaction timestamp date to use in forecasting",
            "example": "2022-01-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserForecastOutputSchema": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "Forecast date at specified date granularity",
            "example": "2023-04-11",
            "type": "string"
          },
          "predicted": {
            "description": "Predicted amount",
            "example": 42.42,
            "type": "number"
          },
          "predicted_lower": {
            "description": "Predict amount lower bound",
            "example": 4.24,
            "type": "number"
          },
          "predicted_upper": {
            "description": "Predicted amount upper bound",
            "example": 420.42,
            "type": "number"
          }
        },
        "type": "object"
      },
      "EndUserReadEnrichedParams": {
        "properties": {
          "last_updated_min": {
            "default": null,
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat",
            "example": "2023-04-11T16:52:51.317998",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "page": {
            "default": 1,
            "description": "Results page",
            "minimum": 1,
            "type": "integer"
          },
          "per_page": {
            "default": 100,
            "description": "Desired results per page",
            "maximum": 50000,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EndUserReadParams": {
        "properties": {
          "criteria": {
            "default": null,
            "description": "Information about the end user that can be used as rules for underwriting",
            "example": {"history_days": {"value": 40}},
            "nullable": true,
            "readOnly": true,
            "type": "object"
          },
          "end_user_id": {
            "default": null,
            "description": "Filter by ID associated with end_user_id field in transactions",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "default": null,
            "description": "Unique ID generated by Heron",
            "example": "eus_AtfKAtuzyTGAXi5kwCXjb4",
            "nullable": true,
            "type": "string"
          },
          "is_portfolio": {
            "default": null,
            "description": "Whether the end user is part of a lending portfolio",
            "example": true,
            "nullable": true,
            "type": "boolean"
          },
          "limit": {
            "default": 1000,
            "description": "Pagination limit per page",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "name": {
            "default": null,
            "description": "Filter by name associated with end user",
            "example": "your_end_user_name",
            "nullable": true,
            "type": "string"
          },
          "order_by": {
            "default": "last_updated_desc",
            "description": "Order to return end users by",
            "enum": ["last_updated_desc", "last_updated_asc"],
            "type": "string"
          },
          "page": {
            "default": 1,
            "description": "Pagination page number",
            "minimum": 1,
            "type": "integer"
          },
          "status": {
            "default": null,
            "description": "Filter by status of end user",
            "enum": [
              "new",
              "ready",
              "processed",
              "reviewed",
              "review_requested",
              "failed"
            ],
            "example": "reviewed",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserStatsInputParams": {
        "properties": {
          "category_heron_ids": {
            "default": [],
            "description": "Filter by specific categories",
            "example": [
              "ctg_PWqy8jSFfsX3tPJSovThAR",
              "ctg_fwXk7zSH5qTR7nDyWCvQ96"
            ],
            "items": {"type": "string"},
            "type": "array"
          },
          "date_granularity": {
            "default": "month",
            "description": "Aggregate results over time, e.g., by week or by quarter",
            "enum": ["day", "week", "month", "quarter", "year"],
            "example": "month",
            "type": "string"
          },
          "end_user_heron_id": {
            "default": null,
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "example": "eus_UcRkA5fL7EMypdS8vqKJ7Y",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "from_date": {
            "default": null,
            "description": "Filter for transactions with timestamp after the input value (as date)",
            "example": "2023-04-11",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "group_by": {
            "default": "category",
            "description": "Pivot results by merchant or by category",
            "enum": ["category", "merchant"],
            "example": "category",
            "type": "string"
          },
          "merchant_heron_ids": {
            "default": [],
            "description": "Filter by specific merchants",
            "example": [
              "mrc_AmWNHSbmNNcwETrdceuMBP",
              "mrc_SmLrBgFY5yVE3jmdPSddnZ"
            ],
            "items": {"type": "string"},
            "type": "array"
          },
          "to_currency": {
            "description": "ISO 4217 currency code to convert to",
            "enum": ["USD", "EUR", "GBP"],
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "default": null,
            "description": "Filter for transactions with timestamp before the input value (as date)",
            "example": "2023-04-10",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserStatsOutputMetrics": {
        "properties": {
          "inflow": {
            "allOf": [
              {"$ref": "#/components/schemas/EndUserStatsOutputMetricsInstance"}
            ],
            "description": "Metrics only counting inflows"
          },
          "net": {
            "allOf": [
              {"$ref": "#/components/schemas/EndUserStatsOutputMetricsInstance"}
            ],
            "description": "Net metrics"
          },
          "outflow": {
            "allOf": [
              {"$ref": "#/components/schemas/EndUserStatsOutputMetricsInstance"}
            ],
            "description": "Metrics only counting outflows"
          }
        },
        "type": "object"
      },
      "EndUserStatsOutputMetricsInstance": {
        "properties": {
          "amount": {
            "description": "Aggregate amount of transactions",
            "example": 42.42,
            "type": "number"
          },
          "avg_amount": {
            "description": "Average value of transactions",
            "example": 1.01,
            "type": "number"
          },
          "n": {
            "description": "Number of transactions",
            "example": 42,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EndUserStatsOutputSchema": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "dt": {
            "description": "Date, impacted by input date granularity",
            "example": "2023-04-11",
            "type": "string"
          },
          "heron_id": {
            "description": "Heron ID of either merchant or category, depending on what was specified in group_by",
            "example": "mrc_7maW6Dp8jMTjnEQEx7Ltw5",
            "type": "string"
          },
          "label": {
            "description": "Label of either merchant or category, depending on what was specified in group_by",
            "example": "Revenue",
            "type": "string"
          },
          "metrics": {"$ref": "#/components/schemas/EndUserStatsOutputMetrics"}
        },
        "type": "object"
      },
      "GetTransactionParams": {
        "properties": {
          "category_heron_id": {
            "default": [],
            "description": "Filter by the heron_id of the category that the transaction is annotated with",
            "example": "ctg_Rg7rLEQ2VHyejMQSdGLo6w",
            "items": {"type": "string"},
            "nullable": true,
            "type": "array"
          },
          "confidence_max": {
            "description": "Filter by maximum confidence of annotation associated with transaction",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "confidence_min": {
            "description": "Filter by minimum confidence of annotation associated with transaction",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "created_date_max": {
            "description": "Filter by latest transaction upload date - when Heron received the transaction",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "created_date_min": {
            "description": "Filter by earliest transaction upload date - when Heron received the transaction",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "description_keyword": {
            "description": "Filter by keyword match on transaction description; case insensitive",
            "type": "string"
          },
          "description_regex": {
            "description": "Filter by regex matching transaction description",
            "type": "string"
          },
          "end_user_id": {
            "description": "End user id of transaction",
            "type": "string"
          },
          "from_date": {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "format": "date",
            "type": "string"
          },
          "has_matching_transaction": {
            "description": "Filter by whether the transaction has a matching transaction",
            "type": "boolean"
          },
          "heron_id": {
            "description": "Heron generated Id of transaction",
            "example": "txn_YNLvm5ZHBRdhV8uGp3n3vx",
            "type": "string"
          },
          "include_duplicates": {
            "description": "Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true.",
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Filter by whether the transaction is recurring",
            "type": "boolean"
          },
          "last_updated_max": {
            "description": "Filter for transactions whose values were last updated in Heron systems before the specified input value",
            "example": "2023-04-11T16:52:52.909011",
            "format": "date-time",
            "type": "string"
          },
          "last_updated_min": {
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value",
            "example": "2023-04-11T16:52:52.908989",
            "format": "date-time",
            "type": "string"
          },
          "limit": {
            "default": 1000,
            "description": "Number of transactions to return per page",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "max_amount": {
            "description": "Filter by maximum amount of transaction",
            "type": "number"
          },
          "merchant_group_id": {
            "description": "Filter by merchant group id",
            "type": "string"
          },
          "min_amount": {
            "description": "Filter by minimum amount of transaction",
            "type": "number"
          },
          "order_by": {
            "default": "id_asc",
            "description": "What to order transactions by",
            "enum": [
              "amount_asc",
              "amount_desc",
              "abs_amount_asc",
              "abs_amount_desc",
              "description_asc",
              "description_desc",
              "timestamp_asc",
              "timestamp_desc",
              "id_asc",
              "id_desc"
            ],
            "type": "string"
          },
          "page": {
            "default": 1,
            "description": "Page of transaction to return",
            "minimum": 1,
            "type": "integer"
          },
          "reference_id": {
            "description": "Reference Id of transaction",
            "type": "string"
          },
          "request_id": {
            "description": "Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates.",
            "type": "string"
          },
          "timestamp_date_max": {
            "description": "Filter by latest transaction timestamp",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "timestamp_date_min": {
            "description": "Filter by earliest transaction timestamp",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "to_date": {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "format": "date",
            "type": "string"
          },
          "transaction_code": {
            "description": "Filter by transaction code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InscribeAccount": {
        "properties": {
          "beginning_balance": {
            "allOf": [
              {"$ref": "#/components/schemas/InscribeNumberPrediction"}
            ],
            "nullable": true
          },
          "ending_balance": {
            "allOf": [
              {"$ref": "#/components/schemas/InscribeNumberPrediction"}
            ],
            "nullable": true
          },
          "number": {"$ref": "#/components/schemas/InscribeStringPrediction"},
          "transactions": {
            "items": {"$ref": "#/components/schemas/InscribeTransaction"},
            "type": "array"
          },
          "transactions_match_balances": {"nullable": true, "type": "boolean"}
        },
        "type": "object"
      },
      "InscribeNumberPrediction": {
        "properties": {
          "confidence": {"type": "number"},
          "normalized": {"type": "integer"},
          "raw": {"type": "string"}
        },
        "type": "object"
      },
      "InscribeParsedDetails": {
        "properties": {
          "bank_accounts": {
            "items": {"$ref": "#/components/schemas/InscribeAccount"},
            "type": "array"
          },
          "name": {"$ref": "#/components/schemas/InscribeParsedDetailsName"}
        },
        "type": "object"
      },
      "InscribeParsedDetailsName": {
        "properties": {"raw": {"type": "string"}},
        "type": "object"
      },
      "InscribeSchema": {
        "properties": {
          "customer_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "parsed_details": {
            "$ref": "#/components/schemas/InscribeParsedDetails"
          }
        },
        "type": "object"
      },
      "InscribeStringPrediction": {
        "properties": {
          "confidence": {"type": "number"},
          "normalized": {"type": "string"},
          "raw": {"type": "string"}
        },
        "type": "object"
      },
      "InscribeTransaction": {
        "properties": {
          "amount": {"type": "integer"},
          "date": {"format": "date", "type": "string"},
          "description": {"type": "string"},
          "id": {"type": "string"}
        },
        "type": "object"
      },
      "IntegrationLinkSchema": {
        "properties": {
          "access_token": {
            "description": "The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)",
            "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
            "nullable": false,
            "type": "string"
          },
          "end_user_id": {
            "description": "A unique identifier for your end user (customer) generated by you",
            "example": "c1e07e8d-8421-4a60-a7c9-65a12fcbb3a5",
            "type": "string"
          },
          "end_user_name": {
            "description": "An human readable name for this end user, like the company legal name",
            "example": "Acme Corp",
            "type": "string"
          },
          "item_id": {
            "description": "Unique identifier for each bank connection made by your end users. In Plaid this is the 'item_id'.",
            "example": "M5eVJqLnv3tbzdngLDp9FL5OlDNxlNhlE55op",
            "nullable": false,
            "type": "string"
          }
        },
        "required": ["access_token", "end_user_id", "item_id"],
        "type": "object"
      },
      "IntegrationSchema": {
        "properties": {
          "base_url": {
            "description": "Base URL of the API integration",
            "example": "https://sandbox.plaid.com",
            "format": "url",
            "type": "string"
          },
          "client_id": {
            "description": "Client ID for API access (this is encrypted in transit and at-rest with a custom key)",
            "type": "string"
          },
          "client_secret": {
            "description": "Client Secret for API access (this is encrypted in transit and at-rest with a custom key)",
            "type": "string"
          },
          "heron_id": {"readOnly": true, "type": "string"},
          "name": {
            "description": "A name for your integration",
            "example": "Plaid Prod",
            "type": "string"
          },
          "resource": {
            "default": "transaction",
            "description": "For integrations with multiple available reousrces, the specific resource",
            "enum": ["transaction", "assets_report"],
            "type": "string"
          },
          "type": {
            "description": "The integration type, a specific provider",
            "enum": ["plaid", "ocrolus", "truelayer"],
            "type": "string"
          },
          "webhook_url": {
            "description": "URL provided by you to which we'll forward all webhooks (optional)",
            "example": "https://your-server.yourdomain.com/hooks",
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["base_url", "client_id", "client_secret", "name", "type"],
        "type": "object"
      },
      "Merchant": {
        "properties": {
          "categories": {
            "items": {"$ref": "#/components/schemas/MerchantCategory"},
            "readOnly": true,
            "type": "array"
          },
          "group_id": {"type": "string"},
          "heron_id": {
            "example": "mrc_n6bVdsDuWYwcMCLH6xeiHP",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {"format": "url", "nullable": true, "type": "string"},
          "is_priority": {"readOnly": true, "type": "boolean"},
          "logo_url": {"format": "url", "nullable": true, "type": "string"},
          "name": {"type": "string"},
          "url": {"format": "url", "type": "string"}
        },
        "required": ["name", "url"],
        "type": "object"
      },
      "MerchantCategory": {
        "properties": {
          "code": {"example": "7311", "readOnly": true, "type": "string"},
          "description": {
            "default": null,
            "example": "Advertising services",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "slug": {
            "default": null,
            "example": "advertising_services",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": ["code"],
        "type": "object"
      },
      "MerchantExtract": {
        "properties": {
          "categories": {
            "items": {"$ref": "#/components/schemas/MerchantCategory"},
            "readOnly": true,
            "type": "array"
          },
          "confidence": {
            "default": null,
            "maximum": 1,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "group_id": {"type": "string"},
          "heron_id": {
            "example": "mrc_n6bVdsDuWYwcMCLH6xeiHP",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {"format": "url", "readOnly": true, "type": "string"},
          "logo_url": {"format": "url", "readOnly": true, "type": "string"},
          "name": {
            "default": null,
            "example": "Amazon",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "default": null,
            "example": "https://www.amazon.com/",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MerchantFeedback": {
        "properties": {
          "heron_id": {
            "description": "heron_id of the correct merchant",
            "example": "mrc_FmSp33DVmRrN2YhXf7Qs67",
            "type": "string"
          },
          "is_correct": {"default": false, "example": false, "type": "boolean"},
          "name": {
            "description": "name of the correct merchant",
            "example": "Spotify",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metric": {
        "properties": {
          "context": {
            "description": "Context for how to interpret the metric, e.g., whether a higher value is 'better' than a lower value",
            "enum": ["higher_is_better", "lower_is_better"],
            "example": "higher_is_better",
            "type": "string"
          },
          "currency": {
            "description": "The ISO currency code for metric, where applicable",
            "type": "string"
          },
          "date_range": {
            "description": "Metric date range",
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "description": {
            "description": "Description of metric",
            "example": "The number of unique transactions with a timestamp",
            "type": "string"
          },
          "group": {
            "description": "The type of metric",
            "enum": [
              "data_quality",
              "processing_quality",
              "balance",
              "profit_and_loss",
              "debt",
              "risk_flag",
              "forecast",
              "heron"
            ],
            "example": "data_quality",
            "type": "string"
          },
          "label": {
            "description": "Metric label, slugified",
            "example": "unique_transactions",
            "type": "string"
          },
          "status": {
            "description": "either 'calculated' or 'not_available' depending on the requested date range vs. date range of the data",
            "example": "not_available",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measurement for metric",
            "enum": [
              "n",
              "day",
              "ratio",
              "amount",
              "weekday",
              "array",
              "probability"
            ],
            "example": "n",
            "type": "string"
          },
          "value": {"description": "The metric value", "example": 42.42}
        },
        "type": "object"
      },
      "MoneyThumbStatementSummary": {
        "properties": {
          "account_number": {"type": "string"},
          "account_title": {"type": "string"},
          "bank_name": {"type": "string"},
          "company": {"type": "string"},
          "end_balance": {"type": "number"},
          "fraud_reasons": {"items": {"type": "string"}, "type": "array"},
          "fraud_score": {"type": "integer"},
          "is_business_account": {"type": "boolean"},
          "num_credits": {"type": "integer"},
          "num_debits": {"type": "integer"},
          "num_transactions": {"type": "integer"},
          "reconciled": {"type": "boolean"},
          "start_balance": {"type": "number"},
          "statement_end_date": {"format": "date-time", "type": "string"},
          "statement_start_date": {"format": "date-time", "type": "string"},
          "total_credits": {"type": "number"},
          "total_debits": {"type": "number"},
          "unreconciled_end_balance": {"type": "number"},
          "web_report": {"type": "boolean"}
        },
        "required": [
          "end_balance",
          "num_credits",
          "num_debits",
          "num_transactions",
          "reconciled",
          "start_balance",
          "total_credits",
          "total_debits"
        ],
        "type": "object"
      },
      "OcrolusBankAccount": {
        "properties": {
          "account_number": {"type": "string"},
          "alternative_lender_transactions": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "debt_consolidator_txns": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "estimated_expense_txns_list": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "estimated_revenue_txns_list": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "factor_txns": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "holder_country": {"type": "string"},
          "insurance_credits": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "insurance_debits": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "interbank_transactions": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "merchant_cash_advance_lender_txns": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "non_estimated_revenue_txns_list": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "nsf_transactions": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "nsf_transactions_paid_or_negative_balance": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "nsf_transactions_returned_or_not_paid": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "outside_source_deposits": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "payroll": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "period_balance_mismatches": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "ppp_loan_txns": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "probable_recurring_txns": {
            "items": {
              "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
              "type": "array"
            },
            "type": "array"
          },
          "returned_items": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "round_number_txns": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          },
          "withdrawals": {
            "items": {"$ref": "#/components/schemas/OcrolusTransaction"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "OcrolusResponse": {
        "properties": {
          "bank_accounts": {
            "items": {"$ref": "#/components/schemas/OcrolusBankAccount"},
            "type": "array"
          },
          "name": {"type": "string"}
        },
        "required": ["bank_accounts", "name"],
        "type": "object"
      },
      "OcrolusSchema": {
        "properties": {
          "response": {"$ref": "#/components/schemas/OcrolusResponse"}
        },
        "required": ["response"],
        "type": "object"
      },
      "OcrolusTransaction": {
        "properties": {
          "amount": {"type": "string"},
          "description": {"type": "string"},
          "pk": {"type": "integer"},
          "timestamp": {"format": "date-time", "type": "string"},
          "txn_date": {"format": "date", "type": "string"}
        },
        "type": "object"
      },
      "Pagination": {
        "properties": {
          "next_url": {
            "description": "the URL of the next page",
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "num_results": {
            "description": "the number of results returned",
            "type": "integer"
          },
          "page": {"description": "current page", "type": "integer"},
          "per_page": {
            "description": "the max number of results per page",
            "type": "integer"
          },
          "prev_url": {
            "description": "the URL of the last page",
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentProcessor": {
        "properties": {
          "heron_id": {
            "example": "mrc_nRYdGU7nYuevb7qem65cEb",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {
            "default": null,
            "example": "https://storage.googleapis.com/heron-merchant-assets/icons/mrc_nRYdGU7nYuevb7qem65cEb.svg",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "logo_url": {
            "default": null,
            "example": "https://storage.googleapis.com/heron-merchant-assets/logos/mrc_nRYdGU7nYuevb7qem65cEb.svg",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "default": null,
            "example": "Paypal",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "default": null,
            "example": "https://www.paypal.com",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfCorrection": {
        "properties": {
          "amount": {"type": "number"},
          "balance": {"default": null, "nullable": true, "type": "number"},
          "date": {"format": "date", "type": "string"},
          "description": {"type": "string"},
          "page": {"type": "integer"},
          "reference_id": {"default": null, "nullable": true, "type": "string"},
          "row": {"type": "integer"},
          "transaction_code": {
            "default": null,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount", "date", "description"],
        "type": "object"
      },
      "PdfGetSchema": {
        "properties": {
          "account_id": {
            "description": "Unique ID for account associated with PDF",
            "example": "checking_account_202348",
            "type": "string"
          },
          "created": {
            "description": "Timestamp when PDF was created in Heron system",
            "example": "2023-04-11T16:52:51.372274",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs",
            "enum": ["USD", "GBP"],
            "example": "USD",
            "type": "string"
          },
          "end_user": {"$ref": "#/components/schemas/EndUser1"},
          "heron_id": {
            "description": "ID generated by Heron Data",
            "example": "pdf_beZJyTekocEsLjGadf2GAj",
            "type": "string"
          },
          "last_updated": {
            "description": "Timestamp when PDF was last updated in Heron system",
            "example": "2023-04-11T16:52:51.372324",
            "format": "date-time",
            "type": "string"
          },
          "notes": {
            "description": "Notes for the PDF, e.g., failed reason",
            "example": "failed to send to external OCR provider",
            "type": "string"
          },
          "parsing_version": {
            "description": "Indicates which provider was used to parse this pdf",
            "type": "string"
          },
          "reference_id": {
            "description": "An optional field for your unique identifier for the PDF",
            "example": "my-favourite-pdf",
            "type": "string"
          },
          "statements": {
            "items": {"$ref": "#/components/schemas/PdfStatement"},
            "type": "array"
          },
          "status": {
            "description": "Status of PDF",
            "enum": [
              "new",
              "submitted",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded"
            ],
            "example": "processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfPostSchema": {
        "properties": {
          "account_id": {
            "default": null,
            "description": "Unique ID for account associated with PDF",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "currency": {
            "default": null,
            "description": "ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs",
            "enum": ["USD", "GBP"],
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "pdf_base64": {
            "description": "The base64 encoded string of the PDF file. If using Javascript, this is directly the output of the FileReader.readAsDataURL() output. See https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL for more info",
            "pattern": "^data\\:\\w+\\/\\w+\\;base64\\,",
            "type": "string"
          },
          "read_us_dates": {
            "default": null,
            "description": "True if date formats in the statement are US: month/date/year",
            "nullable": true,
            "type": "boolean"
          },
          "reference_id": {
            "default": null,
            "description": "An optional field for your unique identifier for the PDF",
            "example": "my-favourite-pdf",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["pdf_base64"],
        "type": "object"
      },
      "PdfPutSchema": {
        "properties": {
          "corrections": {
            "items": {"$ref": "#/components/schemas/PdfCorrection"},
            "minItems": 1,
            "type": "array"
          },
          "notes": {
            "description": "Notes associated with PDF, e.g., rejected reason, failed reason",
            "type": "string"
          },
          "reference_id": {
            "default": null,
            "description": "An optional field for your unique identifier for the PDF",
            "example": "my-favourite-pdf",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Status of PDF",
            "enum": [
              "new",
              "submitted",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded"
            ],
            "example": "processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfStatement": {
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/MoneyThumbStatementSummary"
          },
          "transactions": {
            "items": {"$ref": "#/components/schemas/PdfTransaction"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "PdfTransaction": {
        "properties": {
          "amount": {"type": "number"},
          "balance": {"type": "number"},
          "description": {"type": "string"},
          "ocr_suspect": {"type": "boolean"},
          "reference_id": {"type": "string"},
          "timestamp": {"format": "date-time", "type": "string"},
          "transaction_code": {"type": "string"}
        },
        "required": ["amount", "description", "timestamp"],
        "type": "object"
      },
      "PlaidAccount": {
        "properties": {
          "balances": {"$ref": "#/components/schemas/PlaidAccountBalance"},
          "historical_balances": {
            "items": {"$ref": "#/components/schemas/PlaidAccountBalance"},
            "type": "array"
          },
          "transactions": {
            "items": {"$ref": "#/components/schemas/PlaidTransaction"},
            "type": "array"
          }
        },
        "required": ["balances", "historical_balances", "transactions"],
        "type": "object"
      },
      "PlaidAccountBalance": {
        "properties": {
          "current": {"type": "number"},
          "date": {"format": "date", "type": "string"},
          "iso_currency_code": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaidAccountSnapshot": {
        "properties": {
          "account_id": {"type": "string"},
          "balances": {
            "allOf": [
              {"$ref": "#/components/schemas/PlaidAccountSnapshotBalance"}
            ],
            "description": "Balance information for the account as an object. This is optional, but if not provided, balance calculations will not be performed for individual transactions.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PlaidAccountSnapshotBalance": {
        "properties": {
          "available": {"nullable": true, "type": "number"},
          "current": {"type": "number"},
          "iso_currency_code": {"type": "string"}
        },
        "type": "object"
      },
      "PlaidAssetReport": {
        "properties": {
          "items": {
            "items": {"$ref": "#/components/schemas/PlaidAssetReportItem"},
            "type": "array"
          }
        },
        "required": ["items"],
        "type": "object"
      },
      "PlaidAssetReportItem": {
        "properties": {
          "accounts": {
            "items": {"$ref": "#/components/schemas/PlaidAccount"},
            "type": "array"
          }
        },
        "required": ["accounts"],
        "type": "object"
      },
      "PlaidAssetsSchema": {
        "properties": {
          "report": {"$ref": "#/components/schemas/PlaidAssetReport"}
        },
        "required": ["report"],
        "type": "object"
      },
      "PlaidTransaction": {
        "properties": {
          "account_id": {"type": "string"},
          "amount": {"type": "number"},
          "balance": {"type": "number"},
          "category": {
            "items": {"type": "string"},
            "nullable": true,
            "type": "array"
          },
          "date": {"format": "date", "type": "string"},
          "iso_currency_code": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "merchant_name": {"nullable": true, "type": "string"},
          "name": {"type": "string"},
          "pending_transaction_id": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "timestamp": {"format": "date-time", "type": "string"},
          "transaction_code": {"nullable": true, "type": "string"},
          "transaction_id": {"type": "string"}
        },
        "type": "object"
      },
      "PlaidTransactionsSchema": {
        "properties": {
          "accounts": {
            "items": {"$ref": "#/components/schemas/PlaidAccountSnapshot"},
            "type": "array"
          },
          "transactions": {
            "items": {"$ref": "#/components/schemas/PlaidTransaction"},
            "type": "array"
          }
        },
        "required": ["transactions"],
        "type": "object"
      },
      "PnlMetric": {
        "properties": {
          "confidence": {
            "description": "Amount weighted confidence for the metric, based on the confidene associated with category labels of related transactions",
            "nullable": true,
            "type": "number"
          },
          "indent": {
            "description": "Indentation level for formatting purposes",
            "type": "integer"
          },
          "is_ratio": {
            "description": "Whether the metric is a ratio or not",
            "type": "boolean"
          },
          "name": {"description": "Name of metric", "type": "string"},
          "values": {
            "description": "The list of values ordered according to date",
            "items": {"nullable": true, "type": "number"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "PnlMetricFractionTerm": {
        "properties": {
          "labels": {
            "description": "List of category labels associated with the fraction term",
            "items": {"type": "string"},
            "type": "array"
          },
          "sections": {
            "description": "List of section slugs associated with the fraction term",
            "items": {"type": "string"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "PnlMetricLayout": {
        "properties": {
          "denominator": {
            "allOf": [{"$ref": "#/components/schemas/PnlMetricFractionTerm"}],
            "description": "If the metric is a ratio, the denominator of the metric; otherwise this is just 1",
            "nullable": true
          },
          "indent": {
            "description": "Indentation level for formatting purposes",
            "type": "integer"
          },
          "is_growth": {
            "description": "If true, calculates the % growth in the metric over time",
            "type": "boolean"
          },
          "name": {"description": "Name of metric", "type": "string"},
          "numerator": {
            "allOf": [{"$ref": "#/components/schemas/PnlMetricFractionTerm"}],
            "description": "The numerator of the metric"
          }
        },
        "type": "object"
      },
      "PnlSection": {
        "properties": {
          "metrics": {
            "description": "Ordered list of P&L metrics",
            "items": {"$ref": "#/components/schemas/PnlMetric"},
            "type": "array"
          },
          "name": {
            "description": "Name of P&L section, e.g,. Operating Expenses",
            "type": "string"
          },
          "slug": {
            "description": "Slugified version of the name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PnlSectionLayout": {
        "properties": {
          "labels": {
            "description": "The category labels associated with the section",
            "items": {"type": "string"},
            "type": "array"
          },
          "metrics": {
            "description": "An ordered list of metric layouts",
            "items": {"$ref": "#/components/schemas/PnlMetricLayout"},
            "type": "array"
          },
          "name": {
            "description": "Name of P&L section, e.g,. Operating Expenses",
            "type": "string"
          },
          "slug": {
            "description": "Slugified version of the name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfitAndLossLayoutSchema": {
        "properties": {
          "sections": {
            "description": "Ordered list of P&L sections",
            "items": {"$ref": "#/components/schemas/PnlSectionLayout"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProfitAndLossLayoutUpdateSchema": {
        "properties": {
          "category_labels": {
            "description": "List of category labels to assign to a different section",
            "example": ["Postage"],
            "items": {"type": "string"},
            "minItems": 1,
            "type": "array"
          },
          "section_slug": {
            "description": "Slug of section to assign labels to",
            "example": "operational_expenses",
            "type": "string"
          }
        },
        "required": ["category_labels", "section_slug"],
        "type": "object"
      },
      "ProfitAndLossParams": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "dates_ascending": {
            "default": false,
            "description": "If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first",
            "type": "boolean"
          },
          "from_date": {
            "default": null,
            "description": "The earliest transaction timestamp date to use",
            "example": "2022-01-01",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "default": null,
            "description": "The latest transaction timestamp date to use",
            "example": "2022-01-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfitAndLossSchema": {
        "properties": {
          "dates": {
            "description": "Ordered list of dates representing the columns of the P&L table",
            "items": {"format": "date", "type": "string"},
            "type": "array"
          },
          "sections": {
            "description": "Ordered list of P&L sections",
            "items": {"$ref": "#/components/schemas/PnlSection"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProfitAndLossStatementPostSchema": {
        "properties": {
          "csv": {
            "description": "P&L of an end user in CSV format. String must be encoded.",
            "example": "date%2Crevenue%0D%0AOct%202021%2C23580.87%0D%0ASept%202021%2C13464.07",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 currency code for transactions in account. We currently only support GBP and USD P&Ls",
            "enum": ["USD", "GBP"],
            "example": "USD",
            "type": "string"
          }
        },
        "required": ["csv", "currency"],
        "type": "object"
      },
      "Rule": {
        "properties": {
          "condition": {
            "description": "Key for how to compare metric value to rule value",
            "enum": [
              "equal",
              "not_equal",
              "greater_than",
              "greater_than_or_equal",
              "less_than",
              "less_than_or_equal",
              "contains"
            ],
            "example": "equal",
            "type": "string"
          },
          "created": {
            "description": "When the rule was created in Heron system",
            "example": "2023-02-28T16:52:52.889279",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_range": {
            "description": "Date range corresponding to metric",
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for rule generated by Heron",
            "example": "rul_LfTMdQaUByqBtNCoQQtP5d",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the rule was last updated in Heron system",
            "example": "2023-04-11T16:52:52.889334",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metric_label": {
            "description": "Label corresponding to metric",
            "enum": [
              "data_volume",
              "date_range",
              "data_freshness",
              "has_balance_ratio",
              "data_coverage",
              "accounts",
              "category_coverage",
              "inflows",
              "outflows",
              "merchant_coverage",
              "confidence",
              "revenue_anomalies",
              "last_debt_investment",
              "last_debt_investment_days",
              "merchant_heron_ids",
              "revenue_daily_average",
              "cogs_daily_average",
              "opex_daily_average",
              "debt_repayment_daily_average",
              "nsf_fees",
              "nsf_days",
              "unconnected_account_ratio",
              "inflow_daily_average",
              "outflow_daily_average",
              "revenue_sources",
              "debt_investment",
              "debt_investment_count",
              "debt_investors",
              "debt_collection",
              "atm_withdrawals",
              "tax_payments",
              "tax_payment_amount",
              "revenue",
              "annualized_revenue",
              "cogs",
              "opex",
              "debt_repayment",
              "latest_balance",
              "balance_minimum",
              "balance_average",
              "change_in_balance",
              "weekday_balance_average",
              "weekday_with_highest_avg",
              "weekday_with_lowest_avg",
              "negative_balance_days",
              "gross_operating_cashflow_daily_average",
              "net_operating_cashflow_daily_average",
              "gross_operating_cashflow",
              "net_operating_cashflow",
              "debt_service_coverage_ratio",
              "predicted_nsf_fees",
              "predicted_balance_daily_average"
            ],
            "example": "unique_transactions",
            "type": "string"
          },
          "name": {
            "description": "Description of rule. Sent with webhook response, so can be used as a reference to the rule",
            "example": "notify_if_debt_investment_count_gt_0_last_180d",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "selector": {
            "description": "key-value pairs of the desired selector that should select whichend users to apply this rule. They are evaluated as an AND condition(all must be true to run this rule for an end user). Leave empty toapply to all end users.",
            "example": {"is_portfolio": true},
            "type": "object"
          },
          "value": {
            "description": "Numeric value to compare to a metric; use this when the threshold is numeric",
            "example": 42.42,
            "nullable": true,
            "type": "number"
          },
          "value_str": {
            "description": "String value to compare to a metric; use this when the threshold is a string",
            "example": "mrc_12345678ijwdd321d921",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuleViolation": {
        "properties": {
          "metric": {"$ref": "#/components/schemas/Metric"},
          "rule": {"$ref": "#/components/schemas/Rule"}
        },
        "type": "object"
      },
      "SaltEdgeCsvSchema": {
        "properties": {
          "account_id": {"type": "integer"},
          "amount": {"type": "number"},
          "category": {"type": "string"},
          "closing_balance": {"nullable": true, "type": "number"},
          "currency_code": {"type": "string"},
          "description": {"type": "string"},
          "made_on": {"format": "date", "type": "string"},
          "payee": {"nullable": true, "type": "string"},
          "payer": {"nullable": true, "type": "string"},
          "transaction_id": {"type": "integer"}
        },
        "type": "object"
      },
      "ScorecardQueryParams": {
        "properties": {
          "date": {
            "default": null,
            "description": "Cut-off date to consider transactions to for calculating scorecard (inclusive)",
            "example": "2023-01-19",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423.0,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_6JytLFc3cCY2KZvmuUUMu9",
            "readOnly": true,
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_mGgaYZxwgGdBJfXiwLp9nm",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount", "description"],
        "type": "object"
      },
      "Transaction1": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423.0,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_6JytLFc3cCY2KZvmuUUMu9",
            "readOnly": true,
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_mGgaYZxwgGdBJfXiwLp9nm",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount", "description"],
        "type": "object"
      },
      "Transaction2": {
        "properties": {
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_6JytLFc3cCY2KZvmuUUMu9",
            "readOnly": true,
            "type": "string"
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionAnnotation": {
        "properties": {
          "annotator": {
            "description": "Annotator type",
            "example": "predicted",
            "type": "string"
          },
          "confidence": {
            "description": "The confidence associated with the category annotation",
            "example": 0.5,
            "type": "number"
          },
          "heron_id": {
            "description": "Unique ID of category; generated by Heron Data",
            "example": "ctg_4R33cLYFuy26czTbVbiaKt",
            "type": "string"
          },
          "label": {
            "description": "Label of category",
            "example": "Rent",
            "type": "string"
          },
          "model_version": {
            "description": "The model version that produced the categorisation",
            "example": "4ef15185-212f-485c-b572-cb56e8ea4aa5",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionDeleteReference": {
        "properties": {
          "transactions": {
            "description": "list of transactions (only ids) that have been deleted",
            "items": {"$ref": "#/components/schemas/Transaction2"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransactionDeleteWebhook": {
        "properties": {
          "created": {
            "description": "time webhook was sent",
            "example": "2023-04-11T16:52:52.914683",
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "allOf": [
              {"$ref": "#/components/schemas/TransactionDeleteReference"}
            ],
            "description": "payload of the webhook"
          },
          "meta": {
            "description": "meta information about the webhook",
            "type": "object"
          },
          "topic": {
            "description": "topic of webhook",
            "example": "end_user.processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionEnriched": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "annotation": {
            "allOf": [{"$ref": "#/components/schemas/Annotation"}],
            "description": "The category annotation associated with the transaction"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423.0,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "features": {
            "allOf": [{"$ref": "#/components/schemas/TransactionFeatures"}],
            "description": "Features calculated from transaction"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_6JytLFc3cCY2KZvmuUUMu9",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the transaction was last updated, either by updating its enrichments or the values of the transaction itself",
            "example": "2023-04-11T16:52:52.905881",
            "format": "date-time",
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "merchant": {
            "allOf": [{"$ref": "#/components/schemas/Merchant"}],
            "description": "The merchant associated with the transaction"
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_mGgaYZxwgGdBJfXiwLp9nm",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount", "description"],
        "type": "object"
      },
      "TransactionFeatures": {
        "properties": {
          "description_clean": {
            "description": "The cleaned description of the transaction",
            "example": "GOOGLE ADS",
            "type": "string"
          },
          "duplicate_of_id": {
            "description": "Indicates that the transaction is a duplicate and gives the heron_id of the original",
            "example": "txn_cKeh86LG3oCevrsudDxB3q"
          },
          "has_matching_transaction": {
            "description": "Whether the transaction is a transfer; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "is_potential_duplicate": {
            "description": "Indicates whether the transaction has another transaction similar to it",
            "readOnly": true,
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Whether the transaction is recurring or not; requires end_user_id and timestamp to be present",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TransactionFeedbackParams": {
        "properties": {
          "trigger_webhook": {
            "default": true,
            "description": "If true, enables the triggering of transaction_updated webhook. Set to false to suppress trigger. Default true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TransactionFeedbackSchema": {
        "properties": {
          "category": {
            "allOf": [{"$ref": "#/components/schemas/CategoryFeedback"}],
            "default": {},
            "example": {
              "heron_id": "ctg_2QJW4FWXPHPK9nMu9qQpdy",
              "label": "Insurance"
            }
          },
          "merchant": {
            "allOf": [{"$ref": "#/components/schemas/MerchantFeedback"}],
            "default": {},
            "example": {
              "heron_id": "mrc_Y6dTjQyjxu72AnUmjaGVUW",
              "is_correct": false,
              "name": "Spotify"
            }
          },
          "source": {
            "default": null,
            "description": "your identifier for where the feedback comes from e.g. bob_the_underwriter",
            "maxLength": 120,
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionGetOutput": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423.0,
            "nullable": true,
            "type": "number"
          },
          "categories": {
            "description": "The category associated with the transaction",
            "items": {"$ref": "#/components/schemas/TransactionAnnotation"},
            "type": "array"
          },
          "created": {
            "description": "When transaction was created in Heron system",
            "example": "2023-04-11T16:52:52.908042",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "description_clean": {
            "description": "The cleaned description of the transaction",
            "example": "GOOGLE ADS",
            "type": "string"
          },
          "duplicate_of_id": {
            "description": "Indicates that the transaction is a duplicate and gives the heron_id of the original",
            "example": "txn_cKeh86LG3oCevrsudDxB3q"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "has_matching_transaction": {
            "description": "Whether the transaction is a transfer; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_6JytLFc3cCY2KZvmuUUMu9",
            "readOnly": true,
            "type": "string"
          },
          "is_potential_duplicate": {
            "description": "Indicates whether the transaction has another transaction similar to it",
            "readOnly": true,
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Whether the transaction is recurring or not; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "last_updated": {
            "description": "When transaction was last updated in Heron system; could be from recategorisation or attribute updates",
            "example": "2023-04-11T16:52:52.908158",
            "format": "date-time",
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "merchant": {
            "allOf": [{"$ref": "#/components/schemas/Merchant"}],
            "description": "The merchant associated with the transaction"
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "type": "integer",
            "writeOnly": true
          },
          "payment_processor": {
            "allOf": [{"$ref": "#/components/schemas/PaymentProcessor"}],
            "description": "The payment processor associated with the transaction"
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_mGgaYZxwgGdBJfXiwLp9nm",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount", "description"],
        "type": "object"
      },
      "TransactionPostOutput": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423.0,
            "nullable": true,
            "type": "number"
          },
          "categories": {
            "description": "The category associated with the transaction",
            "items": {"$ref": "#/components/schemas/TransactionAnnotation"},
            "type": "array"
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "description_clean": {
            "description": "The cleaned description of the transaction",
            "example": "GOOGLE ADS",
            "type": "string"
          },
          "duplicate_of_id": {
            "description": "Indicates that the transaction is a duplicate and gives the heron_id of the original",
            "example": "txn_cKeh86LG3oCevrsudDxB3q"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "has_matching_transaction": {
            "description": "Whether the transaction is a transfer; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_6JytLFc3cCY2KZvmuUUMu9",
            "readOnly": true,
            "type": "string"
          },
          "is_potential_duplicate": {
            "description": "Indicates whether the transaction has another transaction similar to it",
            "readOnly": true,
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Whether the transaction is recurring or not; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "merchant": {
            "allOf": [{"$ref": "#/components/schemas/Merchant"}],
            "description": "The merchant associated with the transaction"
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "type": "integer",
            "writeOnly": true
          },
          "payment_processor": {
            "allOf": [{"$ref": "#/components/schemas/PaymentProcessor"}],
            "description": "The payment processor associated with the transaction"
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_mGgaYZxwgGdBJfXiwLp9nm",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": ["amount", "description"],
        "type": "object"
      },
      "TransactionsPostSchema": {
        "properties": {
          "balances": {
            "description": "Bank account balance information for a particular account_id. The balance here must be the *latest balance* after all the transactions in this batch have been applied.",
            "items": {"$ref": "#/components/schemas/AccountBalance"},
            "type": "array"
          },
          "transactions": {
            "items": {"$ref": "#/components/schemas/Transaction1"},
            "minItems": 1,
            "type": "array"
          }
        },
        "required": ["transactions"],
        "type": "object"
      },
      "YodleeAccount": {
        "properties": {
          "balance": {"$ref": "#/components/schemas/YodleeAmount"},
          "id": {"type": "integer"}
        },
        "type": "object"
      },
      "YodleeAmount": {
        "properties": {
          "amount": {"type": "number"},
          "currency": {"type": "string"}
        },
        "type": "object"
      },
      "YodleeSchema": {
        "properties": {
          "accounts": {
            "items": {"$ref": "#/components/schemas/YodleeAccount"},
            "type": "array"
          },
          "transactions": {
            "items": {"$ref": "#/components/schemas/YodleeTransaction"},
            "type": "array"
          }
        },
        "type": "object"
      },
      "YodleeTransaction": {
        "properties": {
          "accountId": {"type": "integer"},
          "amount": {"$ref": "#/components/schemas/YodleeAmount"},
          "baseType": {"enum": ["CREDIT", "DEBIT"], "type": "string"},
          "category": {"type": "string"},
          "createdDate": {"format": "date-time", "type": "string"},
          "description": {
            "$ref": "#/components/schemas/YodleeTransactionDescription"
          },
          "id": {"type": "integer"}
        },
        "type": "object"
      },
      "YodleeTransactionDescription": {
        "properties": {
          "original": {"type": "string"},
          "simple": {"type": "string"}
        },
        "type": "object"
      }
    },
    "securitySchemes": {"BasicAuth": {"scheme": "basic", "type": "http"}}
  },
  "externalDocs": {
    "description": "Read Tutorial",
    "url": "https://docs.herondata.io/"
  },
  "info": {
    "contact": {"email": "support@herondata.io", "name": "Support"},
    "title": "Heron Data API",
    "version": "2021-07-19"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/annotators/feedback/annotations": {
      "post": {
        "description": "Provide bulk feedback on Transaction Categories",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {"$ref": "#/components/schemas/BulkCategoryFeedback"},
                "type": "array"
              }
            }
          },
          "description": "A list of objects containing a Transaction's heron id and the suggested Category. If you provide a `heron_id` for Category, you don't need to provide other fields. If `heron_id` is provided, we disregard `label`.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "num_annotations": {
                      "description": "The number of category annotations added",
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Bulk create category feedback",
        "tags": ["EnrichmentFeedback"]
      }
    },
    "/api/categories": {
      "get": {
        "description": "Get available categories",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "categories": {
                      "items": {"$ref": "#/components/schemas/Category"},
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {"description": "Unauthorized"}
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get categories",
        "tags": ["Categories"]
      }
    },
    "/api/end_users": {
      "get": {
        "description": "Get a list of EndUsers",
        "parameters": [
          {
            "description": "Order to return end users by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "last_updated_desc",
              "enum": ["last_updated_desc", "last_updated_asc"],
              "type": "string"
            }
          },
          {
            "description": "Pagination limit per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by name associated with end user",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_name",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Whether the end user is part of a lending portfolio",
            "in": "query",
            "name": "is_portfolio",
            "required": false,
            "schema": {
              "default": null,
              "example": true,
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filter by status of end user",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": null,
              "enum": [
                "new",
                "ready",
                "processed",
                "reviewed",
                "review_requested",
                "failed"
              ],
              "example": "reviewed",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter by ID associated with end_user_id field in transactions",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Pagination page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {"default": 1, "minimum": 1, "type": "integer"}
          },
          {
            "description": "Unique ID generated by Heron",
            "in": "query",
            "name": "heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_AtfKAtuzyTGAXi5kwCXjb4",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_meta": {
                      "properties": {
                        "limit": {"example": 1000, "type": "integer"},
                        "next_url": {"type": "string"},
                        "page": {"example": 1, "type": "integer"},
                        "pages": {"example": 3, "type": "integer"},
                        "prev_url": {"type": "string"},
                        "total": {"example": 3500, "type": "integer"}
                      },
                      "type": "object"
                    },
                    "end_users": {
                      "items": {
                        "$ref": "#/components/schemas/EndUser",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "List EndUsers",
        "tags": ["EndUsers"]
      },
      "post": {
        "description": "Create a new end user. If transactions have previously been sent for this `end_user_id`, use `PUT end_users` to update instead.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_user": {
                    "$ref": "#/components/schemas/EndUser",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Create EndUser",
        "tags": ["EndUsers"]
      },
      "put": {
        "callbacks": {
          "onData": {
            "$yourWebhookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "created": {"format": "date-time", "type": "string"},
                          "data": {
                            "properties": {
                              "end_user_id": {
                                "example": "myenduser",
                                "type": "string"
                              },
                              "heron_id": {
                                "example": "eus_Eqio3Y4dhyNiMphrXwG58p",
                                "type": "string"
                              },
                              "status": {
                                "example": "processed",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "meta": {"format": "nullable", "type": "object"},
                          "topic": {"type": "string"}
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Webhook payload with end_user"
                },
                "responses": {
                  "200": {
                    "description": "Your webhook implementation should return this HTTP status code\nif the data was received successfully."
                  }
                }
              }
            }
          }
        },
        "description": "Confirm an end user is ready for async procesing by sending a status of \"ready\". The `end_user_id` must have previously been sent with at least one Transaction.\n",
        "externalDocs": {
          "description": "Webhook Tutorial",
          "url": "https://docs.herondata.io/webhooks"
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_user": {
                    "$ref": "#/components/schemas/EndUser",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Dictionary representing an EndUser",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Update EndUser",
        "tags": ["EndUsers"]
      }
    },
    "/api/end_users/balance": {
      "get": {
        "description": "Get balance for given EndUser on a daily and account granularity",
        "parameters": [
          {
            "description": "Filter for transactions with timestamp after the input value",
            "in": "query",
            "name": "timestamp_min",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-04-11T16:52:51.269300",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code to convert to",
            "in": "query",
            "name": "to_currency",
            "required": false,
            "schema": {
              "enum": ["USD", "EUR", "GBP"],
              "example": "USD",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "If true, forecasts the balances of each account",
            "in": "query",
            "name": "include_forecast",
            "required": false,
            "schema": {"default": false, "type": "boolean"}
          },
          {
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_UcRkA5fL7EMypdS8vqKJ7Y",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions with timestamp earlier than the input value",
            "in": "query",
            "name": "timestamp_max",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-04-10T16:52:51.269338",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserBalanceOutputSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser balance",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/forecast": {
      "get": {
        "description": "Get forecast amounts for a given EndUser and category",
        "parameters": [
          {
            "description": "The earliest transaction timestamp date to use in forecasting",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-01",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Aggregate results over time, i.e., aggregate by week or by month",
            "in": "query",
            "name": "date_granularity",
            "required": false,
            "schema": {
              "default": "month",
              "enum": ["week", "month"],
              "example": "month",
              "type": "string"
            }
          },
          {
            "description": "Label of category to be forecasted; either category_heron_id or category_label must be present",
            "in": "query",
            "name": "category_label",
            "required": false,
            "schema": {"example": "Revenue", "type": "string"}
          },
          {
            "description": "ISO 4217 currency code to convert to",
            "in": "query",
            "name": "to_currency",
            "required": false,
            "schema": {
              "enum": ["USD", "EUR", "GBP"],
              "example": "USD",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Heron ID of category to be forecasted; either category_heron_id or category_label must be present",
            "in": "query",
            "name": "category_heron_id",
            "required": false,
            "schema": {
              "example": "ctg_FfznrqHBEnU8HsmB9txpyx",
              "type": "string"
            }
          },
          {
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_UcRkA5fL7EMypdS8vqKJ7Y",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The latest transaction timestamp date to use in forecasting",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-31",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EndUserForecastOutputSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser forecasts",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/statistics": {
      "get": {
        "description": "Get summarized statistics for a given EndUser",
        "parameters": [
          {
            "description": "Filter for transactions with timestamp after the input value (as date)",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-04-11",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Aggregate results over time, e.g., by week or by quarter",
            "in": "query",
            "name": "date_granularity",
            "required": false,
            "schema": {
              "default": "month",
              "enum": ["day", "week", "month", "quarter", "year"],
              "example": "month",
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code to convert to",
            "in": "query",
            "name": "to_currency",
            "required": false,
            "schema": {
              "enum": ["USD", "EUR", "GBP"],
              "example": "USD",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter by specific categories",
            "explode": true,
            "in": "query",
            "name": "category_heron_ids",
            "required": false,
            "schema": {
              "default": [],
              "example": [
                "ctg_PWqy8jSFfsX3tPJSovThAR",
                "ctg_fwXk7zSH5qTR7nDyWCvQ96"
              ],
              "items": {"type": "string"},
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Filter by specific merchants",
            "explode": true,
            "in": "query",
            "name": "merchant_heron_ids",
            "required": false,
            "schema": {
              "default": [],
              "example": [
                "mrc_AmWNHSbmNNcwETrdceuMBP",
                "mrc_SmLrBgFY5yVE3jmdPSddnZ"
              ],
              "items": {"type": "string"},
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Pivot results by merchant or by category",
            "in": "query",
            "name": "group_by",
            "required": false,
            "schema": {
              "default": "category",
              "enum": ["category", "merchant"],
              "example": "category",
              "type": "string"
            }
          },
          {
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_UcRkA5fL7EMypdS8vqKJ7Y",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions with timestamp before the input value (as date)",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-04-10",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "statistics": {
                      "items": {
                        "$ref": "#/components/schemas/EndUserStatsOutputSchema",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser statistics",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}": {
      "delete": {
        "description": "Delete an end user. You must delete associated transactions before doing this.\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {"heron_id": {"type": "string"}},
                  "type": "object"
                }
              }
            },
            "description": "Deleted"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Delete EndUser by heron_id or end_user_id",
        "tags": ["EndUsers"]
      },
      "get": {
        "description": "Get an end user using its end_user_id or heron_id\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser by heron_id or end_user_id",
        "tags": ["EndUsers"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/anomalies": {
      "get": {
        "description": "Get anomalies for given EndUser given a category label or heron id",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "description": "Label or Heron ID of category to find anomalies for",
            "in": "query",
            "name": "category_label_or_heron_id",
            "required": true,
            "schema": {"example": "Revenue", "type": "string"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AnomalySchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser anomalies",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/inscribe": {
      "post": {
        "description": "Upload Inscribe JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InscribeSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload Inscribe",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/ocrolus": {
      "post": {
        "description": "Upload Ocrolus JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OcrolusSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload Ocrolus",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/pdfs": {
      "get": {
        "description": "Get list of PDFs for a specified end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "description": "Include processed results where applicable per pdf",
            "in": "query",
            "name": "with_processed_results",
            "required": false,
            "schema": {"type": "boolean"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pdfs": {
                      "items": {"$ref": "#/components/schemas/PdfGetSchema"},
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get PDFs",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/pdfs/v1": {
      "post": {
        "description": "Upload encoded PDF of transactions for a specified end user to translate into Heron Data format\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfPostSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload PDF",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/plaid/assets": {
      "post": {
        "description": "Upload Plaid asset JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaidAssetsSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload Plaid assets",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/plaid/transactions": {
      "post": {
        "description": "Upload Plaid transactions JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaidTransactionsSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload Plaid transactions",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss": {
      "get": {
        "description": "Calculates the profit & loss table for an end user, based on the layout defined (if any)\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "description": "The earliest transaction timestamp date to use",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-01",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The latest transaction timestamp date to use",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-31",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code for balance",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "example": "USD",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first",
            "in": "query",
            "name": "dates_ascending",
            "required": false,
            "schema": {"default": false, "type": "boolean"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfitAndLossSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser P&L",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss_layout": {
      "put": {
        "description": "Update the profit and loss layout for the end user, which determines how the profit and loss table is calculated\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfitAndLossLayoutUpdateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfitAndLossLayoutSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Update EndUser P&L layout",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss_statements": {
      "post": {
        "description": "Upload P&L for a specified end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfitAndLossStatementPostSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload P&L in CSV format",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/scorecard": {
      "get": {
        "description": "Get scorecard metrics and rule violations for a user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "description": "Cut-off date to consider transactions to for calculating scorecard (inclusive)",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-01-19",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "items": {"$ref": "#/components/schemas/Metric"},
                      "type": "array"
                    },
                    "rule_violations": {
                      "items": {"$ref": "#/components/schemas/RuleViolation"},
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get EndUser scorecard",
        "tags": ["EndUserCalculations"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/transactions": {
      "get": {
        "description": "Get all unique transactions for a single end user. Set end user status to \"ready\" to initiate transaction enrichment, otherwise may contain both enriched and unenriched transactions\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "description": "Results page",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {"default": 1, "minimum": 1, "type": "integer"}
          },
          {
            "description": "Desired results per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 100,
              "maximum": 50000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat",
            "in": "query",
            "name": "last_updated_min",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-04-11T16:52:51.317998",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_meta": {
                      "$ref": "#/components/schemas/Pagination",
                      "type": "object"
                    },
                    "transactions_enriched": {
                      "items": {
                        "$ref": "#/components/schemas/TransactionEnriched",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get end user transactions",
        "tags": ["EnrichedTransactions"]
      },
      "post": {
        "description": "Upload transactions for a specific end user. Does not include enriching transactions -- set end user status = 'ready' to initiate processing\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transactions": {
                    "items": {"$ref": "#/components/schemas/Transaction"},
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "request_id": {
                      "description": "Unique UUID per request",
                      "type": "string"
                    },
                    "transactions_loaded": {
                      "description": "The number of transactions loaded",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Create end user transactions",
        "tags": ["Transactions"]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/yodlee": {
      "post": {
        "description": "Upload Yodlee JSON files for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/YodleeSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Upload Yodlee",
        "tags": ["EndUserIntegrations"]
      }
    },
    "/api/hello_world": {
      "get": {
        "description": "Test endpoint (no authentication)",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {"hello": {"type": "string"}},
                  "type": "object"
                }
              }
            },
            "description": "url works"
          }
        },
        "tags": ["Testing"]
      }
    },
    "/api/hello_world/authenticated": {
      "get": {
        "description": "Test authentication",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {"hello": {"type": "string"}},
                  "type": "object"
                }
              }
            },
            "description": "Authentication works"
          },
          "401": {"description": "Unauthorized"}
        },
        "security": [{"BasicAuth": []}],
        "tags": ["Testing"]
      }
    },
    "/api/integrations/": {
      "post": {
        "description": "Create an integration e.g. with Plaid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "integration": {
                    "$ref": "#/components/schemas/IntegrationSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "integration": {
                      "$ref": "#/components/schemas/IntegrationSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Create an integration",
        "tags": ["Integrations"]
      }
    },
    "/api/integrations/{heron_id}/links": {
      "post": {
        "description": "Create a Link for an active Integration every time a customer connects their bank. In Plaid, this is a Plaid Link every time a customer connects their bank. For Plaid, call this after exchanging a public token for an Item access_token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationLinkSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {"201": {"description": "Created"}},
        "security": [{"BasicAuth": []}],
        "summary": "Create an integration Link",
        "tags": ["Integrations"]
      }
    },
    "/api/merchants/extract": {
      "post": {
        "description": "Extract Merchant from a transaction description",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "example": "PAYPAL* AMZN Mktp 198748320",
                    "type": "string"
                  }
                },
                "required": ["description"],
                "type": "object"
              }
            }
          },
          "description": "The bank transaction description as a string"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "description_clean": {
                      "example": "Amzn Mktp",
                      "nullable": true,
                      "type": "string"
                    },
                    "merchant": {
                      "$ref": "#/components/schemas/MerchantExtract",
                      "nullable": true,
                      "type": "object"
                    },
                    "payment_processor": {
                      "$ref": "#/components/schemas/PaymentProcessor",
                      "nullable": true,
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The `merchant` key is not null when we find a positive match to our database. When we could not match a merchant, `merchant` is null and `description_clean` is set to a substring of the original description that our models identified as the relevant entity.\n"
          }
        },
        "security": [{"BasicAuth": []}],
        "tags": ["Merchants"]
      }
    },
    "/api/merchants/search": {
      "get": {
        "description": "Search Merchants by name",
        "parameters": [
          {
            "description": "Full or partial name, minimum 3 characters",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "merchants": {
                      "items": {
                        "$ref": "#/components/schemas/Merchant",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of up to 5 merchants which match the search term, sorted by descending order of their URL rank and the frequency this merchant has been seen historically.\n"
          }
        },
        "security": [{"BasicAuth": []}],
        "tags": ["Merchants"]
      }
    },
    "/api/merchants/{heron_id}": {
      "get": {
        "description": "Get Merchant by heron_id",
        "parameters": [
          {
            "description": "The Merchant `heron_id`",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "merchant": {
                      "$ref": "#/components/schemas/Merchant",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "tags": ["Merchants"]
      }
    },
    "/api/rules/": {
      "get": {
        "description": "Read all available rules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "items": {
                        "$ref": "#/components/schemas/Rule",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Get rules",
        "tags": ["Rules"]
      },
      "post": {
        "description": "Create a new rule to send a 'end_user.review_required' webhook after processing if rule condition evaluates to true\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "rule": {
                    "$ref": "#/components/schemas/Rule",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/Rule",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Create rule",
        "tags": ["Rules"]
      }
    },
    "/api/rules/{heron_id}": {
      "delete": {
        "description": "Delete a rule\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {"heron_id": {"type": "string"}},
                  "type": "object"
                }
              }
            },
            "description": "Deleted"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Delete rule by heron_id",
        "tags": ["Rules"]
      }
    },
    "/api/transactions": {
      "delete": {
        "callbacks": {
          "onData": {
            "$yourWebhookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TransactionDeleteWebhook",
                        "type": "object"
                      }
                    }
                  },
                  "description": "Webhook payload with transactions"
                },
                "responses": {
                  "200": {
                    "description": "Your webhook implementation should return this HTTP status code\nif the data was received successfully."
                  }
                }
              }
            }
          }
        },
        "description": "Delete transactions",
        "parameters": [
          {
            "description": "Request ID of transactions to be deleted",
            "in": "query",
            "name": "request_id",
            "required": false,
            "schema": {"default": null, "nullable": true, "type": "string"}
          },
          {
            "description": "account_id of transactions to be deleted",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {"default": null, "nullable": true, "type": "string"}
          },
          {
            "description": "Heron IDs of transactions to be deleted",
            "explode": true,
            "in": "query",
            "name": "heron_ids",
            "required": false,
            "schema": {
              "default": [],
              "items": {"type": "string"},
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "if true, deletes only transactions that are marked as duplicates",
            "in": "query",
            "name": "only_duplicates",
            "required": false,
            "schema": {"default": null, "nullable": true, "type": "boolean"}
          },
          {
            "description": "Reference IDs of transactions to be deleted",
            "explode": true,
            "in": "query",
            "name": "reference_ids",
            "required": false,
            "schema": {
              "default": [],
              "items": {"type": "string"},
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "end_user_id of transactions to be deleted",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {"default": null, "nullable": true, "type": "string"}
          },
          {
            "description": "(legacy) Heron ID of transaction to be deleted",
            "in": "query",
            "name": "heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "txn_kDTPmuRwYLtYKoKSK95TJ7",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {"message": {"type": "string"}},
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [{"BasicAuth": []}],
        "tags": ["Transactions"]
      },
      "get": {
        "description": "Get transactions",
        "parameters": [
          {
            "description": "Filter by merchant group id",
            "in": "query",
            "name": "merchant_group_id",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {"format": "date", "type": "string"}
          },
          {
            "description": "Filter by regex matching transaction description",
            "in": "query",
            "name": "description_regex",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "Number of transactions to return per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value",
            "in": "query",
            "name": "last_updated_min",
            "required": false,
            "schema": {
              "example": "2023-04-11T16:52:52.908989",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true.",
            "in": "query",
            "name": "include_duplicates",
            "required": false,
            "schema": {"type": "boolean"}
          },
          {
            "description": "Filter by maximum amount of transaction",
            "in": "query",
            "name": "max_amount",
            "required": false,
            "schema": {"type": "number"}
          },
          {
            "description": "Filter by maximum confidence of annotation associated with transaction",
            "in": "query",
            "name": "confidence_max",
            "required": false,
            "schema": {"maximum": 1, "minimum": 0, "type": "number"}
          },
          {
            "description": "Page of transaction to return",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {"default": 1, "minimum": 1, "type": "integer"}
          },
          {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {"format": "date", "type": "string"}
          },
          {
            "description": "Filter by whether the transaction is recurring",
            "in": "query",
            "name": "is_recurring",
            "required": false,
            "schema": {"type": "boolean"}
          },
          {
            "description": "Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates.",
            "in": "query",
            "name": "request_id",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "Filter by earliest transaction timestamp",
            "in": "query",
            "name": "timestamp_date_min",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filter by latest transaction upload date - when Heron received the transaction",
            "in": "query",
            "name": "created_date_max",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions whose values were last updated in Heron systems before the specified input value",
            "in": "query",
            "name": "last_updated_max",
            "required": false,
            "schema": {
              "example": "2023-04-11T16:52:52.909011",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter by latest transaction timestamp",
            "in": "query",
            "name": "timestamp_date_max",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "End user id of transaction",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "What to order transactions by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "id_asc",
              "enum": [
                "amount_asc",
                "amount_desc",
                "abs_amount_asc",
                "abs_amount_desc",
                "description_asc",
                "description_desc",
                "timestamp_asc",
                "timestamp_desc",
                "id_asc",
                "id_desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by minimum amount of transaction",
            "in": "query",
            "name": "min_amount",
            "required": false,
            "schema": {"type": "number"}
          },
          {
            "description": "Heron generated Id of transaction",
            "in": "query",
            "name": "heron_id",
            "required": false,
            "schema": {
              "example": "txn_YNLvm5ZHBRdhV8uGp3n3vx",
              "type": "string"
            }
          },
          {
            "description": "Filter by minimum confidence of annotation associated with transaction",
            "in": "query",
            "name": "confidence_min",
            "required": false,
            "schema": {"maximum": 1, "minimum": 0, "type": "number"}
          },
          {
            "description": "Filter by earliest transaction upload date - when Heron received the transaction",
            "in": "query",
            "name": "created_date_min",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filter by the heron_id of the category that the transaction is annotated with",
            "explode": true,
            "in": "query",
            "name": "category_heron_id",
            "required": false,
            "schema": {
              "default": [],
              "example": "ctg_Rg7rLEQ2VHyejMQSdGLo6w",
              "items": {"type": "string"},
              "nullable": true,
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Reference Id of transaction",
            "in": "query",
            "name": "reference_id",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "Filter by keyword match on transaction description; case insensitive",
            "in": "query",
            "name": "description_keyword",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "Filter by transaction code",
            "in": "query",
            "name": "transaction_code",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "description": "Filter by whether the transaction has a matching transaction",
            "in": "query",
            "name": "has_matching_transaction",
            "required": false,
            "schema": {"type": "boolean"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_meta": {
                      "properties": {
                        "next_url": {"type": "string"},
                        "page": {"type": "integer"},
                        "pages": {"type": "integer"},
                        "per_page": {"type": "integer"},
                        "prev_url": {"type": "string"}
                      },
                      "type": "object"
                    },
                    "_summary": {
                      "properties": {
                        "returned_transactions": {"type": "integer"},
                        "transactions": {"type": "integer"}
                      },
                      "type": "object"
                    },
                    "transactions": {
                      "items": {
                        "$ref": "#/components/schemas/TransactionGetOutput"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {"description": "Unauthorized"}
        },
        "security": [{"BasicAuth": []}],
        "tags": ["Transactions"]
      },
      "post": {
        "description": "Enrich and categorize transactions. Please send a maximum of 249 transactions per request if you expect to consume the sync response. If you use us async and `GET` transactions after an end_user is processed, please send a maximum of 1,000 transactions.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsPostSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "transactions": {
                      "items": {
                        "$ref": "#/components/schemas/TransactionPostOutput"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {"example": 413, "type": "integer"},
                    "description": {
                      "example": "Transaction batch size exceeds max of 10000",
                      "type": "string"
                    },
                    "name": {"example": "Payload Too Large", "type": "string"}
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payload Too Large"
          }
        },
        "security": [{"BasicAuth": []}],
        "summary": "Create and enrich transactions",
        "tags": ["Transactions"]
      }
    },
    "/api/transactions/{heron_id}/feedback": {
      "put": {
        "description": "Provide feedback on a Transaction's Categories and Merchants",
        "parameters": [
          {
            "description": "Transaction `heron_id`",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transaction": {
                    "$ref": "#/components/schemas/TransactionFeedbackSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "A partial Transaction object with the suggested Category and/or Merchant. If you provide a `heron_id` for Category or Merchant, you don't need to provide other fields. If you don't know the Merchant `heron_id` nor name, you can just send the `is_correct` boolean. If `heron_id` is provided, we disregard `name` and `label`. If `is_correct` is set to true, we disregard all other Merchant fields.\n",
          "required": true
        },
        "responses": {
          "200": {"description": "OK"},
          "401": {"description": "Unauthorized"}
        },
        "security": [{"BasicAuth": []}],
        "summary": "Create category, merchant feedback",
        "tags": ["EnrichmentFeedback"]
      }
    },
    "/api/transactions/{reference_id_or_heron_id}": {
      "get": {
        "description": "Get enriched transaction",
        "parameters": [
          {
            "in": "path",
            "name": "reference_id_or_heron_id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transaction_enriched": {
                      "$ref": "#/components/schemas/TransactionEnriched",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {"description": "Unauthorized"}
        },
        "security": [{"BasicAuth": []}],
        "tags": ["EnrichedTransactions"]
      }
    }
  },
  "security": [{"BasicAuth": ["username:api_key"]}],
  "servers": [{"description": "Production", "url": "https://app.herondata.io"}]
}
